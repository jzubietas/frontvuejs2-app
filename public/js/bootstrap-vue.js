/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/bootstrap-vue/dist/bootstrap-vue.js":
/*!**********************************************************!*\
  !*** ./node_modules/bootstrap-vue/dist/bootstrap-vue.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/* provided dependency */ var process = __webpack_require__(/*! process/browser */ \"./node_modules/process/browser.js\");\n/*!\n * BootstrapVue 2.5.0\n *\n * @link https://bootstrap-vue.js.org\n * @source https://github.com/bootstrap-vue/bootstrap-vue\n * @copyright (c) 2016-2020 BootstrapVue\n * @license MIT\n * https://github.com/bootstrap-vue/bootstrap-vue/blob/master/LICENSE\n */\n\n(function (global, factory) {\n   true ? module.exports = factory(__webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm.js\")) :\n  0;\n}(this, (function (Vue) { 'use strict';\n\n  Vue = Vue && Vue.hasOwnProperty('default') ? Vue['default'] : Vue;\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      if (enumerableOnly) symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n      keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n  }\n\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n\n      if (i % 2) {\n        ownKeys(Object(source), true).forEach(function (key) {\n          _defineProperty(target, key, source[key]);\n        });\n      } else if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys(Object(source)).forEach(function (key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n\n    return target;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n  }\n\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function _construct(Parent, args, Class) {\n    if (isNativeReflectConstruct()) {\n      _construct = Reflect.construct;\n    } else {\n      _construct = function _construct(Parent, args, Class) {\n        var a = [null];\n        a.push.apply(a, args);\n        var Constructor = Function.bind.apply(Parent, a);\n        var instance = new Constructor();\n        if (Class) _setPrototypeOf(instance, Class.prototype);\n        return instance;\n      };\n    }\n\n    return _construct.apply(null, arguments);\n  }\n\n  function _isNativeFunction(fn) {\n    return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n  }\n\n  function _wrapNativeSuper(Class) {\n    var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n    _wrapNativeSuper = function _wrapNativeSuper(Class) {\n      if (Class === null || !_isNativeFunction(Class)) return Class;\n\n      if (typeof Class !== \"function\") {\n        throw new TypeError(\"Super expression must either be null or a function\");\n      }\n\n      if (typeof _cache !== \"undefined\") {\n        if (_cache.has(Class)) return _cache.get(Class);\n\n        _cache.set(Class, Wrapper);\n      }\n\n      function Wrapper() {\n        return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n      }\n\n      Wrapper.prototype = Object.create(Class.prototype, {\n        constructor: {\n          value: Wrapper,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n      return _setPrototypeOf(Wrapper, Class);\n    };\n\n    return _wrapNativeSuper(Class);\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  function _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n      return call;\n    }\n\n    return _assertThisInitialized(self);\n  }\n\n  function _superPropBase(object, property) {\n    while (!Object.prototype.hasOwnProperty.call(object, property)) {\n      object = _getPrototypeOf(object);\n      if (object === null) break;\n    }\n\n    return object;\n  }\n\n  function _get(target, property, receiver) {\n    if (typeof Reflect !== \"undefined\" && Reflect.get) {\n      _get = Reflect.get;\n    } else {\n      _get = function _get(target, property, receiver) {\n        var base = _superPropBase(target, property);\n\n        if (!base) return;\n        var desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.get) {\n          return desc.get.call(receiver);\n        }\n\n        return desc.value;\n      };\n    }\n\n    return _get(target, property, receiver || target);\n  }\n\n  function _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n  }\n\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n  }\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n      return arr2;\n    }\n  }\n\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n\n  function _iterableToArray(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n  }\n\n  function _iterableToArrayLimit(arr, i) {\n    if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n      return;\n    }\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n  }\n\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n  }\n\n  //\n\n  // --- Static ---\n  var from = function from() {\n    return Array.from.apply(Array, arguments);\n  };\n  var isArray = function isArray(val) {\n    return Array.isArray(val);\n  }; // --- Instance ---\n\n  var arrayIncludes = function arrayIncludes(array, value) {\n    return array.indexOf(value) !== -1;\n  };\n  var concat = function concat() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return Array.prototype.concat.apply([], args);\n  };\n\n  var assign = function assign() {\n    return Object.assign.apply(Object, arguments);\n  };\n  var create = function create(proto, optionalProps) {\n    return Object.create(proto, optionalProps);\n  };\n  var defineProperties = function defineProperties(obj, props) {\n    return Object.defineProperties(obj, props);\n  };\n  var defineProperty = function defineProperty(obj, prop, descr) {\n    return Object.defineProperty(obj, prop, descr);\n  };\n  var freeze = function freeze(obj) {\n    return Object.freeze(obj);\n  };\n  var getOwnPropertyNames = function getOwnPropertyNames(obj) {\n    return Object.getOwnPropertyNames(obj);\n  };\n  var keys = function keys(obj) {\n    return Object.keys(obj);\n  }; // --- \"Instance\" ---\n\n  var hasOwnProperty = function hasOwnProperty(obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n  };\n  var toString = function toString(obj) {\n    return Object.prototype.toString.call(obj);\n  }; // --- Utilities ---\n\n  /**\n   * Quick object check - this is primarily used to tell\n   * Objects from primitive values when we know the value\n   * is a JSON-compliant type.\n   * Note object could be a complex type like array, date, etc.\n   */\n\n  var isObject = function isObject(obj) {\n    return obj !== null && _typeof(obj) === 'object';\n  };\n  /**\n   * Strict object type check. Only returns true\n   * for plain JavaScript objects.\n   */\n\n  var isPlainObject = function isPlainObject(obj) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n  };\n  /**\n   * Shallow copy an object. If the passed in object\n   * is null or undefined, returns an empty object\n   */\n\n  var clone = function clone(obj) {\n    return _objectSpread2({}, obj);\n  };\n  /**\n   * Return a shallow copy of object with\n   * the specified properties omitted\n   * @link https://gist.github.com/bisubus/2da8af7e801ffd813fab7ac221aa7afc\n   */\n\n  var omit = function omit(obj, props) {\n    return keys(obj).filter(function (key) {\n      return props.indexOf(key) === -1;\n    }).reduce(function (result, key) {\n      return _objectSpread2({}, result, _defineProperty({}, key, obj[key]));\n    }, {});\n  };\n  /**\n   * Convenience method to create a read-only descriptor\n   */\n\n  var readonlyDescriptor = function readonlyDescriptor() {\n    return {\n      enumerable: true,\n      configurable: false,\n      writable: false\n    };\n  };\n  /**\n   * Deep-freezes and object, making it immutable / read-only.\n   * Returns the same object passed-in, but frozen.\n   * Freezes inner object/array/values first.\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n   * Note: this method will not work for property values using Symbol() as a key\n   */\n\n  var deepFreeze = function deepFreeze(obj) {\n    // Retrieve the property names defined on object/array\n    // Note: `keys` will ignore properties that are keyed by a `Symbol()`\n    var props = keys(obj); // Iterate over each prop and recursively freeze it\n\n    props.forEach(function (prop) {\n      var value = obj[prop]; // If value is a plain object or array, we deepFreeze it\n\n      obj[prop] = value && (isPlainObject(value) || isArray(value)) ? deepFreeze(value) : value;\n    });\n    return freeze(obj);\n  };\n\n  /**\n   * Utilities to get information about the current environment\n   */\n  // --- Constants ---\n  var hasWindowSupport = typeof window !== 'undefined';\n  var hasDocumentSupport = typeof document !== 'undefined';\n  var hasNavigatorSupport = typeof navigator !== 'undefined';\n  var hasPromiseSupport = typeof Promise !== 'undefined';\n  var hasMutationObserverSupport = typeof MutationObserver !== 'undefined' || typeof WebKitMutationObserver !== 'undefined' || typeof MozMutationObserver !== 'undefined';\n  var isBrowser = hasWindowSupport && hasDocumentSupport && hasNavigatorSupport; // Browser type sniffing\n\n  var userAgent = isBrowser ? window.navigator.userAgent.toLowerCase() : '';\n  var isJSDOM = userAgent.indexOf('jsdom') > 0;\n  var isIE = /msie|trident/.test(userAgent); // Determine if the browser supports the option passive for events\n\n  var hasPassiveEventSupport = function () {\n    var passiveEventSupported = false;\n\n    if (isBrowser) {\n      try {\n        var options = {\n          get passive() {\n            // This function will be called when the browser\n            // attempts to access the passive property.\n\n            /* istanbul ignore next: will never be called in JSDOM */\n            passiveEventSupported = true;\n          }\n\n        };\n        window.addEventListener('test', options, options);\n        window.removeEventListener('test', options, options);\n      } catch (err) {\n        /* istanbul ignore next: will never be called in JSDOM */\n        passiveEventSupported = false;\n      }\n    }\n\n    return passiveEventSupported;\n  }();\n  var hasTouchSupport = isBrowser && ('ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0);\n  var hasPointerEventSupport = isBrowser && Boolean(window.PointerEvent || window.MSPointerEvent);\n  var hasIntersectionObserverSupport = isBrowser && 'IntersectionObserver' in window && 'IntersectionObserverEntry' in window && // Edge 15 and UC Browser lack support for `isIntersecting`\n  // but we an use intersectionRatio > 0 instead\n  // 'isIntersecting' in window.IntersectionObserverEntry.prototype &&\n  'intersectionRatio' in window.IntersectionObserverEntry.prototype; // --- Getters ---\n\n  var getEnv = function getEnv(key) {\n    var fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var env = typeof process !== 'undefined' && process ? process.env || {} : {};\n\n    if (!key) {\n      /* istanbul ignore next */\n      return env;\n    }\n\n    return env[key] || fallback;\n  };\n  var getNoWarn = function getNoWarn() {\n    return getEnv('BOOTSTRAP_VUE_NO_WARN');\n  };\n\n  var w = hasWindowSupport ? window : {};\n  var Element$1 = hasWindowSupport ? w.Element :\n  /*#__PURE__*/\n  function (_Object) {\n    _inherits(Element, _Object);\n\n    function Element() {\n      _classCallCheck(this, Element);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(Element).apply(this, arguments));\n    }\n\n    return Element;\n  }(_wrapNativeSuper(Object));\n  var HTMLElement = hasWindowSupport ? w.HTMLElement :\n  /*#__PURE__*/\n  function (_Element) {\n    _inherits(HTMLElement, _Element);\n\n    function HTMLElement() {\n      _classCallCheck(this, HTMLElement);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(HTMLElement).apply(this, arguments));\n    }\n\n    return HTMLElement;\n  }(Element$1);\n  var SVGElement = hasWindowSupport ? w.SVGElement :\n  /*#__PURE__*/\n  function (_Element2) {\n    _inherits(SVGElement, _Element2);\n\n    function SVGElement() {\n      _classCallCheck(this, SVGElement);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(SVGElement).apply(this, arguments));\n    }\n\n    return SVGElement;\n  }(Element$1);\n  var File = hasWindowSupport ? w.File :\n  /*#__PURE__*/\n  function (_Object2) {\n    _inherits(File, _Object2);\n\n    function File() {\n      _classCallCheck(this, File);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(File).apply(this, arguments));\n    }\n\n    return File;\n  }(_wrapNativeSuper(Object));\n\n  var toType = function toType(val) {\n    return _typeof(val);\n  };\n  var toRawType = function toRawType(val) {\n    return Object.prototype.toString.call(val).slice(8, -1);\n  };\n  var isUndefined = function isUndefined(val) {\n    return val === undefined;\n  };\n  var isNull = function isNull(val) {\n    return val === null;\n  };\n  var isUndefinedOrNull = function isUndefinedOrNull(val) {\n    return isUndefined(val) || isNull(val);\n  };\n  var isFunction = function isFunction(val) {\n    return toType(val) === 'function';\n  };\n  var isBoolean = function isBoolean(val) {\n    return toType(val) === 'boolean';\n  };\n  var isString = function isString(val) {\n    return toType(val) === 'string';\n  };\n  var isNumber = function isNumber(val) {\n    return toType(val) === 'number';\n  };\n  var isDate = function isDate(val) {\n    return val instanceof Date;\n  };\n  var isEvent = function isEvent(val) {\n    return val instanceof Event;\n  };\n  var isFile = function isFile(val) {\n    return val instanceof File;\n  };\n  var isRegExp = function isRegExp(val) {\n    return toRawType(val) === 'RegExp';\n  };\n  var isPromise = function isPromise(val) {\n    return !isUndefinedOrNull(val) && isFunction(val.then) && isFunction(val.catch);\n  }; // Extra convenience named re-exports\n\n  var cloneDeep = function cloneDeep(obj) {\n    var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : obj;\n\n    if (isArray(obj)) {\n      return obj.reduce(function (result, val) {\n        return [].concat(_toConsumableArray(result), [cloneDeep(val, val)]);\n      }, []);\n    }\n\n    if (isPlainObject(obj)) {\n      return keys(obj).reduce(function (result, key) {\n        return _objectSpread2({}, result, _defineProperty({}, key, cloneDeep(obj[key], obj[key])));\n      }, {});\n    }\n\n    return defaultValue;\n  };\n\n  var identity = function identity(x) {\n    return x;\n  };\n\n  var RX_ARRAY_NOTATION = /\\[(\\d+)]/g;\n  /**\n   * Get property defined by dot/array notation in string.\n   *\n   * @link https://gist.github.com/jeneg/9767afdcca45601ea44930ea03e0febf#gistcomment-1935901\n   *\n   * @param {Object} obj\n   * @param {string|Array} path\n   * @param {*} defaultValue (optional)\n   * @return {*}\n   */\n\n  var get = function get(obj, path) {\n    var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    // Handle array of path values\n    path = isArray(path) ? path.join('.') : path; // If no path or no object passed\n\n    if (!path || !isObject(obj)) {\n      return defaultValue;\n    } // Handle edge case where user has dot(s) in top-level item field key\n    // See https://github.com/bootstrap-vue/bootstrap-vue/issues/2762\n    // Switched to `in` operator vs `hasOwnProperty` to handle obj.prototype getters\n    // https://github.com/bootstrap-vue/bootstrap-vue/issues/3463\n\n\n    if (path in obj) {\n      return obj[path];\n    } // Handle string array notation (numeric indices only)\n\n\n    path = String(path).replace(RX_ARRAY_NOTATION, '.$1');\n    var steps = path.split('.').filter(identity); // Handle case where someone passes a string of only dots\n\n    if (steps.length === 0) {\n      return defaultValue;\n    } // Traverse path in object to find result\n    // We use `!=` vs `!==` to test for both `null` and `undefined`\n    // Switched to `in` operator vs `hasOwnProperty` to handle obj.prototype getters\n    // https://github.com/bootstrap-vue/bootstrap-vue/issues/3463\n\n\n    return steps.every(function (step) {\n      return isObject(obj) && step in obj && (obj = obj[step]) != null;\n    }) ? obj : defaultValue;\n  };\n\n  /**\n   * Log a warning message to the console with BootstrapVue formatting\n   * @param {string} message\n   */\n\n  var warn = function warn(message)\n  /* istanbul ignore next */\n  {\n    var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (!getNoWarn()) {\n      console.warn(\"[BootstrapVue warn]: \".concat(source ? \"\".concat(source, \" - \") : '').concat(message));\n    }\n  };\n  /**\n   * Warn when no Promise support is given\n   * @param {string} source\n   * @returns {boolean} warned\n   */\n\n  var warnNotClient = function warnNotClient(source) {\n    /* istanbul ignore else */\n    if (isBrowser) {\n      return false;\n    } else {\n      warn(\"\".concat(source, \": Can not be called during SSR.\"));\n      return true;\n    }\n  };\n  /**\n   * Warn when no Promise support is given\n   * @param {string} source\n   * @returns {boolean} warned\n   */\n\n  var warnNoPromiseSupport = function warnNoPromiseSupport(source) {\n    /* istanbul ignore else */\n    if (hasPromiseSupport) {\n      return false;\n    } else {\n      warn(\"\".concat(source, \": Requires Promise support.\"));\n      return true;\n    }\n  };\n  /**\n   * Warn when no MutationObserver support is given\n   * @param {string} source\n   * @returns {boolean} warned\n   */\n\n  var warnNoMutationObserverSupport = function warnNoMutationObserverSupport(source) {\n    /* istanbul ignore else */\n    if (hasMutationObserverSupport) {\n      return false;\n    } else {\n      warn(\"\".concat(source, \": Requires MutationObserver support.\"));\n      return true;\n    }\n  };\n\n  // NOTES\n  //\n  // The global config SHALL NOT be used to set defaults for Boolean props, as the props\n  // would loose their semantic meaning, and force people writing 3rd party components to\n  // explicity set a true or false value using the v-bind syntax on boolean props\n  //\n  // Supported config values (depending on the prop's supported type(s)):\n  // `String`, `Array`, `Object`, `null` or `undefined`\n  // BREAKPOINT DEFINITIONS\n  //\n  // Some components (`<b-col>` and `<b-form-group>`) generate props based on breakpoints,\n  // and this occurs when the component is first loaded (evaluated), which may happen\n  // before the config is created/modified\n  //\n  // To get around this we make these components' props async (lazy evaluation)\n  // The component definition is only called/executed when the first access to the\n  // component is used (and cached on subsequent uses)\n  // PROP DEFAULTS\n  //\n  // For default values on props, we use the default value factory function approach so\n  // that the default values are pulled in at each component instantiation\n  //\n  //  props: {\n  //    variant: {\n  //      type: String,\n  //      default: () => getConfigComponent('BAlert', 'variant')\n  //    }\n  //  }\n  //\n  // We also provide a cached getter for breakpoints, which are \"frozen\" on first access\n  // prettier-ignore\n\n  var DEFAULTS = deepFreeze({\n    // Breakpoints\n    breakpoints: ['xs', 'sm', 'md', 'lg', 'xl'],\n    // Form controls\n    formControls: {\n      size: null\n    },\n    // Component specific defaults are keyed by the component\n    // name (PascalCase) and prop name (camelCase)\n    BAlert: {\n      dismissLabel: 'Close',\n      variant: 'info'\n    },\n    BBadge: {\n      variant: 'secondary'\n    },\n    BButton: {\n      size: null,\n      variant: 'secondary'\n    },\n    BButtonClose: {\n      content: '&times;',\n      // `textVariant` is `null` to inherit the current text color\n      textVariant: null,\n      ariaLabel: 'Close'\n    },\n    BCalendar: {\n      // BFormDate will choose these first if not provided in BFormDate section\n      labelPrevYear: 'Previous year',\n      labelPrevMonth: 'Previous month',\n      labelCurrentMonth: 'Current month',\n      labelNextMonth: 'Next month',\n      labelNextYear: 'Next year',\n      labelToday: 'Today',\n      labelSelected: 'Selected date',\n      labelNoDateSelected: 'No date selected',\n      labelCalendar: 'Calendar',\n      labelNav: 'Calendar navigation',\n      labelHelp: 'Use cursor keys to navigate calendar dates'\n    },\n    BCardSubTitle: {\n      // `<b-card>` and `<b-card-body>` also inherit this prop\n      subTitleTextVariant: 'muted'\n    },\n    BCarousel: {\n      labelPrev: 'Previous Slide',\n      labelNext: 'Next Slide',\n      labelGotoSlide: 'Goto Slide',\n      labelIndicators: 'Select a slide to display'\n    },\n    BDropdown: {\n      toggleText: 'Toggle Dropdown',\n      size: null,\n      variant: 'secondary',\n      splitVariant: null\n    },\n    BFormDatepicker: {\n      // BFormDatepicker will choose from BCalendar first if not provided in BFormDatepicker section\n      labelPrevYear: null,\n      labelPrevMonth: null,\n      labelCurrentMonth: null,\n      labelNextMonth: null,\n      labelNextYear: null,\n      labelToday: null,\n      labelSelected: null,\n      labelNoDateSelected: null,\n      labelCalendar: null,\n      labelNav: null,\n      labelHelp: null,\n      // These props are specific to BFormDatepicker\n      labelTodayButton: 'Select today',\n      labelResetButton: 'Reset',\n      labelCloseButton: 'Close'\n    },\n    BFormFile: {\n      browseText: 'Browse',\n      // Chrome default file prompt\n      placeholder: 'No file chosen',\n      dropPlaceholder: 'Drop files here'\n    },\n    BFormSpinbutton: {\n      labelDecrement: 'Decrement',\n      labelIncrement: 'Increment'\n    },\n    BFormTag: {\n      removeLabel: 'Remove tag',\n      variant: 'secondary'\n    },\n    BFormTags: {\n      addButtonText: 'Add',\n      addButtonVariant: 'outline-secondary',\n      duplicateTagText: 'Duplicate tag(s)',\n      invalidTagText: 'Invalid tag(s)',\n      placeholder: 'Add tag...',\n      tagRemoveLabel: 'Remove tag',\n      tagRemovedLabel: 'Tag removed',\n      tagVariant: 'secondary'\n    },\n    BFormText: {\n      textVariant: 'muted'\n    },\n    BImg: {\n      blankColor: 'transparent'\n    },\n    BImgLazy: {\n      blankColor: 'transparent'\n    },\n    BInputGroup: {\n      size: null\n    },\n    BJumbotron: {\n      bgVariant: null,\n      borderVariant: null,\n      textVariant: null\n    },\n    BListGroupItem: {\n      variant: null\n    },\n    BModal: {\n      titleTag: 'h5',\n      size: 'md',\n      headerBgVariant: null,\n      headerBorderVariant: null,\n      headerTextVariant: null,\n      headerCloseVariant: null,\n      bodyBgVariant: null,\n      bodyTextVariant: null,\n      footerBgVariant: null,\n      footerBorderVariant: null,\n      footerTextVariant: null,\n      cancelTitle: 'Cancel',\n      cancelVariant: 'secondary',\n      okTitle: 'OK',\n      okVariant: 'primary',\n      headerCloseContent: '&times;',\n      headerCloseLabel: 'Close'\n    },\n    BNavbar: {\n      variant: null\n    },\n    BNavbarToggle: {\n      label: 'Toggle navigation'\n    },\n    BPagination: {\n      size: null\n    },\n    BPaginationNav: {\n      size: null\n    },\n    BPopover: {\n      boundary: 'scrollParent',\n      boundaryPadding: 5,\n      customClass: null,\n      delay: 50,\n      variant: null\n    },\n    BProgress: {\n      variant: null\n    },\n    BProgressBar: {\n      variant: null\n    },\n    BSpinner: {\n      variant: null\n    },\n    BTable: {\n      selectedVariant: 'active',\n      headVariant: null,\n      footVariant: null\n    },\n    BToast: {\n      toaster: 'b-toaster-top-right',\n      autoHideDelay: 5000,\n      variant: null,\n      toastClass: null,\n      headerClass: null,\n      bodyClass: null\n    },\n    BToaster: {\n      ariaLive: null,\n      ariaAtomic: null,\n      role: null\n    },\n    BTooltip: {\n      boundary: 'scrollParent',\n      boundaryPadding: 5,\n      customClass: null,\n      delay: 50,\n      variant: null\n    }\n  });\n\n  var NAME = 'BvConfig';\n  var PROP_NAME = '$bvConfig'; // Config manager class\n\n  var BvConfig =\n  /*#__PURE__*/\n  function () {\n    function BvConfig() {\n      _classCallCheck(this, BvConfig);\n\n      // TODO: pre-populate with default config values (needs updated tests)\n      // this.$_config = cloneDeep(DEFAULTS)\n      this.$_config = {};\n      this.$_cachedBreakpoints = null;\n    }\n\n    _createClass(BvConfig, [{\n      key: \"getDefaults\",\n      // Returns the defaults\n      value: function getDefaults()\n      /* istanbul ignore next */\n      {\n        return this.defaults;\n      } // Method to merge in user config parameters\n\n    }, {\n      key: \"setConfig\",\n      value: function setConfig() {\n        var _this = this;\n\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        if (!isPlainObject(config)) {\n          /* istanbul ignore next */\n          return;\n        }\n\n        var configKeys = getOwnPropertyNames(config);\n        configKeys.forEach(function (cmpName) {\n          /* istanbul ignore next */\n          if (!hasOwnProperty(DEFAULTS, cmpName)) {\n            warn(\"Unknown config property \\\"\".concat(cmpName, \"\\\"\"), NAME);\n            return;\n          }\n\n          var cmpConfig = config[cmpName];\n\n          if (cmpName === 'breakpoints') {\n            // Special case for breakpoints\n            var breakpoints = config.breakpoints;\n            /* istanbul ignore if */\n\n            if (!isArray(breakpoints) || breakpoints.length < 2 || breakpoints.some(function (b) {\n              return !isString(b) || b.length === 0;\n            })) {\n              warn('\"breakpoints\" must be an array of at least 2 breakpoint names', NAME);\n            } else {\n              _this.$_config.breakpoints = cloneDeep(breakpoints);\n            }\n          } else if (isPlainObject(cmpConfig)) {\n            // Component prop defaults\n            var props = getOwnPropertyNames(cmpConfig);\n            props.forEach(function (prop) {\n              /* istanbul ignore if */\n              if (!hasOwnProperty(DEFAULTS[cmpName], prop)) {\n                warn(\"Unknown config property \\\"\".concat(cmpName, \".\").concat(prop, \"\\\"\"), NAME);\n              } else {\n                // TODO: If we pre-populate the config with defaults, we can skip this line\n                _this.$_config[cmpName] = _this.$_config[cmpName] || {};\n\n                if (!isUndefined(cmpConfig[prop])) {\n                  _this.$_config[cmpName][prop] = cloneDeep(cmpConfig[prop]);\n                }\n              }\n            });\n          }\n        });\n      } // Clear the config. For testing purposes only\n\n    }, {\n      key: \"resetConfig\",\n      value: function resetConfig() {\n        this.$_config = {};\n      } // Returns a deep copy of the user config\n\n    }, {\n      key: \"getConfig\",\n      value: function getConfig() {\n        return cloneDeep(this.$_config);\n      }\n    }, {\n      key: \"getConfigValue\",\n      value: function getConfigValue(key) {\n        // First we try the user config, and if key not found we fall back to default value\n        // NOTE: If we deep clone DEFAULTS into config, then we can skip the fallback for get\n        return cloneDeep(get(this.$_config, key, get(DEFAULTS, key)));\n      }\n    }, {\n      key: \"defaults\",\n      get: function get()\n      /* istanbul ignore next */\n      {\n        return DEFAULTS;\n      }\n    }], [{\n      key: \"Defaults\",\n      get: function get()\n      /* istanbul ignore next */\n      {\n        return DEFAULTS;\n      }\n    }]);\n\n    return BvConfig;\n  }(); // Method for applying a global config\n\n\n  var setConfig = function setConfig() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var Vue$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Vue;\n    // Ensure we have a $bvConfig Object on the Vue prototype.\n    // We set on Vue and OurVue just in case consumer has not set an alias of `vue`.\n    Vue$1.prototype[PROP_NAME] = Vue.prototype[PROP_NAME] = Vue$1.prototype[PROP_NAME] || Vue.prototype[PROP_NAME] || new BvConfig(); // Apply the config values\n\n    Vue$1.prototype[PROP_NAME].setConfig(config);\n  }; // Method for resetting the user config. Exported for testing purposes only.\n\n  /**\n   * Checks if there are multiple instances of Vue, and warns (once) about possible issues.\n   * @param {object} Vue\n   */\n\n  var checkMultipleVue = function () {\n    var checkMultipleVueWarned = false;\n    var MULTIPLE_VUE_WARNING = ['Multiple instances of Vue detected!', 'You may need to set up an alias for Vue in your bundler config.', 'See: https://bootstrap-vue.js.org/docs#using-module-bundlers'].join('\\n');\n    return function (Vue$1) {\n      /* istanbul ignore next */\n      if (!checkMultipleVueWarned && Vue !== Vue$1 && !isJSDOM) {\n        warn(MULTIPLE_VUE_WARNING);\n      }\n\n      checkMultipleVueWarned = true;\n    };\n  }();\n  /**\n   * Plugin install factory function.\n   * @param {object} { components, directives }\n   * @returns {function} plugin install function\n   */\n\n  var installFactory = function installFactory() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        components = _ref.components,\n        directives = _ref.directives,\n        plugins = _ref.plugins;\n\n    var install = function install(Vue) {\n      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (install.installed) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      install.installed = true;\n      checkMultipleVue(Vue);\n      setConfig(config, Vue);\n      registerComponents(Vue, components);\n      registerDirectives(Vue, directives);\n      registerPlugins(Vue, plugins);\n    };\n\n    install.installed = false;\n    return install;\n  };\n  /**\n   * Plugin object factory function.\n   * @param {object} { components, directives, plugins }\n   * @returns {object} plugin install object\n   */\n\n  var pluginFactory = function pluginFactory() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var extend = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return _objectSpread2({}, extend, {\n      install: installFactory(options)\n    });\n  };\n  /**\n   * Load a group of plugins.\n   * @param {object} Vue\n   * @param {object} Plugin definitions\n   */\n\n  var registerPlugins = function registerPlugins(Vue) {\n    var plugins = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for (var plugin in plugins) {\n      if (plugin && plugins[plugin]) {\n        Vue.use(plugins[plugin]);\n      }\n    }\n  };\n  /**\n   * Load a component.\n   * @param {object} Vue\n   * @param {string} Component name\n   * @param {object} Component definition\n   */\n\n  var registerComponent = function registerComponent(Vue, name, def) {\n    if (Vue && name && def) {\n      Vue.component(name, def);\n    }\n  };\n  /**\n   * Load a group of components.\n   * @param {object} Vue\n   * @param {object} Object of component definitions\n   */\n\n  var registerComponents = function registerComponents(Vue) {\n    var components = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for (var component in components) {\n      registerComponent(Vue, component, components[component]);\n    }\n  };\n  /**\n   * Load a directive.\n   * @param {object} Vue\n   * @param {string} Directive name\n   * @param {object} Directive definition\n   */\n\n  var registerDirective = function registerDirective(Vue, name, def) {\n    if (Vue && name && def) {\n      // Ensure that any leading V is removed from the\n      // name, as Vue adds it automatically\n      Vue.directive(name.replace(/^VB/, 'B'), def);\n    }\n  };\n  /**\n   * Load a group of directives.\n   * @param {object} Vue\n   * @param {object} Object of directive definitions\n   */\n\n  var registerDirectives = function registerDirectives(Vue) {\n    var directives = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for (var directive in directives) {\n      registerDirective(Vue, directive, directives[directive]);\n    }\n  };\n  /**\n   * Install plugin if window.Vue available\n   * @param {object} Plugin definition\n   */\n\n  var vueUse = function vueUse(VuePlugin) {\n    /* istanbul ignore next */\n    if (hasWindowSupport && window.Vue) {\n      window.Vue.use(VuePlugin);\n    }\n    /* istanbul ignore next */\n\n\n    if (hasWindowSupport && VuePlugin.NAME) {\n      window[VuePlugin.NAME] = VuePlugin;\n    }\n  };\n\n  var memoize = function memoize(fn) {\n    var cache = create(null);\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var argsKey = JSON.stringify(args);\n      return cache[argsKey] = cache[argsKey] || fn.apply(null, args);\n    };\n  };\n\n  var PROP_NAME$1 = '$bvConfig';\n  var VueProto = Vue.prototype; // --- Getter methods ---\n\n  var getConfigValue = function getConfigValue(key) {\n    return VueProto[PROP_NAME$1] ? VueProto[PROP_NAME$1].getConfigValue(key) : cloneDeep(get(DEFAULTS, key));\n  }; // Method to grab a config value for a particular component\n\n  var getComponentConfig = function getComponentConfig(cmpName) {\n    var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    // Return the particular config value for key for if specified,\n    // otherwise we return the full config (or an empty object if not found)\n    return key ? getConfigValue(\"\".concat(cmpName, \".\").concat(key)) : getConfigValue(cmpName) || {};\n  }; // Convenience method for getting all breakpoint names\n\n  var getBreakpoints = function getBreakpoints() {\n    return getConfigValue('breakpoints');\n  }; // Private function for caching / locking-in breakpoint names\n\n  var _getBreakpointsCached = memoize(function () {\n    return getBreakpoints();\n  }); // Convenience method for getting all breakpoint names.\n  // Caches the results after first access.\n\n\n  var getBreakpointsCached = function getBreakpointsCached() {\n    return cloneDeep(_getBreakpointsCached());\n  }; // Convenience method for getting breakpoints with\n  // the smallest breakpoint set as ''.\n  // Useful for components that create breakpoint specific props.\n  // Caches the results after first access.\n\n  var getBreakpointsUpCached = memoize(function () {\n    var breakpoints = getBreakpointsCached();\n    breakpoints[0] = '';\n    return breakpoints;\n  }); // Convenience method for getting breakpoints with\n\n  var w$1 = hasWindowSupport ? window : {};\n  var d = hasDocumentSupport ? document : {};\n  var elProto = typeof Element !== 'undefined' ? Element.prototype : {}; // --- Normalization utils ---\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\n\n  /* istanbul ignore next */\n\n  var matchesEl = elProto.matches || elProto.msMatchesSelector || elProto.webkitMatchesSelector; // See: https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\n\n  /* istanbul ignore next */\n\n  var closestEl = elProto.closest || function (sel)\n  /* istanbul ignore next */\n  {\n    var el = this;\n\n    do {\n      // Use our \"patched\" matches function\n      if (matches(el, sel)) {\n        return el;\n      }\n\n      el = el.parentElement || el.parentNode;\n    } while (!isNull(el) && el.nodeType === Node.ELEMENT_NODE);\n\n    return null;\n  }; // `requestAnimationFrame()` convenience method\n\n  var requestAF = w$1.requestAnimationFrame || w$1.webkitRequestAnimationFrame || w$1.mozRequestAnimationFrame || w$1.msRequestAnimationFrame || w$1.oRequestAnimationFrame || // Fallback, but not a true polyfill\n  // Only needed for Opera Mini\n\n  /* istanbul ignore next */\n  function (cb) {\n    return setTimeout(cb, 16);\n  };\n  var MutationObs = w$1.MutationObserver || w$1.WebKitMutationObserver || w$1.MozMutationObserver || null; // --- Utils ---\n  // Remove a node from DOM\n\n  var removeNode = function removeNode(el) {\n    return el && el.parentNode && el.parentNode.removeChild(el);\n  }; // Determine if an element is an HTML element\n\n  var isElement = function isElement(el) {\n    return !!(el && el.nodeType === Node.ELEMENT_NODE);\n  }; // Determine if an HTML element is visible - Faster than CSS check\n\n  var isVisible = function isVisible(el) {\n    if (!isElement(el) || !el.parentNode || !contains(d.body, el)) {\n      // Note this can fail for shadow dom elements since they\n      // are not a direct descendant of document.body\n      return false;\n    }\n\n    if (el.style.display === 'none') {\n      // We do this check to help with vue-test-utils when using v-show\n\n      /* istanbul ignore next */\n      return false;\n    } // All browsers support getBoundingClientRect(), except JSDOM as it returns all 0's for values :(\n    // So any tests that need isVisible will fail in JSDOM\n    // Except when we override the getBCR prototype in some tests\n\n\n    var bcr = getBCR(el);\n    return !!(bcr && bcr.height > 0 && bcr.width > 0);\n  }; // Determine if an element is disabled\n\n  var isDisabled = function isDisabled(el) {\n    return !isElement(el) || el.disabled || hasAttr(el, 'disabled') || hasClass(el, 'disabled');\n  }; // Cause/wait-for an element to reflow its content (adjusting its height/width)\n\n  var reflow = function reflow(el) {\n    // Requesting an elements offsetHight will trigger a reflow of the element content\n\n    /* istanbul ignore next: reflow doesn't happen in JSDOM */\n    return isElement(el) && el.offsetHeight;\n  }; // Select all elements matching selector. Returns `[]` if none found\n\n  var selectAll = function selectAll(selector, root) {\n    return from((isElement(root) ? root : d).querySelectorAll(selector));\n  }; // Select a single element, returns `null` if not found\n\n  var select = function select(selector, root) {\n    return (isElement(root) ? root : d).querySelector(selector) || null;\n  }; // Determine if an element matches a selector\n\n  var matches = function matches(el, selector) {\n    return isElement(el) ? matchesEl.call(el, selector) : false;\n  }; // Finds closest element matching selector. Returns `null` if not found\n\n  var closest = function closest(selector, root) {\n    var includeRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (!isElement(root)) {\n      return null;\n    }\n\n    var el = closestEl.call(root, selector); // Native closest behaviour when `includeRoot` is truthy,\n    // else emulate jQuery closest and return `null` if match is\n    // the passed in root element when `includeRoot` is falsey\n\n    return includeRoot ? el : el === root ? null : el;\n  }; // Returns true if the parent element contains the child element\n\n  var contains = function contains(parent, child) {\n    return parent && isFunction(parent.contains) ? parent.contains(child) : false;\n  }; // Get an element given an ID\n\n  var getById = function getById(id) {\n    return d.getElementById(/^#/.test(id) ? id.slice(1) : id) || null;\n  }; // Add a class to an element\n\n  var addClass = function addClass(el, className) {\n    // We are checking for `el.classList` existence here since IE 11\n    // returns `undefined` for some elements (e.g. SVG elements)\n    // See https://github.com/bootstrap-vue/bootstrap-vue/issues/2713\n    if (className && isElement(el) && el.classList) {\n      el.classList.add(className);\n    }\n  }; // Remove a class from an element\n\n  var removeClass = function removeClass(el, className) {\n    // We are checking for `el.classList` existence here since IE 11\n    // returns `undefined` for some elements (e.g. SVG elements)\n    // See https://github.com/bootstrap-vue/bootstrap-vue/issues/2713\n    if (className && isElement(el) && el.classList) {\n      el.classList.remove(className);\n    }\n  }; // Test if an element has a class\n\n  var hasClass = function hasClass(el, className) {\n    // We are checking for `el.classList` existence here since IE 11\n    // returns `undefined` for some elements (e.g. SVG elements)\n    // See https://github.com/bootstrap-vue/bootstrap-vue/issues/2713\n    if (className && isElement(el) && el.classList) {\n      return el.classList.contains(className);\n    }\n\n    return false;\n  }; // Set an attribute on an element\n\n  var setAttr = function setAttr(el, attr, val) {\n    if (attr && isElement(el)) {\n      el.setAttribute(attr, val);\n    }\n  }; // Remove an attribute from an element\n\n  var removeAttr = function removeAttr(el, attr) {\n    if (attr && isElement(el)) {\n      el.removeAttribute(attr);\n    }\n  }; // Get an attribute value from an element\n  // Returns `null` if not found\n\n  var getAttr = function getAttr(el, attr) {\n    return attr && isElement(el) ? el.getAttribute(attr) : null;\n  }; // Determine if an attribute exists on an element\n  // Returns `true` or `false`, or `null` if element not found\n\n  var hasAttr = function hasAttr(el, attr) {\n    return attr && isElement(el) ? el.hasAttribute(attr) : null;\n  }; // Return the Bounding Client Rect of an element\n  // Returns `null` if not an element\n\n  /* istanbul ignore next: getBoundingClientRect() doesn't work in JSDOM */\n\n  var getBCR = function getBCR(el) {\n    return isElement(el) ? el.getBoundingClientRect() : null;\n  }; // Get computed style object for an element\n\n  /* istanbul ignore next: getComputedStyle() doesn't work in JSDOM */\n\n  var getCS = function getCS(el) {\n    return hasWindowSupport && isElement(el) ? w$1.getComputedStyle(el) : {};\n  }; // Returns a `Selection` object representing the range of text selected\n  // Returns `null` if no window support is given\n\n  /* istanbul ignore next: getSelection() doesn't work in JSDOM */\n\n  var getSel = function getSel() {\n    return hasWindowSupport && w$1.getSelection ? w$1.getSelection() : null;\n  }; // Return an element's offset with respect to document element\n  // https://j11y.io/jquery/#v=git&fn=jQuery.fn.offset\n\n  var offset = function offset(el)\n  /* istanbul ignore next: getBoundingClientRect(), getClientRects() doesn't work in JSDOM */\n  {\n    var _offset = {\n      top: 0,\n      left: 0\n    };\n\n    if (!isElement(el) || el.getClientRects().length === 0) {\n      return _offset;\n    }\n\n    var bcr = getBCR(el);\n\n    if (bcr) {\n      var win = el.ownerDocument.defaultView;\n      _offset.top = bcr.top + win.pageYOffset;\n      _offset.left = bcr.left + win.pageXOffset;\n    }\n\n    return _offset;\n  }; // Return an element's offset with respect to to its offsetParent\n  // https://j11y.io/jquery/#v=git&fn=jQuery.fn.position\n\n  var position = function position(el)\n  /* istanbul ignore next: getBoundingClientRect() doesn't work in JSDOM */\n  {\n    var _offset = {\n      top: 0,\n      left: 0\n    };\n\n    if (!isElement(el)) {\n      return _offset;\n    }\n\n    var parentOffset = {\n      top: 0,\n      left: 0\n    };\n    var elStyles = getCS(el);\n\n    if (elStyles.position === 'fixed') {\n      _offset = getBCR(el) || _offset;\n    } else {\n      _offset = offset(el);\n      var doc = el.ownerDocument;\n      var offsetParent = el.offsetParent || doc.documentElement;\n\n      while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && getCS(offsetParent).position === 'static') {\n        offsetParent = offsetParent.parentNode;\n      }\n\n      if (offsetParent && offsetParent !== el && offsetParent.nodeType === Node.ELEMENT_NODE) {\n        parentOffset = offset(offsetParent);\n        var offsetParentStyles = getCS(offsetParent);\n        parentOffset.top += parseFloat(offsetParentStyles.borderTopWidth);\n        parentOffset.left += parseFloat(offsetParentStyles.borderLeftWidth);\n      }\n    }\n\n    return {\n      top: _offset.top - parentOffset.top - parseFloat(elStyles.marginTop),\n      left: _offset.left - parentOffset.left - parseFloat(elStyles.marginLeft)\n    };\n  };\n\n  // Number utilities\n  // Converts a value (string, number, etc) to an integer number\n  // Assumes radix base 10\n  // Returns NaN if the value cannot be converted\n  var toInteger = function toInteger(val) {\n    return parseInt(val, 10);\n  }; // Converts a value (string, number, etc) to a number\n  // Returns NaN if the value cannot be converted\n\n  var toFloat = function toFloat(val) {\n    return parseFloat(val);\n  }; // Converts a value (string, number, etc) to a string\n  // representation with 'precision' digits after the decimal\n  // Returns the string 'NaN' if the value cannot be converted\n\n  var toFixed = function toFixed(val, precision) {\n    return toFloat(val).toFixed(toInteger(precision) || 0);\n  };\n\n  var e=function(){return (e=Object.assign||function(e){for(var t,r=1,s=arguments.length;r<s;r++)for(var a in t=arguments[r])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},t={kebab:/-(\\w)/g,styleProp:/:(.*)/,styleList:/;(?![^(]*\\))/g};function r(e,t){return t?t.toUpperCase():\"\"}function s(e){for(var s,a={},c=0,o=e.split(t.styleList);c<o.length;c++){var n=o[c].split(t.styleProp),i=n[0],l=n[1];(i=i.trim())&&(\"string\"==typeof l&&(l=l.trim()),a[(s=i,s.replace(t.kebab,r))]=l);}return a}function a(){for(var t,r,a={},c=arguments.length;c--;)for(var o=0,n=Object.keys(arguments[c]);o<n.length;o++)switch(t=n[o]){case\"class\":case\"style\":case\"directives\":if(Array.isArray(a[t])||(a[t]=[]),\"style\"===t){var i=void 0;i=Array.isArray(arguments[c].style)?arguments[c].style:[arguments[c].style];for(var l=0;l<i.length;l++){var y=i[l];\"string\"==typeof y&&(i[l]=s(y));}arguments[c].style=i;}a[t]=a[t].concat(arguments[c][t]);break;case\"staticClass\":if(!arguments[c][t])break;void 0===a[t]&&(a[t]=\"\"),a[t]&&(a[t]+=\" \"),a[t]+=arguments[c][t].trim();break;case\"on\":case\"nativeOn\":a[t]||(a[t]={});for(var p=0,f=Object.keys(arguments[c][t]||{});p<f.length;p++)r=f[p],a[t][r]?a[t][r]=[].concat(a[t][r],arguments[c][t][r]):a[t][r]=arguments[c][t][r];break;case\"attrs\":case\"props\":case\"domProps\":case\"scopedSlots\":case\"staticStyle\":case\"hook\":case\"transition\":a[t]||(a[t]={}),a[t]=e({},arguments[c][t],a[t]);break;case\"slot\":case\"key\":case\"ref\":case\"tag\":case\"show\":case\"keepAlive\":default:a[t]||(a[t]=arguments[c][t]);}return a}\n\n  var NO_FADE_PROPS = {\n    name: '',\n    enterClass: '',\n    enterActiveClass: '',\n    enterToClass: 'show',\n    leaveClass: 'show',\n    leaveActiveClass: '',\n    leaveToClass: ''\n  };\n\n  var FADE_PROPS = _objectSpread2({}, NO_FADE_PROPS, {\n    enterActiveClass: 'fade',\n    leaveActiveClass: 'fade'\n  }); // @vue/component\n\n\n  var BVTransition =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BVTransition',\n    functional: true,\n    props: {\n      noFade: {\n        // Only applicable to the built in transition\n        // Has no effect if `trans-props` provided\n        type: Boolean,\n        default: false\n      },\n      appear: {\n        // Has no effect if `trans-props` provided\n        type: Boolean,\n        default: false\n      },\n      mode: {\n        // Can be overridden by user supplied trans-props\n        type: String // default: undefined\n\n      },\n      // For user supplied transitions (if needed)\n      transProps: {\n        type: Object,\n        default: null\n      }\n    },\n    render: function render(h, _ref) {\n      var children = _ref.children,\n          data = _ref.data,\n          props = _ref.props;\n      var transProps = props.transProps;\n\n      if (!isPlainObject(transProps)) {\n        transProps = props.noFade ? NO_FADE_PROPS : FADE_PROPS;\n\n        if (props.appear) {\n          // Default the appear classes to equal the enter classes\n          transProps = _objectSpread2({}, transProps, {\n            appear: true,\n            appearClass: transProps.enterClass,\n            appearActiveClass: transProps.enterActiveClass,\n            appearToClass: transProps.enterToClass\n          });\n        }\n      }\n\n      transProps = _objectSpread2({\n        mode: props.mode\n      }, transProps, {\n        // We always need `css` true\n        css: true\n      });\n      return h('transition', // Any transition event listeners will get merged here\n      a(data, {\n        props: transProps\n      }), children);\n    }\n  });\n\n  // In functional components, `slots` is a function so it must be called\n  // first before passing to the below methods. `scopedSlots` is always an\n  // object and may be undefined (for Vue < 2.6.x)\n\n  /**\n   * Returns true if either scoped or unscoped named slot exists\n   *\n   * @param {String, Array} name or name[]\n   * @param {Object} scopedSlots\n   * @param {Object} slots\n   * @returns {Array|undefined} VNodes\n   */\n\n  var hasNormalizedSlot = function hasNormalizedSlot(names) {\n    var $scopedSlots = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var $slots = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    // Ensure names is an array\n    names = concat(names).filter(identity); // Returns true if the either a $scopedSlot or $slot exists with the specified name\n\n    return names.some(function (name) {\n      return $scopedSlots[name] || $slots[name];\n    });\n  };\n  /**\n   * Returns VNodes for named slot either scoped or unscoped\n   *\n   * @param {String, Array} name or name[]\n   * @param {String} scope\n   * @param {Object} scopedSlots\n   * @param {Object} slots\n   * @returns {Array|undefined} VNodes\n   */\n\n\n  var normalizeSlot = function normalizeSlot(names) {\n    var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var $scopedSlots = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var $slots = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    // Ensure names is an array\n    names = concat(names).filter(identity);\n    var slot;\n\n    for (var i = 0; i < names.length && !slot; i++) {\n      var name = names[i];\n      slot = $scopedSlots[name] || $slots[name];\n    } // Note: in Vue 2.6.x, all named slots are also scoped slots\n\n\n    return isFunction(slot) ? slot(scope) : slot;\n  }; // Named exports\n\n  var normalizeSlotMixin = {\n    methods: {\n      hasNormalizedSlot: function hasNormalizedSlot$1(names) {\n        // Returns true if the either a $scopedSlot or $slot exists with the specified name\n        // `names` can be a string name or an array of names\n        return hasNormalizedSlot(names, this.$scopedSlots, this.$slots);\n      },\n      normalizeSlot: function normalizeSlot$1(names) {\n        var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        // Returns an array of rendered VNodes if slot found.\n        // Returns undefined if not found.\n        // `names` can be a string name or an array of names\n        var vNodes = normalizeSlot(names, scope, this.$scopedSlots, this.$slots);\n\n        return vNodes ? concat(vNodes) : vNodes;\n      }\n    }\n  };\n\n  var NAME$1 = 'BButtonClose';\n  var props = {\n    content: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$1, 'content');\n      }\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    ariaLabel: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$1, 'ariaLabel');\n      }\n    },\n    textVariant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$1, 'textVariant');\n      }\n    }\n  }; // @vue/component\n\n  var BButtonClose =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$1,\n    functional: true,\n    props: props,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          slots = _ref.slots,\n          scopedSlots = _ref.scopedSlots;\n      var $slots = slots();\n      var $scopedSlots = scopedSlots || {};\n      var componentData = {\n        staticClass: 'close',\n        class: _defineProperty({}, \"text-\".concat(props.textVariant), props.textVariant),\n        attrs: {\n          type: 'button',\n          disabled: props.disabled,\n          'aria-label': props.ariaLabel ? String(props.ariaLabel) : null\n        },\n        on: {\n          click: function click(evt) {\n            // Ensure click on button HTML content is also disabled\n\n            /* istanbul ignore if: bug in JSDOM still emits click on inner element */\n            if (props.disabled && isEvent(evt)) {\n              evt.stopPropagation();\n              evt.preventDefault();\n            }\n          }\n        }\n      }; // Careful not to override the default slot with innerHTML\n\n      if (!hasNormalizedSlot('default', $scopedSlots, $slots)) {\n        componentData.domProps = {\n          innerHTML: props.content\n        };\n      }\n\n      return h('button', a(data, componentData), normalizeSlot('default', {}, $scopedSlots, $slots));\n    }\n  });\n\n  var NAME$2 = 'BAlert'; // Convert `show` value to a number\n\n  var parseCountDown = function parseCountDown(show) {\n    if (show === '' || isBoolean(show)) {\n      return 0;\n    }\n\n    show = toInteger(show);\n    return show > 0 ? show : 0;\n  }; // Convert `show` value to a boolean\n\n\n  var parseShow = function parseShow(show) {\n    if (show === '' || show === true) {\n      return true;\n    }\n\n    if (toInteger(show) < 1) {\n      // Boolean will always return false for the above comparison\n      return false;\n    }\n\n    return !!show;\n  }; // Is a value number like (i.e. a number or a number as string)\n\n\n  var isNumericLike = function isNumericLike(value) {\n    return !isNaN(toInteger(value));\n  }; // @vue/component\n\n\n  var BAlert =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$2,\n    mixins: [normalizeSlotMixin],\n    model: {\n      prop: 'show',\n      event: 'input'\n    },\n    props: {\n      variant: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$2, 'variant');\n        }\n      },\n      dismissible: {\n        type: Boolean,\n        default: false\n      },\n      dismissLabel: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$2, 'dismissLabel');\n        }\n      },\n      show: {\n        type: [Boolean, Number, String],\n        default: false\n      },\n      fade: {\n        type: Boolean,\n        default: false\n      }\n    },\n    data: function data() {\n      return {\n        countDownTimerId: null,\n        countDown: 0,\n        // If initially shown, we need to set these for SSR\n        localShow: parseShow(this.show)\n      };\n    },\n    watch: {\n      show: function show(newVal) {\n        this.countDown = parseCountDown(newVal);\n        this.localShow = parseShow(newVal);\n      },\n      countDown: function countDown(newVal) {\n        var _this = this;\n\n        this.clearTimer();\n\n        if (isNumericLike(this.show)) {\n          // Ignore if this.show transitions to a boolean value.\n          this.$emit('dismiss-count-down', newVal);\n\n          if (this.show !== newVal) {\n            // Update the v-model if needed\n            this.$emit('input', newVal);\n          }\n\n          if (newVal > 0) {\n            this.localShow = true;\n            this.countDownTimerId = setTimeout(function () {\n              _this.countDown--;\n            }, 1000);\n          } else {\n            // Slightly delay the hide to allow any UI updates\n            this.$nextTick(function () {\n              requestAF(function () {\n                _this.localShow = false;\n              });\n            });\n          }\n        }\n      },\n      localShow: function localShow(newVal) {\n        if (!newVal && (this.dismissible || isNumericLike(this.show))) {\n          // Only emit dismissed events for dismissible or auto dismissing alerts\n          this.$emit('dismissed');\n        }\n\n        if (!isNumericLike(this.show) && this.show !== newVal) {\n          // Only emit booleans if we weren't passed a number via `this.show`\n          this.$emit('input', newVal);\n        }\n      }\n    },\n    created: function created() {\n      this.countDown = parseCountDown(this.show);\n      this.localShow = parseShow(this.show);\n    },\n    mounted: function mounted() {\n      this.countDown = parseCountDown(this.show);\n      this.localShow = parseShow(this.show);\n    },\n    beforeDestroy: function beforeDestroy() {\n      this.clearTimer();\n    },\n    methods: {\n      dismiss: function dismiss() {\n        this.clearTimer();\n        this.countDown = 0;\n        this.localShow = false;\n      },\n      clearTimer: function clearTimer() {\n        if (this.countDownTimerId) {\n          clearInterval(this.countDownTimerId);\n          this.countDownTimerId = null;\n        }\n      }\n    },\n    render: function render(h) {\n      var $alert; // undefined\n\n      if (this.localShow) {\n        var $dismissBtn = h();\n\n        if (this.dismissible) {\n          // Add dismiss button\n          $dismissBtn = h(BButtonClose, {\n            attrs: {\n              'aria-label': this.dismissLabel\n            },\n            on: {\n              click: this.dismiss\n            }\n          }, [this.normalizeSlot('dismiss')]);\n        }\n\n        $alert = h('div', {\n          key: this._uid,\n          staticClass: 'alert',\n          class: _defineProperty({\n            'alert-dismissible': this.dismissible\n          }, \"alert-\".concat(this.variant), this.variant),\n          attrs: {\n            role: 'alert',\n            'aria-live': 'polite',\n            'aria-atomic': true\n          }\n        }, [$dismissBtn, this.normalizeSlot('default')]);\n        $alert = [$alert];\n      }\n\n      return h(BVTransition, {\n        props: {\n          noFade: !this.fade\n        }\n      }, $alert);\n    }\n  });\n\n  var AlertPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BAlert: BAlert\n    }\n  });\n\n  /**\n   * Given an array of properties or an object of property keys,\n   * plucks all the values off the target object, returning a new object\n   * that has props that reference the original prop values\n   *\n   * @param {{}|string[]} keysToPluck\n   * @param {{}} objToPluck\n   * @param {Function} transformFn\n   * @return {{}}\n   */\n\n  var pluckProps = function pluckProps(keysToPluck, objToPluck) {\n    var transformFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : identity;\n    return (isArray(keysToPluck) ? keysToPluck.slice() : keys(keysToPluck)).reduce(function (memo, prop) {\n      memo[transformFn(prop)] = objToPluck[prop];\n      return memo;\n    }, {});\n  };\n\n  // String utilities\n\n  var RX_TRIM_LEFT = /^\\s+/;\n  var RX_REGEXP_REPLACE = /[-/\\\\^$*+?.()|[\\]{}]/g;\n  var RX_UN_KEBAB = /-(\\w)/g;\n  var RX_HYPHENATE = /\\B([A-Z])/g; // --- Utilities ---\n  // Converts PascalCase or camelCase to kebab-case\n\n  var kebabCase = function kebabCase(str) {\n    return str.replace(RX_HYPHENATE, '-$1').toLowerCase();\n  }; // Converts a kebab-case or camelCase string to PascalCase\n\n  var pascalCase = function pascalCase(str) {\n    str = kebabCase(str).replace(RX_UN_KEBAB, function (_, c) {\n      return c ? c.toUpperCase() : '';\n    });\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }; // Lowercases the first letter of a string and returns a new string\n\n  var lowerFirst = function lowerFirst(str) {\n    str = isString(str) ? str.trim() : String(str);\n    return str.charAt(0).toLowerCase() + str.slice(1);\n  }; // Uppercases the first letter of a string and returns a new string\n\n  var upperFirst = function upperFirst(str) {\n    str = isString(str) ? str.trim() : String(str);\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }; // Escape characters to be used in building a regular expression\n\n  var escapeRegExp = function escapeRegExp(str) {\n    return str.replace(RX_REGEXP_REPLACE, '\\\\$&');\n  }; // Convert a value to a string that can be rendered\n  // `undefined`/`null` will be converted to `''`\n  // Plain objects and arrays will be JSON stringified\n\n  var toString$1 = function toString(val) {\n    var spaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    return isUndefinedOrNull(val) ? '' : isArray(val) || isPlainObject(val) && val.toString === Object.prototype.toString ? JSON.stringify(val, null, spaces) : String(val);\n  }; // Remove leading white space from a string\n\n  var trimLeft = function trimLeft(str) {\n    return toString$1(str).replace(RX_TRIM_LEFT, '');\n  }; // Remove Trailing white space from a string\n\n  var trim = function trim(str) {\n    return toString$1(str).trim();\n  }; // Lower case a string\n\n  var lowerCase = function lowerCase(str) {\n    return toString$1(str).toLowerCase();\n  }; // Upper case a string\n\n  var ANCHOR_TAG = 'a'; // Precompile RegExp\n\n  var commaRE = /%2C/g;\n  var encodeReserveRE = /[!'()*]/g;\n  var plusRE = /\\+/g;\n  var queryStartRE = /^(\\?|#|&)/; // Method to replace reserved chars\n\n  var encodeReserveReplacer = function encodeReserveReplacer(c) {\n    return '%' + c.charCodeAt(0).toString(16);\n  }; // Fixed encodeURIComponent which is more conformant to RFC3986:\n  // - escapes [!'()*]\n  // - preserve commas\n\n\n  var encode = function encode(str) {\n    return encodeURIComponent(toString$1(str)).replace(encodeReserveRE, encodeReserveReplacer).replace(commaRE, ',');\n  };\n\n  var decode = decodeURIComponent; // Stringifies an object of query parameters\n  // See: https://github.com/vuejs/vue-router/blob/dev/src/util/query.js\n\n  var stringifyQueryObj = function stringifyQueryObj(obj) {\n    if (!isPlainObject(obj)) {\n      return '';\n    }\n\n    var query = keys(obj).map(function (key) {\n      var val = obj[key];\n\n      if (isUndefined(val)) {\n        return '';\n      } else if (isNull(val)) {\n        return encode(key);\n      } else if (isArray(val)) {\n        return val.reduce(function (results, val2) {\n          if (isNull(val2)) {\n            results.push(encode(key));\n          } else if (!isUndefined(val2)) {\n            // Faster than string interpolation\n            results.push(encode(key) + '=' + encode(val2));\n          }\n\n          return results;\n        }, []).join('&');\n      } // Faster than string interpolation\n\n\n      return encode(key) + '=' + encode(val);\n    })\n    /* must check for length, as we only want to filter empty strings, not things that look falsey! */\n    .filter(function (x) {\n      return x.length > 0;\n    }).join('&');\n    return query ? \"?\".concat(query) : '';\n  };\n  var parseQuery = function parseQuery(query) {\n    var parsed = {};\n    query = toString$1(query).trim().replace(queryStartRE, '');\n\n    if (!query) {\n      return parsed;\n    }\n\n    query.split('&').forEach(function (param) {\n      var parts = param.replace(plusRE, ' ').split('=');\n      var key = decode(parts.shift());\n      var val = parts.length > 0 ? decode(parts.join('=')) : null;\n\n      if (isUndefined(parsed[key])) {\n        parsed[key] = val;\n      } else if (isArray(parsed[key])) {\n        parsed[key].push(val);\n      } else {\n        parsed[key] = [parsed[key], val];\n      }\n    });\n    return parsed;\n  };\n  var isRouterLink = function isRouterLink(tag) {\n    return toString$1(tag).toLowerCase() !== ANCHOR_TAG;\n  };\n  var computeTag = function computeTag() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        to = _ref.to,\n        disabled = _ref.disabled;\n\n    var thisOrParent = arguments.length > 1 ? arguments[1] : undefined;\n    return thisOrParent.$router && to && !disabled ? thisOrParent.$nuxt ? 'nuxt-link' : 'router-link' : ANCHOR_TAG;\n  };\n  var computeRel = function computeRel() {\n    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        target = _ref2.target,\n        rel = _ref2.rel;\n\n    if (target === '_blank' && isNull(rel)) {\n      return 'noopener';\n    }\n\n    return rel || null;\n  };\n  var computeHref = function computeHref() {\n    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        href = _ref3.href,\n        to = _ref3.to;\n\n    var tag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ANCHOR_TAG;\n    var fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '#';\n    var toFallback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '/';\n\n    // We've already checked the $router in computeTag(), so isRouterLink() indicates a live router.\n    // When deferring to Vue Router's router-link, don't use the href attribute at all.\n    // We return null, and then remove href from the attributes passed to router-link\n    if (isRouterLink(tag)) {\n      return null;\n    } // Return `href` when explicitly provided\n\n\n    if (href) {\n      return href;\n    } // Reconstruct `href` when `to` used, but no router\n\n\n    if (to) {\n      // Fallback to `to` prop (if `to` is a string)\n      if (isString(to)) {\n        return to || toFallback;\n      } // Fallback to `to.path + to.query + to.hash` prop (if `to` is an object)\n\n\n      if (isPlainObject(to) && (to.path || to.query || to.hash)) {\n        var path = toString$1(to.path);\n        var query = stringifyQueryObj(to.query);\n        var hash = toString$1(to.hash);\n        hash = !hash || hash.charAt(0) === '#' ? hash : \"#\".concat(hash);\n        return \"\".concat(path).concat(query).concat(hash) || toFallback;\n      }\n    } // If nothing is provided return the fallback\n\n\n    return fallback;\n  };\n\n  /**\n   * The Link component is used in many other BV components.\n   * As such, sharing its props makes supporting all its features easier.\n   * However, some components need to modify the defaults for their own purpose.\n   * Prefer sharing a fresh copy of the props to ensure mutations\n   * do not affect other component references to the props.\n   *\n   * https://github.com/vuejs/vue-router/blob/dev/src/components/link.js\n   * @return {{}}\n   */\n\n  var propsFactory = function propsFactory() {\n    return {\n      href: {\n        type: String,\n        default: null\n      },\n      rel: {\n        type: String,\n        default: null\n      },\n      target: {\n        type: String,\n        default: '_self'\n      },\n      active: {\n        type: Boolean,\n        default: false\n      },\n      disabled: {\n        type: Boolean,\n        default: false\n      },\n      // router-link specific props\n      to: {\n        type: [String, Object],\n        default: null\n      },\n      append: {\n        type: Boolean,\n        default: false\n      },\n      replace: {\n        type: Boolean,\n        default: false\n      },\n      event: {\n        type: [String, Array],\n        default: 'click'\n      },\n      activeClass: {\n        type: String // default: undefined\n\n      },\n      exact: {\n        type: Boolean,\n        default: false\n      },\n      exactActiveClass: {\n        type: String // default: undefined\n\n      },\n      routerTag: {\n        type: String,\n        default: 'a'\n      },\n      // nuxt-link specific prop(s)\n      noPrefetch: {\n        type: Boolean,\n        default: false\n      }\n    };\n  };\n\n  var BLink =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BLink',\n    mixins: [normalizeSlotMixin],\n    inheritAttrs: false,\n    props: propsFactory(),\n    computed: {\n      computedTag: function computedTag() {\n        // We don't pass `this` as the first arg as we need reactivity of the props\n        return computeTag({\n          to: this.to,\n          disabled: this.disabled\n        }, this);\n      },\n      isRouterLink: function isRouterLink$1() {\n        return isRouterLink(this.computedTag);\n      },\n      computedRel: function computedRel() {\n        // We don't pass `this` as the first arg as we need reactivity of the props\n        return computeRel({\n          target: this.target,\n          rel: this.rel\n        });\n      },\n      computedHref: function computedHref() {\n        // We don't pass `this` as the first arg as we need reactivity of the props\n        return computeHref({\n          to: this.to,\n          href: this.href\n        }, this.computedTag);\n      },\n      computedProps: function computedProps() {\n        return this.isRouterLink ? _objectSpread2({}, this.$props, {\n          tag: this.routerTag\n        }) : {};\n      }\n    },\n    methods: {\n      onClick: function onClick(evt) {\n        var _arguments = arguments;\n        var evtIsEvent = isEvent(evt);\n        var isRouterLink = this.isRouterLink;\n        var suppliedHandler = this.$listeners.click;\n\n        if (evtIsEvent && this.disabled) {\n          // Stop event from bubbling up\n          evt.stopPropagation(); // Kill the event loop attached to this specific `EventTarget`\n          // Needed to prevent `vue-router` for doing its thing\n\n          evt.stopImmediatePropagation();\n        } else {\n          /* istanbul ignore next: difficult to test, but we know it works */\n          if (isRouterLink && evt.currentTarget.__vue__) {\n            // Router links do not emit instance `click` events, so we\n            // add in an `$emit('click', evt)` on its Vue instance\n            evt.currentTarget.__vue__.$emit('click', evt);\n          } // Call the suppliedHandler(s), if any provided\n\n\n          concat(suppliedHandler).filter(function (h) {\n            return isFunction(h);\n          }).forEach(function (handler) {\n            handler.apply(void 0, _toConsumableArray(_arguments));\n          }); // Emit the global `$root` click event\n\n          this.$root.$emit('clicked::link', evt);\n        } // Stop scroll-to-top behavior or navigation on\n        // regular links when href is just '#'\n\n\n        if (evtIsEvent && (this.disabled || !isRouterLink && this.computedHref === '#')) {\n          evt.preventDefault();\n        }\n      },\n      focus: function focus() {\n        if (this.$el && this.$el.focus) {\n          this.$el.focus();\n        }\n      },\n      blur: function blur() {\n        if (this.$el && this.$el.blur) {\n          this.$el.blur();\n        }\n      }\n    },\n    render: function render(h) {\n      var tag = this.computedTag;\n      var rel = this.computedRel;\n      var href = this.computedHref;\n      var isRouterLink = this.isRouterLink;\n      var componentData = {\n        class: {\n          active: this.active,\n          disabled: this.disabled\n        },\n        attrs: _objectSpread2({}, this.$attrs, {\n          rel: rel,\n          target: this.target,\n          tabindex: this.disabled ? '-1' : isUndefined(this.$attrs.tabindex) ? null : this.$attrs.tabindex,\n          'aria-disabled': this.disabled ? 'true' : null\n        }),\n        props: this.computedProps\n      }; // Add the event handlers. We must use `nativeOn` for\n      // `<router-link>`/`<nuxt-link>` instead of `on`\n\n      componentData[isRouterLink ? 'nativeOn' : 'on'] = _objectSpread2({}, this.$listeners, {\n        // We want to overwrite any click handler since our callback\n        // will invoke the user supplied handler(s) if `!this.disabled`\n        click: this.onClick\n      }); // If href attribute exists on <router-link> (even undefined or null) it fails working on\n      // SSR, so we explicitly add it here if needed (i.e. if computedHref() is truthy)\n\n      if (href) {\n        componentData.attrs.href = href;\n      } else {\n        // Ensure the prop HREF does not exist for router links\n        delete componentData.props.href;\n      }\n\n      return h(tag, componentData, this.normalizeSlot('default'));\n    }\n  });\n\n  var NAME$3 = 'BBadge';\n  var linkProps = propsFactory();\n  delete linkProps.href.default;\n  delete linkProps.to.default;\n  var props$1 = _objectSpread2({}, linkProps, {\n    tag: {\n      type: String,\n      default: 'span'\n    },\n    variant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$3, 'variant');\n      }\n    },\n    pill: {\n      type: Boolean,\n      default: false\n    }\n  }); // @vue/component\n\n  var BBadge =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$3,\n    functional: true,\n    props: props$1,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      var isBLink = props.href || props.to;\n      var tag = isBLink ? BLink : props.tag;\n      var componentData = {\n        staticClass: 'badge',\n        class: [props.variant ? \"badge-\".concat(props.variant) : 'badge-secondary', {\n          'badge-pill': props.pill,\n          active: props.active,\n          disabled: props.disabled\n        }],\n        props: isBLink ? pluckProps(linkProps, props) : {}\n      };\n      return h(tag, a(data, componentData), children);\n    }\n  });\n\n  var BadgePlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BBadge: BBadge\n    }\n  });\n\n  var stripTagsRegex = /(<([^>]+)>)/gi; // Removes any thing that looks like an HTML tag from the supplied string\n\n  var stripTags = function stripTags() {\n    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return String(text).replace(stripTagsRegex, '');\n  }; // Generate a domProps object for either innerHTML, textContent or nothing\n\n  var htmlOrText = function htmlOrText(innerHTML, textContent) {\n    return innerHTML ? {\n      innerHTML: innerHTML\n    } : textContent ? {\n      textContent: textContent\n    } : {};\n  };\n\n  var props$2 = _objectSpread2({}, propsFactory(), {\n    text: {\n      type: String,\n      default: null\n    },\n    html: {\n      type: String,\n      default: null\n    },\n    ariaCurrent: {\n      type: String,\n      default: 'location'\n    }\n  }); // @vue/component\n\n  var BBreadcrumbLink =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BBreadcrumbLink',\n    functional: true,\n    props: props$2,\n    render: function render(h, _ref) {\n      var suppliedProps = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      var tag = suppliedProps.active ? 'span' : BLink;\n      var componentData = {\n        props: pluckProps(props$2, suppliedProps)\n      };\n\n      if (suppliedProps.active) {\n        componentData.attrs = {\n          'aria-current': suppliedProps.ariaCurrent\n        };\n      }\n\n      if (!children) {\n        componentData.domProps = htmlOrText(suppliedProps.html, suppliedProps.text);\n      }\n\n      return h(tag, a(data, componentData), children);\n    }\n  });\n\n  var BBreadcrumbItem =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BBreadcrumbItem',\n    functional: true,\n    props: props$2,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      return h('li', a(data, {\n        staticClass: 'breadcrumb-item',\n        class: {\n          active: props.active\n        }\n      }), [h(BBreadcrumbLink, {\n        props: props\n      }, children)]);\n    }\n  });\n\n  var props$3 = {\n    items: {\n      type: Array,\n      default: null\n    }\n  }; // @vue/component\n\n  var BBreadcrumb =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BBreadcrumb',\n    functional: true,\n    props: props$3,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      var childNodes = children; // Build child nodes from items if given.\n\n      if (isArray(props.items)) {\n        var activeDefined = false;\n        childNodes = props.items.map(function (item, idx) {\n          if (!isObject(item)) {\n            item = {\n              text: toString$1(item)\n            };\n          } // Copy the value here so we can normalize it.\n\n\n          var active = item.active;\n\n          if (active) {\n            activeDefined = true;\n          }\n\n          if (!active && !activeDefined) {\n            // Auto-detect active by position in list.\n            active = idx + 1 === props.items.length;\n          }\n\n          return h(BBreadcrumbItem, {\n            props: _objectSpread2({}, item, {\n              active: active\n            })\n          });\n        });\n      }\n\n      return h('ol', a(data, {\n        staticClass: 'breadcrumb'\n      }), childNodes);\n    }\n  });\n\n  var BreadcrumbPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BBreadcrumb: BBreadcrumb,\n      BBreadcrumbItem: BBreadcrumbItem,\n      BBreadcrumbLink: BBreadcrumbLink\n    }\n  });\n\n  /*\n   * Key Codes (events)\n   */\n  var KEY_CODES = freeze({\n    SPACE: 32,\n    ENTER: 13,\n    ESC: 27,\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40,\n    PAGEUP: 33,\n    PAGEDOWN: 34,\n    HOME: 36,\n    END: 35,\n    TAB: 9,\n    SHIFT: 16,\n    CTRL: 17,\n    BACKSPACE: 8,\n    ALT: 18,\n    PAUSE: 19,\n    BREAK: 19,\n    INSERT: 45,\n    INS: 45,\n    DELETE: 46\n  });\n\n  var NAME$4 = 'BButton';\n  var btnProps = {\n    block: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    size: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$4, 'size');\n      }\n    },\n    variant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$4, 'variant');\n      }\n    },\n    type: {\n      type: String,\n      default: 'button'\n    },\n    tag: {\n      type: String,\n      default: 'button'\n    },\n    pill: {\n      type: Boolean,\n      default: false\n    },\n    squared: {\n      type: Boolean,\n      default: false\n    },\n    pressed: {\n      // Tri-state: `true`, `false` or `null`\n      // => On, off, not a toggle\n      type: Boolean,\n      default: null\n    }\n  };\n  var linkProps$1 = propsFactory();\n  delete linkProps$1.href.default;\n  delete linkProps$1.to.default;\n  var linkPropKeys = keys(linkProps$1);\n  var props$4 = _objectSpread2({}, linkProps$1, {}, btnProps); // --- Helper methods ---\n  // Returns `true` if a tag's name equals `name`\n\n  var tagIs = function tagIs(tag, name) {\n    return toString$1(tag).toLowerCase() === toString$1(name).toLowerCase();\n  }; // Focus handler for toggle buttons\n  // Needs class of 'focus' when focused\n\n\n  var handleFocus = function handleFocus(evt) {\n    if (evt.type === 'focusin') {\n      addClass(evt.target, 'focus');\n    } else if (evt.type === 'focusout') {\n      removeClass(evt.target, 'focus');\n    }\n  }; // Is the requested button a link?\n  // If tag prop is set to `a`, we use a <b-link> to get proper disabled handling\n\n\n  var isLink = function isLink(props) {\n    return props.href || props.to || tagIs(props.tag, 'a');\n  }; // Is the button to be a toggle button?\n\n\n  var isToggle = function isToggle(props) {\n    return isBoolean(props.pressed);\n  }; // Is the button \"really\" a button?\n\n\n  var isButton = function isButton(props) {\n    return !(isLink(props) || props.tag && !tagIs(props.tag, 'button'));\n  }; // Is the requested tag not a button or link?\n\n\n  var isNonStandardTag = function isNonStandardTag(props) {\n    return !isLink(props) && !isButton(props);\n  }; // Compute required classes (non static classes)\n\n\n  var computeClass = function computeClass(props) {\n    var _ref;\n\n    return [\"btn-\".concat(props.variant || getComponentConfig(NAME$4, 'variant')), (_ref = {}, _defineProperty(_ref, \"btn-\".concat(props.size), props.size), _defineProperty(_ref, 'btn-block', props.block), _defineProperty(_ref, 'rounded-pill', props.pill), _defineProperty(_ref, 'rounded-0', props.squared && !props.pill), _defineProperty(_ref, \"disabled\", props.disabled), _defineProperty(_ref, \"active\", props.pressed), _ref)];\n  }; // Compute the link props to pass to b-link (if required)\n\n\n  var computeLinkProps = function computeLinkProps(props) {\n    return isLink(props) ? pluckProps(linkPropKeys, props) : null;\n  }; // Compute the attributes for a button\n\n\n  var computeAttrs = function computeAttrs(props, data) {\n    var button = isButton(props);\n    var link = isLink(props);\n    var toggle = isToggle(props);\n    var nonStandardTag = isNonStandardTag(props);\n    var hashLink = link && props.href === '#';\n    var role = data.attrs && data.attrs.role ? data.attrs.role : null;\n    var tabindex = data.attrs ? data.attrs.tabindex : null;\n\n    if (nonStandardTag || hashLink) {\n      tabindex = '0';\n    }\n\n    return {\n      // Type only used for \"real\" buttons\n      type: button && !link ? props.type : null,\n      // Disabled only set on \"real\" buttons\n      disabled: button ? props.disabled : null,\n      // We add a role of button when the tag is not a link or button for ARIA\n      // Don't bork any role provided in `data.attrs` when `isLink` or `isButton`\n      // Except when link has `href` of `#`\n      role: nonStandardTag || hashLink ? 'button' : role,\n      // We set the `aria-disabled` state for non-standard tags\n      'aria-disabled': nonStandardTag ? String(props.disabled) : null,\n      // For toggles, we need to set the pressed state for ARIA\n      'aria-pressed': toggle ? String(props.pressed) : null,\n      // `autocomplete=\"off\"` is needed in toggle mode to prevent some browsers\n      // from remembering the previous setting when using the back button\n      autocomplete: toggle ? 'off' : null,\n      // `tabindex` is used when the component is not a button\n      // Links are tabbable, but don't allow disabled, while non buttons or links\n      // are not tabbable, so we mimic that functionality by disabling tabbing\n      // when disabled, and adding a `tabindex=\"0\"` to non buttons or non links\n      tabindex: props.disabled && !button ? '-1' : tabindex\n    };\n  }; // @vue/component\n\n\n  var BButton =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$4,\n    functional: true,\n    props: props$4,\n    render: function render(h, _ref2) {\n      var props = _ref2.props,\n          data = _ref2.data,\n          listeners = _ref2.listeners,\n          children = _ref2.children;\n      var toggle = isToggle(props);\n      var link = isLink(props);\n      var nonStandardTag = isNonStandardTag(props);\n      var hashLink = link && props.href === '#';\n      var on = {\n        keydown: function keydown(evt) {\n          // When the link is a `href=\"#\"` or a non-standard tag (has `role=\"button\"`),\n          // we add a keydown handlers for SPACE/ENTER\n\n          /* istanbul ignore next */\n          if (props.disabled || !(nonStandardTag || hashLink)) {\n            return;\n          }\n\n          var keyCode = evt.keyCode; // Add SPACE handler for `href=\"#\"` and ENTER handler for non-standard tags\n\n          if (keyCode === KEY_CODES.SPACE || keyCode === KEY_CODES.ENTER && nonStandardTag) {\n            var target = evt.currentTarget || evt.target;\n            evt.preventDefault();\n            target.click();\n          }\n        },\n        click: function click(evt) {\n          /* istanbul ignore if: blink/button disabled should handle this */\n          if (props.disabled && isEvent(evt)) {\n            evt.stopPropagation();\n            evt.preventDefault();\n          } else if (toggle && listeners && listeners['update:pressed']) {\n            // Send `.sync` updates to any \"pressed\" prop (if `.sync` listeners)\n            // `concat()` will normalize the value to an array without\n            // double wrapping an array value in an array\n            concat(listeners['update:pressed']).forEach(function (fn) {\n              if (isFunction(fn)) {\n                fn(!props.pressed);\n              }\n            });\n          }\n        }\n      };\n\n      if (toggle) {\n        on.focusin = handleFocus;\n        on.focusout = handleFocus;\n      }\n\n      var componentData = {\n        staticClass: 'btn',\n        class: computeClass(props),\n        props: computeLinkProps(props),\n        attrs: computeAttrs(props, data),\n        on: on\n      };\n      return h(link ? BLink : props.tag, a(data, componentData), children);\n    }\n  });\n\n  var ButtonPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BButton: BButton,\n      BBtn: BButton,\n      BButtonClose: BButtonClose,\n      BBtnClose: BButtonClose\n    }\n  });\n\n  var NAME$5 = 'BButtonGroup';\n  var props$5 = {\n    vertical: {\n      type: Boolean,\n      default: false\n    },\n    size: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig('BButton', 'size');\n      }\n    },\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    ariaRole: {\n      type: String,\n      default: 'group'\n    }\n  }; // @vue/component\n\n  var BButtonGroup =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$5,\n    functional: true,\n    props: props$5,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      return h(props.tag, a(data, {\n        class: _defineProperty({\n          'btn-group': !props.vertical,\n          'btn-group-vertical': props.vertical\n        }, \"btn-group-\".concat(props.size), props.size),\n        attrs: {\n          role: props.ariaRole\n        }\n      }), children);\n    }\n  });\n\n  var ButtonGroupPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BButtonGroup: BButtonGroup,\n      BBtnGroup: BButtonGroup\n    }\n  });\n\n  var ITEM_SELECTOR = ['.btn:not(.disabled):not([disabled]):not(.dropdown-item)', '.form-control:not(.disabled):not([disabled])', 'select:not(.disabled):not([disabled])', 'input[type=\"checkbox\"]:not(.disabled)', 'input[type=\"radio\"]:not(.disabled)'].join(','); // @vue/component\n\n  var BButtonToolbar =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BButtonToolbar',\n    mixins: [normalizeSlotMixin],\n    props: {\n      justify: {\n        type: Boolean,\n        default: false\n      },\n      keyNav: {\n        type: Boolean,\n        default: false\n      }\n    },\n    mounted: function mounted() {\n      if (this.keyNav) {\n        // Pre-set the tabindexes if the markup does not include tabindex=\"-1\" on the toolbar items\n        this.getItems();\n      }\n    },\n    methods: {\n      onFocusin: function onFocusin(evt) {\n        if (evt.target === this.$el) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          this.focusFirst(evt);\n        }\n      },\n      stop: function stop(evt) {\n        evt.preventDefault();\n        evt.stopPropagation();\n      },\n      onKeydown: function onKeydown(evt) {\n        if (!this.keyNav) {\n          /* istanbul ignore next: should never happen */\n          return;\n        }\n\n        var key = evt.keyCode;\n        var shift = evt.shiftKey;\n\n        if (key === KEY_CODES.UP || key === KEY_CODES.LEFT) {\n          this.stop(evt);\n          shift ? this.focusFirst(evt) : this.focusPrev(evt);\n        } else if (key === KEY_CODES.DOWN || key === KEY_CODES.RIGHT) {\n          this.stop(evt);\n          shift ? this.focusLast(evt) : this.focusNext(evt);\n        }\n      },\n      setItemFocus: function setItemFocus(item) {\n        item && item.focus && item.focus();\n      },\n      focusFirst: function focusFirst() {\n        var items = this.getItems();\n        this.setItemFocus(items[0]);\n      },\n      focusPrev: function focusPrev(evt) {\n        var items = this.getItems();\n        var index = items.indexOf(evt.target);\n\n        if (index > -1) {\n          items = items.slice(0, index).reverse();\n          this.setItemFocus(items[0]);\n        }\n      },\n      focusNext: function focusNext(evt) {\n        var items = this.getItems();\n        var index = items.indexOf(evt.target);\n\n        if (index > -1) {\n          items = items.slice(index + 1);\n          this.setItemFocus(items[0]);\n        }\n      },\n      focusLast: function focusLast() {\n        var items = this.getItems().reverse();\n        this.setItemFocus(items[0]);\n      },\n      getItems: function getItems() {\n        var items = selectAll(ITEM_SELECTOR, this.$el);\n        items.forEach(function (item) {\n          // Ensure tabfocus is -1 on any new elements\n          item.tabIndex = -1;\n        });\n        return items.filter(function (el) {\n          return isVisible(el);\n        });\n      }\n    },\n    render: function render(h) {\n      return h('div', {\n        staticClass: 'btn-toolbar',\n        class: {\n          'justify-content-between': this.justify\n        },\n        attrs: {\n          role: 'toolbar',\n          tabindex: this.keyNav ? '0' : null\n        },\n        on: this.keyNav ? {\n          focusin: this.onFocusin,\n          keydown: this.onKeydown\n        } : {}\n      }, [this.normalizeSlot('default')]);\n    }\n  });\n\n  var ButtonToolbarPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BButtonToolbar: BButtonToolbar,\n      BBtnToolbar: BButtonToolbar\n    }\n  });\n\n  // Handles when arrays are \"sparse\" (array.every(...) doesn't handle sparse)\n\n  var compareArrays = function compareArrays(a, b) {\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    var equal = true;\n\n    for (var i = 0; equal && i < a.length; i++) {\n      equal = looseEqual(a[i], b[i]);\n    }\n\n    return equal;\n  };\n  /**\n   * Check if two values are loosely equal - that is,\n   * if they are plain objects, do they have the same shape?\n   * Returns boolean true or false\n   */\n\n\n  var looseEqual = function looseEqual(a, b) {\n    if (a === b) {\n      return true;\n    }\n\n    var aValidType = isDate(a);\n    var bValidType = isDate(b);\n\n    if (aValidType || bValidType) {\n      return aValidType && bValidType ? a.getTime() === b.getTime() : false;\n    }\n\n    aValidType = isArray(a);\n    bValidType = isArray(b);\n\n    if (aValidType || bValidType) {\n      return aValidType && bValidType ? compareArrays(a, b) : false;\n    }\n\n    aValidType = isObject(a);\n    bValidType = isObject(b);\n\n    if (aValidType || bValidType) {\n      /* istanbul ignore if: this if will probably never be called */\n      if (!aValidType || !bValidType) {\n        return false;\n      }\n\n      var aKeysCount = keys(a).length;\n      var bKeysCount = keys(b).length;\n\n      if (aKeysCount !== bKeysCount) {\n        return false;\n      }\n\n      for (var key in a) {\n        // eslint-disable-next-line no-prototype-builtins\n        var aHasKey = a.hasOwnProperty(key); // eslint-disable-next-line no-prototype-builtins\n\n        var bHasKey = b.hasOwnProperty(key);\n\n        if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {\n          return false;\n        }\n      }\n    }\n\n    return String(a) === String(b);\n  };\n\n  var RX_DATE = /^\\d+-\\d+-\\d+$/; // --- Date utility methods ---\n  // Create or clone a date (`new Date(...)` shortcut)\n\n  var createDate = function createDate() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _construct(Date, args);\n  }; // Parse a date sting, or Date object, into a Date object (with no time information)\n\n  var parseYMD = function parseYMD(date) {\n    if (isString(date) && RX_DATE.test(date.trim())) {\n      var _date$split$map = date.split('-').map(toInteger),\n          _date$split$map2 = _slicedToArray(_date$split$map, 3),\n          year = _date$split$map2[0],\n          month = _date$split$map2[1],\n          day = _date$split$map2[2];\n\n      return createDate(year, month - 1, day);\n    } else if (isDate(date)) {\n      return createDate(date.getFullYear(), date.getMonth(), date.getDate());\n    }\n\n    return null;\n  }; // Format a date object as `YYYY-MM-DD` format\n\n  var formatYMD = function formatYMD(date) {\n    date = parseYMD(date);\n\n    if (!date) {\n      return null;\n    }\n\n    var year = date.getFullYear();\n    var month = \"0\".concat(date.getMonth() + 1).slice(-2);\n    var day = \"0\".concat(date.getDate()).slice(-2);\n    return \"\".concat(year, \"-\").concat(month, \"-\").concat(day);\n  }; // Given a locale (or locales), resolve the browser available locale\n\n  var resolveLocale = function resolveLocale(locales)\n  /* istanbul ignore next */\n  {\n    var calendar = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'gregory';\n    locales = concat(locales).filter(identity);\n    var fmt = new Intl.DateTimeFormat(locales, {\n      calendar: calendar\n    });\n    return fmt.resolvedOptions().locale;\n  }; // Create a `Intl.DateTimeFormat` formatter function\n\n  var createDateFormatter = function createDateFormatter(locale, options)\n  /* istanbul ignore next */\n  {\n    var dtf = new Intl.DateTimeFormat(locale, options);\n    return dtf.format;\n  }; // Determine if two dates are the same date (ignoring time portion)\n\n  var datesEqual = function datesEqual(date1, date2) {\n    // Returns true of the date portion of two date objects are equal\n    // We don't compare the time portion\n    return formatYMD(date1) === formatYMD(date2);\n  }; // --- Date \"math\" utility methods (for BCalendar component mainly) ---\n\n  var firstDateOfMonth = function firstDateOfMonth(date) {\n    date = createDate(date);\n    date.setDate(1);\n    return date;\n  };\n  var lastDateOfMonth = function lastDateOfMonth(date) {\n    date = createDate(date);\n    date.setMonth(date.getMonth() + 1);\n    date.setDate(0);\n    return date;\n  };\n  var oneMonthAgo = function oneMonthAgo(date) {\n    date = createDate(date);\n    var month = date.getMonth();\n    date.setMonth(month - 1);\n\n    if (date.getMonth() === month) {\n      date.setDate(0);\n    }\n\n    return date;\n  };\n  var oneMonthAhead = function oneMonthAhead(date) {\n    date = createDate(date);\n    var month = date.getMonth();\n    date.setMonth(month + 1);\n\n    if (date.getMonth() === (month + 2) % 12) {\n      date.setDate(0);\n    }\n\n    return date;\n  };\n  var oneYearAgo = function oneYearAgo(date) {\n    date = createDate(date);\n    var month = date.getMonth();\n    date.setMonth(month - 12);\n\n    if (date.getMonth() !== month) {\n      date.setDate(0);\n    }\n\n    return date;\n  };\n  var oneYearAhead = function oneYearAhead(date) {\n    date = createDate(date);\n    var month = date.getMonth();\n    date.setMonth(month + 12);\n\n    if (date.getMonth() !== month) {\n      date.setDate(0);\n    }\n\n    return date;\n  };\n\n  /*\n   * SSR Safe Client Side ID attribute generation\n   * id's can only be generated client side, after mount.\n   * this._uid is not synched between server and client.\n   */\n  // @vue/component\n  var idMixin = {\n    props: {\n      id: {\n        type: String,\n        default: null\n      }\n    },\n    data: function data() {\n      return {\n        localId_: null\n      };\n    },\n    computed: {\n      safeId: function safeId() {\n        // Computed property that returns a dynamic function for creating the ID.\n        // Reacts to changes in both .id and .localId_ And regens a new function\n        var id = this.id || this.localId_; // We return a function that accepts an optional suffix string\n        // So this computed prop looks and works like a method!!!\n        // But benefits from Vue's Computed prop caching\n\n        var fn = function fn(suffix) {\n          if (!id) {\n            return null;\n          }\n\n          suffix = String(suffix || '').replace(/\\s+/g, '_');\n          return suffix ? id + '_' + suffix : id;\n        };\n\n        return fn;\n      }\n    },\n    mounted: function mounted() {\n      var _this = this;\n\n      // mounted only occurs client side\n      this.$nextTick(function () {\n        // Update dom with auto ID after dom loaded to prevent\n        // SSR hydration errors.\n        _this.localId_ = \"__BVID__\".concat(_this._uid);\n      });\n    }\n  };\n\n  var commonIconProps = {\n    variant: {\n      type: String,\n      default: null\n    },\n    fontScale: {\n      type: [Number, String],\n      default: 1\n    },\n    scale: {\n      type: [Number, String],\n      default: 1\n    },\n    rotate: {\n      type: [Number, String],\n      default: 0\n    },\n    flipH: {\n      type: Boolean,\n      default: false\n    },\n    flipV: {\n      type: Boolean,\n      default: false\n    },\n    shiftH: {\n      type: [Number, String],\n      default: 0\n    },\n    shiftV: {\n      type: [Number, String],\n      default: 0\n    }\n  }; // Base attributes needed on all icons\n\n  var baseAttrs = {\n    width: '1em',\n    height: '1em',\n    viewBox: '0 0 20 20',\n    focusable: 'false',\n    role: 'img',\n    alt: 'icon'\n  }; // Shared private base component to reduce bundle/runtime size\n  // @vue/component\n\n  var BVIconBase =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BVIconBase',\n    functional: true,\n    props: _objectSpread2({\n      content: {\n        type: String\n      },\n      stacked: {\n        type: Boolean,\n        default: false\n      }\n    }, commonIconProps),\n    render: function render(h, _ref) {\n      var data = _ref.data,\n          props = _ref.props,\n          children = _ref.children;\n      var fontScale = Math.max(toFloat(props.fontScale) || 1, 0) || 1;\n      var scale = Math.max(toFloat(props.scale) || 1, 0) || 1;\n      var rotate = toFloat(props.rotate) || 0;\n      var shiftH = toFloat(props.shiftH) || 0;\n      var shiftV = toFloat(props.shiftV) || 0;\n      var flipH = props.flipH;\n      var flipV = props.flipV; // Compute the transforms\n      // Note that order is important as SVG transforms are applied in order from\n      // left to right and we want flipping/scale to occur before rotation\n      // Note shifting is applied separately\n      // Assumes that the viewbox is `0 0 20 20` (`10 10` is the center)\n\n      var hasScale = flipH || flipV || scale !== 1;\n      var hasTransforms = hasScale || rotate;\n      var hasShift = shiftH || shiftV;\n      var transforms = [hasTransforms ? 'translate(10 10)' : null, hasScale ? \"scale(\".concat((flipH ? -1 : 1) * scale, \" \").concat((flipV ? -1 : 1) * scale, \")\") : null, rotate ? \"rotate(\".concat(rotate, \")\") : null, hasTransforms ? 'translate(-10 -10)' : null].filter(identity); // Handling stacked icons\n\n      var isStacked = props.stacked;\n      var hasContent = !isUndefinedOrNull(props.content); // We wrap the content in a `<g>` for handling the transforms (except shift)\n\n      var $inner = h('g', {\n        attrs: {\n          transform: transforms.join(' ') || null\n        },\n        domProps: hasContent ? {\n          innerHTML: props.content || ''\n        } : {}\n      }, children); // If needed, we wrap in an additional `<g>` in order to handle the shifting\n\n      if (hasShift) {\n        $inner = h('g', {\n          attrs: {\n            transform: \"translate(\".concat(20 * shiftH / 16, \" \").concat(-20 * shiftV / 16, \")\")\n          }\n        }, [$inner]);\n      }\n\n      return h('svg', a({\n        staticClass: 'b-icon bi',\n        class: _defineProperty({}, \"text-\".concat(props.variant), !!props.variant),\n        attrs: baseAttrs,\n        style: isStacked ? {} : {\n          fontSize: fontScale === 1 ? null : \"\".concat(fontScale * 100, \"%\")\n        }\n      }, // Merge in user supplied data\n      data, // If icon is stacked, null out some attrs\n      isStacked ? {\n        attrs: {\n          width: null,\n          height: null,\n          role: null,\n          alt: null\n        }\n      } : {}, // These cannot be overridden by users\n      {\n        attrs: {\n          xmlns: isStacked ? null : 'http://www.w3.org/2000/svg',\n          fill: 'currentColor'\n        }\n      }), [$inner]);\n    }\n  });\n\n  /**\n   * Icon component generator function\n   *\n   * @param {string} icon name (minus the leading `BIcon`)\n   * @param {string} raw `innerHTML` for SVG\n   * @return {VueComponent}\n   */\n\n  var makeIcon = function makeIcon(name, content) {\n    // For performance reason we pre-compute some values, so that\n    // they are not computed on each render of the icon component\n    var iconName = \"BIcon\".concat(pascalCase(name));\n    var iconNameClass = \"bi-\".concat(kebabCase(name));\n    var svgContent = trim(content || ''); // Return the icon component definition\n\n    return (\n      /*#__PURE__*/\n      Vue.extend({\n        name: iconName,\n        functional: true,\n        props: _objectSpread2({}, commonIconProps, {\n          stacked: {\n            type: Boolean,\n            default: false\n          }\n        }),\n        render: function render(h, _ref) {\n          var data = _ref.data,\n              props = _ref.props;\n          return h(BVIconBase, a(data, {\n            staticClass: iconNameClass,\n            props: _objectSpread2({}, props, {\n              content: svgContent\n            })\n          }));\n        }\n      })\n    );\n  };\n\n  // --- BEGIN AUTO-GENERATED FILE ---\n\n  var BIconBlank =\n  /*#__PURE__*/\n  makeIcon('Blank', ''); // --- Bootstrap Icons ---\n  var BIconCalendar =\n  /*#__PURE__*/\n  makeIcon('Calendar', '<path fill-rule=\"evenodd\" d=\"M16 2H4a2 2 0 00-2 2v12a2 2 0 002 2h12a2 2 0 002-2V4a2 2 0 00-2-2zM3 5.857C3 5.384 3.448 5 4 5h12c.552 0 1 .384 1 .857v10.286c0 .473-.448.857-1 .857H4c-.552 0-1-.384-1-.857V5.857z\" clip-rule=\"evenodd\"/><path fill-rule=\"evenodd\" d=\"M8.5 9a1 1 0 100-2 1 1 0 000 2zm3 0a1 1 0 100-2 1 1 0 000 2zm3 0a1 1 0 100-2 1 1 0 000 2zm-9 3a1 1 0 100-2 1 1 0 000 2zm3 0a1 1 0 100-2 1 1 0 000 2zm3 0a1 1 0 100-2 1 1 0 000 2zm3 0a1 1 0 100-2 1 1 0 000 2zm-9 3a1 1 0 100-2 1 1 0 000 2zm3 0a1 1 0 100-2 1 1 0 000 2zm3 0a1 1 0 100-2 1 1 0 000 2z\" clip-rule=\"evenodd\"/>');\n  var BIconCalendarFill =\n  /*#__PURE__*/\n  makeIcon('CalendarFill', '<path d=\"M2 4a2 2 0 012-2h12a2 2 0 012 2H2z\"/><path fill-rule=\"evenodd\" d=\"M2 5h16v11a2 2 0 01-2 2H4a2 2 0 01-2-2V5zm6.5 4a1 1 0 100-2 1 1 0 000 2zm4-1a1 1 0 11-2 0 1 1 0 012 0zm2 1a1 1 0 100-2 1 1 0 000 2zm-8 2a1 1 0 11-2 0 1 1 0 012 0zm2 1a1 1 0 100-2 1 1 0 000 2zm4-1a1 1 0 11-2 0 1 1 0 012 0zm2 1a1 1 0 100-2 1 1 0 000 2zm-8 2a1 1 0 11-2 0 1 1 0 012 0zm2 1a1 1 0 100-2 1 1 0 000 2zm4-1a1 1 0 11-2 0 1 1 0 012 0z\" clip-rule=\"evenodd\"/>');\n  var BIconChevronLeft =\n  /*#__PURE__*/\n  makeIcon('ChevronLeft', '<path fill-rule=\"evenodd\" d=\"M13.354 3.646a.5.5 0 010 .708L7.707 10l5.647 5.646a.5.5 0 01-.708.708l-6-6a.5.5 0 010-.708l6-6a.5.5 0 01.708 0z\" clip-rule=\"evenodd\"/>');\n  var BIconCircleFill =\n  /*#__PURE__*/\n  makeIcon('CircleFill', '<circle cx=\"10\" cy=\"10\" r=\"8\"/>');\n  var BIconDash =\n  /*#__PURE__*/\n  makeIcon('Dash', '<path fill-rule=\"evenodd\" d=\"M5.5 10a.5.5 0 01.5-.5h8a.5.5 0 010 1H6a.5.5 0 01-.5-.5z\" clip-rule=\"evenodd\"/>');\n  var BIconPlus =\n  /*#__PURE__*/\n  makeIcon('Plus', '<path fill-rule=\"evenodd\" d=\"M10 5.5a.5.5 0 01.5.5v4a.5.5 0 01-.5.5H6a.5.5 0 010-1h3.5V6a.5.5 0 01.5-.5z\" clip-rule=\"evenodd\"/><path fill-rule=\"evenodd\" d=\"M9.5 10a.5.5 0 01.5-.5h4a.5.5 0 010 1h-3.5V14a.5.5 0 01-1 0v-4z\" clip-rule=\"evenodd\"/>');\n   // --- END AUTO-GENERATED FILE ---\n\n  var BIconstack =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BIconstack',\n    functional: true,\n    props: _objectSpread2({}, commonIconProps),\n    render: function render(h, _ref) {\n      var data = _ref.data,\n          props = _ref.props,\n          children = _ref.children;\n      return h(BVIconBase, a(data, {\n        staticClass: 'b-iconstack',\n        props: _objectSpread2({}, props, {\n          stacked: false\n        })\n      }), children);\n    }\n  });\n\n  var NAME$6 = 'BCalendar'; // Key Codes\n\n  var UP = KEY_CODES.UP,\n      DOWN = KEY_CODES.DOWN,\n      LEFT = KEY_CODES.LEFT,\n      RIGHT = KEY_CODES.RIGHT,\n      PAGEUP = KEY_CODES.PAGEUP,\n      PAGEDOWN = KEY_CODES.PAGEDOWN,\n      HOME = KEY_CODES.HOME,\n      END = KEY_CODES.END,\n      ENTER = KEY_CODES.ENTER,\n      SPACE = KEY_CODES.SPACE; // Languages that are RTL\n\n  var RTL_LANGS = ['ar', 'az', 'ckb', 'fa', 'he', 'ks', 'lrc', 'mzn', 'ps', 'sd', 'te', 'ug', 'ur', 'yi'].map(function (locale) {\n    return locale.toLowerCase();\n  }); // --- Helper utilities ---\n\n  var isLocaleRTL = function isLocaleRTL(locale) {\n    // Determines if the locale is RTL (only single locale supported)\n    var parts = toString$1(locale).toLowerCase().replace(/-u-.+/, '').split('-');\n    var locale1 = parts.slice(0, 2).join('-');\n    var locale2 = parts[0];\n    return arrayIncludes(RTL_LANGS, locale1) || arrayIncludes(RTL_LANGS, locale2);\n  }; // --- BCalendar component ---\n  // @vue/component\n\n  var BCalendar = Vue.extend({\n    name: NAME$6,\n    mixins: [idMixin, normalizeSlotMixin],\n    model: {\n      // Even though this is the default that Vue assumes, we need\n      // to add it for the docs to reflect that this is the model\n      // And also for some validation libraries to work\n      prop: 'value',\n      event: 'input'\n    },\n    props: {\n      value: {\n        type: [String, Date] // default: null\n\n      },\n      valueAsDate: {\n        // Always return the `v-model` value as a date object\n        type: Boolean,\n        default: false\n      },\n      disabled: {\n        type: Boolean,\n        default: false\n      },\n      readonly: {\n        type: Boolean,\n        default: false\n      },\n      min: {\n        type: [String, Date] // default: null\n\n      },\n      max: {\n        type: [String, Date] // default: null\n\n      },\n      dateDisabledFn: {\n        type: Function // default: null\n\n      },\n      startWeekday: {\n        // `0` (Sunday), `1` (Monday), ... `6` (Saturday)\n        // Day of week to start calendar on\n        type: [Number, String],\n        default: 0\n      },\n      locale: {\n        // Locale(s) to use\n        // Default is to use page/browser default setting\n        type: [String, Array] // default: null\n\n      },\n      direction: {\n        // 'ltr', 'rtl', or `null` (for auto detect)\n        type: String // default: null\n\n      },\n      selectedVariant: {\n        // Variant color to use for the selected date\n        type: String,\n        default: 'primary'\n      },\n      todayVariant: {\n        // Variant color to use for today's date (defaults to `variant`)\n        type: String // default: null\n\n      },\n      noHighlightToday: {\n        // Disable highlighting today's date\n        type: Boolean,\n        default: false\n      },\n      dateInfoFn: {\n        // Function to set a class of (classes) on the date cell\n        // if passed a string or an array\n        // TODO:\n        //   If the function returns an object, look for class prop for classes,\n        //   and other props for handling events/details/descriptions\n        type: Function // default: null\n\n      },\n      width: {\n        // Has no effect if prop `block` is set\n        type: String,\n        default: '270px'\n      },\n      block: {\n        // Makes calendar the full width of its parent container\n        type: Boolean,\n        default: false\n      },\n      hideHeader: {\n        // When true makes the selected date header `sr-only`\n        type: Boolean,\n        default: false\n      },\n      hidden: {\n        // When `true`, renders a comment node, but keeps the component instance active\n        // Mainly for <b-form-date>, so that we can get the component's value and locale\n        // But we might just use separate date formatters, using the resolved locale\n        // (adjusted for the gregorian calendar)\n        type: Boolean,\n        default: false\n      },\n      ariaControls: {\n        type: String // default: null\n\n      },\n      roleDescription: {\n        type: String // default: null\n\n      },\n      // Labels for buttons and keyboard shortcuts\n      labelPrevYear: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$6, 'labelPrevYear');\n        }\n      },\n      labelPrevMonth: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$6, 'labelPrevMonth');\n        }\n      },\n      labelCurrentMonth: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$6, 'labelCurrentMonth');\n        }\n      },\n      labelNextMonth: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$6, 'labelNextMonth');\n        }\n      },\n      labelNextYear: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$6, 'labelNextYear');\n        }\n      },\n      labelToday: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$6, 'labelToday');\n        }\n      },\n      labelSelected: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$6, 'labelSelected');\n        }\n      },\n      labelNoDateSelected: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$6, 'labelNoDateSelected');\n        }\n      },\n      labelCalendar: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$6, 'labelCalendar');\n        }\n      },\n      labelNav: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$6, 'labelNav');\n        }\n      },\n      labelHelp: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$6, 'labelHelp');\n        }\n      }\n    },\n    data: function data() {\n      var selected = formatYMD(this.value) || '';\n      return {\n        // Selected date\n        selectedYMD: selected,\n        // Date in calendar grid that has `tabindex` of `0`\n        activeYMD: selected || formatYMD(this.getToday()),\n        // Will be true if the calendar grid has/contains focus\n        gridHasFocus: false,\n        // Flag to enable the `aria-live` region(s) after mount\n        // to prevent screen reader \"outbursts\" when mounting\n        isLive: false\n      };\n    },\n    computed: {\n      // TODO: Use computed props to convert `YYYY-MM-DD` to `Date` object\n      selectedDate: function selectedDate() {\n        // Selected as a `Date` object\n        return parseYMD(this.selectedYMD);\n      },\n      activeDate: function activeDate() {\n        // Active as a `Date` object\n        return parseYMD(this.activeYMD);\n      },\n      computedMin: function computedMin() {\n        return parseYMD(this.min);\n      },\n      computedMax: function computedMax() {\n        return parseYMD(this.max);\n      },\n      computedWeekStarts: function computedWeekStarts() {\n        // `startWeekday` is a prop (constrained to `0` through `6`)\n        return Math.max(toInteger(this.startWeekday) || 0, 0) % 7;\n      },\n      computedLocale: function computedLocale() {\n        // Returns the resolved locale used by the calendar\n        return resolveLocale(concat(this.locale).filter(identity), 'gregory');\n      },\n      calendarLocale: function calendarLocale() {\n        // This locale enforces the gregorian calendar (for use in formatter functions)\n        // Needed because IE 11 resolves `ar-IR` as islamic-civil calendar\n        // and IE 11 (and some other browsers) do not support the `calendar` option\n        // And we currently only support the gregorian calendar\n        var fmt = new Intl.DateTimeFormat(this.computedLocale, {\n          calendar: 'gregory'\n        });\n        var calendar = fmt.resolvedOptions().calendar;\n        var locale = fmt.resolvedOptions().locale;\n        /* istanbul ignore if: mainly for IE 11 and a few other browsers, hard to test in JSDOM */\n\n        if (calendar !== 'gregory') {\n          // Ensure the locale requests the gregorian calendar\n          // Mainly for IE 11, and currently we can't handle non-gregorian calendars\n          // TODO: Should we always return this value?\n          locale = locale.replace(/-u-.+$/i, '').concat('-u-ca-gregory');\n        }\n\n        return locale;\n      },\n      calendarYear: function calendarYear() {\n        return this.activeDate.getFullYear();\n      },\n      calendarMonth: function calendarMonth() {\n        return this.activeDate.getMonth();\n      },\n      calendarFirstDay: function calendarFirstDay() {\n        return createDate(this.calendarYear, this.calendarMonth, 1);\n      },\n      calendarDaysInMonth: function calendarDaysInMonth() {\n        // We create a new date as to not mutate the original\n        var date = createDate(this.calendarFirstDay);\n        date.setMonth(date.getMonth() + 1, 0);\n        return date.getDate();\n      },\n      computedVariant: function computedVariant() {\n        return \"btn-\".concat(this.selectedVariant || 'primary');\n      },\n      computedTodayVariant: function computedTodayVariant() {\n        return \"btn-outline-\".concat(this.todayVariant || this.selectedVariant || 'primary');\n      },\n      isRTL: function isRTL() {\n        // `true` if the language requested is RTL\n        var dir = toString$1(this.direction).toLowerCase();\n\n        if (dir === 'rtl') {\n          /* istanbul ignore next */\n          return true;\n        } else if (dir === 'ltr') {\n          /* istanbul ignore next */\n          return false;\n        }\n\n        return isLocaleRTL(this.computedLocale);\n      },\n      context: function context() {\n        var selectedYMD = this.selectedYMD;\n        var selectedDate = parseYMD(selectedYMD);\n        var activeYMD = this.activeYMD;\n        var activeDate = parseYMD(activeYMD);\n        return {\n          // The current value of the `v-model`\n          selectedYMD: selectedYMD,\n          selectedDate: selectedDate,\n          selectedFormatted: selectedDate ? this.formatDateString(selectedDate) : this.labelNoDateSelected,\n          // Which date cell is considered active due to navigation\n          activeYMD: activeYMD,\n          activeDate: activeDate,\n          activeFormatted: activeDate ? this.formatDateString(activeDate) : '',\n          // `true` if the date is disabled (when using keyboard navigation)\n          disabled: this.dateDisabled(activeDate),\n          // Locales used in formatting dates\n          locale: this.computedLocale,\n          calendarLocale: this.calendarLocale,\n          rtl: this.isRTL\n        };\n      },\n      // Computed props that return a function reference\n      dateOutOfRange: function dateOutOfRange() {\n        // Check wether a date is within the min/max range\n        // returns a new function ref if the pops change\n        // We do this as we need to trigger the calendar computed prop\n        // to update when these props update\n        var min = this.computedMin;\n        var max = this.computedMax;\n        return function (date) {\n          // Handle both `YYYY-MM-DD` and `Date` objects\n          date = parseYMD(date);\n          return min && date < min || max && date > max;\n        };\n      },\n      dateDisabled: function dateDisabled() {\n        // Returns a function for validating if a date is within range\n        // We grab this variables first to ensure a new function ref\n        // is generated when the props value changes\n        // We do this as we need to trigger the calendar computed prop\n        // to update when these props update\n        var rangeFn = this.dateOutOfRange;\n        var disabledFn = isFunction(this.dateDisabledFn) ? this.dateDisabledFn : function () {\n          return false;\n        }; // Return the function ref\n\n        return function (date) {\n          // Handle both `YYYY-MM-DD` and `Date` objects\n          date = parseYMD(date);\n          var ymd = formatYMD(date);\n          return !!(rangeFn(date) || disabledFn(ymd, date));\n        };\n      },\n      // Computed props that return date formatter functions\n      formatDateString: function formatDateString() {\n        // Returns a date formatter function\n        return createDateFormatter(this.calendarLocale, {\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric',\n          weekday: 'long',\n          calendar: 'gregory'\n        });\n      },\n      formatYearMonth: function formatYearMonth() {\n        // Returns a date formatter function\n        return createDateFormatter(this.calendarLocale, {\n          year: 'numeric',\n          month: 'long',\n          calendar: 'gregory'\n        });\n      },\n      formatWeekdayName: function formatWeekdayName() {\n        return createDateFormatter(this.calendarLocale, {\n          weekday: 'long',\n          calendar: 'gregory'\n        });\n      },\n      formatWeekdayNameShort: function formatWeekdayNameShort() {\n        // Used as the header cells\n        return createDateFormatter(this.calendarLocale, {\n          weekday: 'short',\n          calendar: 'gregory'\n        });\n      },\n      formatDay: function formatDay() {\n        return createDateFormatter(this.calendarLocale, {\n          day: 'numeric',\n          calendar: 'gregory'\n        });\n      },\n      // Disabled states for the nav buttons\n      prevYearDisabled: function prevYearDisabled() {\n        var min = this.computedMin;\n        return this.disabled || min && lastDateOfMonth(oneYearAgo(this.activeDate)) < min;\n      },\n      prevMonthDisabled: function prevMonthDisabled() {\n        var min = this.computedMin;\n        return this.disabled || min && lastDateOfMonth(oneMonthAgo(this.activeDate)) < min;\n      },\n      thisMonthDisabled: function thisMonthDisabled() {\n        // TODO: We could/should check if today is out of range\n        return this.disabled;\n      },\n      nextMonthDisabled: function nextMonthDisabled() {\n        var max = this.computedMax;\n        return this.disabled || max && firstDateOfMonth(oneMonthAhead(this.activeDate)) > max;\n      },\n      nextYearDisabled: function nextYearDisabled() {\n        var max = this.computedMax;\n        return this.disabled || max && firstDateOfMonth(oneYearAhead(this.activeDate)) > max;\n      },\n      // Calendar generation\n      calendar: function calendar() {\n        var matrix = [];\n        var firstDay = this.calendarFirstDay;\n        var calendarYear = firstDay.getFullYear();\n        var calendarMonth = firstDay.getMonth();\n        var daysInMonth = this.calendarDaysInMonth;\n        var startIndex = firstDay.getDay(); // `0`..`6`\n\n        var weekOffset = (this.computedWeekStarts > startIndex ? 7 : 0) - this.computedWeekStarts; // TODO: Change `dateInfoFn` to handle events and notes as well as classes\n\n        var dateInfoFn = isFunction(this.dateInfoFn) ? this.dateInfoFn : function () {\n          return {};\n        }; // Build the calendar matrix\n\n        var currentDay = 0 - weekOffset - startIndex;\n\n        for (var week = 0; week < 6 && currentDay < daysInMonth; week++) {\n          // For each week\n          matrix[week] = []; // The following could be a map function\n\n          for (var j = 0; j < 7; j++) {\n            // For each day in week\n            currentDay++;\n            var date = createDate(calendarYear, calendarMonth, currentDay);\n            var month = date.getMonth();\n            var dayYMD = formatYMD(date);\n            var dayDisabled = this.dateDisabled(date); // TODO: This could be a normalizer method\n\n            var dateInfo = dateInfoFn(dayYMD, parseYMD(dayYMD));\n            dateInfo = isString(dateInfo) || isArray(dateInfo) ? {\n              class: dateInfo\n            } : isPlainObject(dateInfo) ? _objectSpread2({\n              class: ''\n            }, dateInfo) : {\n              class: ''\n            };\n            matrix[week].push({\n              ymd: dayYMD,\n              // Cell content\n              day: this.formatDay(date),\n              label: this.formatDateString(date),\n              // Flags for styling\n              isThisMonth: month === calendarMonth,\n              isDisabled: dayDisabled,\n              // TODO: Handle other dateInfo properties such as notes/events\n              info: dateInfo\n            });\n          }\n        }\n\n        return matrix;\n      },\n      calendarHeadings: function calendarHeadings() {\n        var _this = this;\n\n        return this.calendar[0].map(function (d) {\n          return {\n            text: _this.formatWeekdayNameShort(parseYMD(d.ymd)),\n            label: _this.formatWeekdayName(parseYMD(d.ymd))\n          };\n        });\n      }\n    },\n    watch: {\n      value: function value(newVal, oldVal) {\n        var selected = formatYMD(newVal) || '';\n        var old = formatYMD(oldVal) || '';\n\n        if (!datesEqual(selected, old)) {\n          this.activeYMD = selected || this.activeYMD;\n          this.selectedYMD = selected;\n        }\n      },\n      selectedYMD: function selectedYMD(newYMD, oldYMD) {\n        // TODO:\n        //   Should we compare to `formatYMD(this.value)` and emit\n        //   only if they are different?\n        if (newYMD !== oldYMD) {\n          this.$emit('input', this.valueAsDate ? parseYMD(newYMD) || null : newYMD || '');\n        }\n      },\n      context: function context(newVal, oldVal) {\n        if (!looseEqual(newVal, oldVal)) {\n          this.$emit('context', newVal);\n        }\n      },\n      hidden: function hidden(newVal) {\n        // Reset the active focused day when hidden\n        this.activeYMD = this.selectedYMD || formatYMD(this.value) || formatYMD(this.getToday()); // Enable/disable the live regions\n\n        this.setLive(!newVal);\n      }\n    },\n    created: function created() {\n      var _this2 = this;\n\n      this.$nextTick(function () {\n        _this2.$emit('context', _this2.context);\n      });\n    },\n    mounted: function mounted() {\n      this.setLive(true);\n    },\n    activated: function activated()\n    /* istanbul ignore next */\n    {\n      this.setLive(true);\n    },\n    deactivated: function deactivated()\n    /* istanbul ignore next */\n    {\n      this.setLive(false);\n    },\n    beforeDestroy: function beforeDestroy() {\n      this.setLive(false);\n    },\n    methods: {\n      // Public method(s)\n      focus: function focus() {\n        if (!this.disabled) {\n          try {\n            this.$refs.grid.focus();\n          } catch (_unused) {}\n        }\n      },\n      blur: function blur() {\n        try {\n          this.$refs.grid.blur();\n        } catch (_unused2) {}\n      },\n      // Private methods\n      setLive: function setLive(on) {\n        var _this3 = this;\n\n        if (on) {\n          this.$nextTick(function () {\n            requestAF(function () {\n              _this3.isLive = true;\n            });\n          });\n        } else {\n          this.isLive = false;\n        }\n      },\n      getToday: function getToday() {\n        return parseYMD(createDate());\n      },\n      constrainDate: function constrainDate(date) {\n        // Constrains a date between min and max\n        // returns a new `Date` object instance\n        date = parseYMD(date);\n        var min = this.computedMin || date;\n        var max = this.computedMax || date;\n        return createDate(date < min ? min : date > max ? max : date);\n      },\n      emitSelected: function emitSelected(date) {\n        var _this4 = this;\n\n        // Performed in a `$nextTick()` to (probably) ensure\n        // the input event has emitted first\n        this.$nextTick(function () {\n          _this4.$emit('selected', formatYMD(date) || '', parseYMD(date) || null);\n        });\n      },\n      // Event handlers\n      setGridFocusFlag: function setGridFocusFlag(evt) {\n        // Sets the gridHasFocus flag to make date \"button\" look focused\n        this.gridHasFocus = !this.disabled && evt.type === 'focus';\n      },\n      onKeydownWrapper: function onKeydownWrapper(evt) {\n        // Calendar keyboard navigation\n        // Handles PAGEUP/PAGEDOWN/END/HOME/LEFT/UP/RIGHT/DOWN\n        // Focuses grid after updating\n        var keyCode = evt.keyCode;\n        var altKey = evt.altKey;\n\n        if (!arrayIncludes([PAGEUP, PAGEDOWN, END, HOME, LEFT, UP, RIGHT, DOWN], keyCode)) {\n          /* istanbul ignore next */\n          return;\n        }\n\n        evt.preventDefault();\n        evt.stopPropagation();\n        var activeDate = createDate(this.activeDate);\n        var checkDate = createDate(this.activeDate);\n        var day = activeDate.getDate();\n        var isRTL = this.isRTL;\n\n        if (keyCode === PAGEUP) {\n          // PAGEUP - Previous month/year\n          activeDate = (altKey ? oneYearAgo : oneMonthAgo)(activeDate); // We check the first day of month to be in rage\n\n          checkDate = createDate(activeDate);\n          checkDate.setDate(1);\n        } else if (keyCode === PAGEDOWN) {\n          // PAGEDOWN - Next month/year\n          activeDate = (altKey ? oneYearAhead : oneMonthAhead)(activeDate); // We check the last day of month to be in rage\n\n          checkDate = createDate(activeDate);\n          checkDate.setMonth(checkDate.getMonth() + 1);\n          checkDate.setDate(0);\n        } else if (keyCode === LEFT) {\n          // LEFT - Previous day (or next day for RTL)\n          activeDate.setDate(day + (isRTL ? 1 : -1));\n          checkDate = activeDate;\n        } else if (keyCode === RIGHT) {\n          // RIGHT - Next day (or previous day for RTL)\n          activeDate.setDate(day + (isRTL ? -1 : 1));\n          checkDate = activeDate;\n        } else if (keyCode === UP) {\n          // UP - Previous week\n          activeDate.setDate(day - 7);\n          checkDate = activeDate;\n        } else if (keyCode === DOWN) {\n          // DOWN - Next week\n          activeDate.setDate(day + 7);\n          checkDate = activeDate;\n        } else if (keyCode === HOME) {\n          // HOME - Today\n          activeDate = this.getToday();\n          checkDate = activeDate;\n        } else if (keyCode === END) {\n          // END - Selected date, or today if no selected date\n          activeDate = parseYMD(this.selectedDate) || this.getToday();\n          checkDate = activeDate;\n        }\n\n        if (!this.dateOutOfRange(checkDate) && !datesEqual(activeDate, this.activeDate)) {\n          // We only jump to date if within min/max\n          // We don't check for individual disabled dates though (via user function)\n          this.activeYMD = formatYMD(activeDate);\n        } // Ensure grid is focused\n\n\n        this.focus();\n      },\n      onKeydownGrid: function onKeydownGrid(evt) {\n        // Pressing enter/space on grid to select active date\n        var keyCode = evt.keyCode;\n        var activeDate = this.activeDate;\n\n        if (keyCode === ENTER || keyCode === SPACE) {\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (!this.disabled && !this.readonly && !this.dateDisabled(activeDate)) {\n            this.selectedYMD = formatYMD(activeDate);\n            this.emitSelected(activeDate);\n          } // Ensure grid is focused\n\n\n          this.focus();\n        }\n      },\n      onClickDay: function onClickDay(day) {\n        // Clicking on a date \"button\" to select it\n        // TODO: Change to lookup the `data-data` attribute\n        var selectedDate = this.selectedDate;\n        var activeDate = this.activeDate;\n        var clickedDate = parseYMD(day.ymd);\n\n        if (!this.disabled && !day.isDisabled && !this.dateDisabled(clickedDate)) {\n          if (!this.readonly) {\n            // If readonly mode, we don't set the selected date, just the active date\n            // If the clicked date is equal to the already selected date, we don't update the model\n            this.selectedYMD = formatYMD(datesEqual(clickedDate, selectedDate) ? selectedDate : clickedDate);\n            this.emitSelected(clickedDate);\n          }\n\n          this.activeYMD = formatYMD(datesEqual(clickedDate, activeDate) ? activeDate : createDate(clickedDate)); // Ensure grid is focused\n\n          this.focus();\n        }\n      },\n      gotoPrevYear: function gotoPrevYear() {\n        this.activeYMD = formatYMD(this.constrainDate(oneYearAgo(this.activeDate)));\n      },\n      gotoPrevMonth: function gotoPrevMonth() {\n        this.activeYMD = formatYMD(this.constrainDate(oneMonthAgo(this.activeDate)));\n      },\n      gotoCurrentMonth: function gotoCurrentMonth() {\n        // TODO: Maybe this goto date should be configurable?\n        this.activeYMD = formatYMD(this.getToday());\n      },\n      gotoNextMonth: function gotoNextMonth() {\n        this.activeYMD = formatYMD(this.constrainDate(oneMonthAhead(this.activeDate)));\n      },\n      gotoNextYear: function gotoNextYear() {\n        this.activeYMD = formatYMD(this.constrainDate(oneYearAhead(this.activeDate)));\n      }\n    },\n    render: function render(h) {\n      var _this5 = this;\n\n      // If hidden prop is set, render just a placeholder node\n      if (this.hidden) {\n        return h();\n      }\n\n      var isRTL = this.isRTL;\n      var todayYMD = formatYMD(this.getToday());\n      var selectedYMD = this.selectedYMD;\n      var activeYMD = this.activeYMD;\n      var highlightToday = !this.noHighlightToday;\n      var safeId = this.safeId; // Flag for making the `aria-live` regions live\n\n      var isLive = this.isLive; // Pre-compute some IDs\n\n      var idWidget = safeId();\n      var idValue = safeId('_calendar-value_');\n      var idNav = safeId('_calendar-nav_');\n      var idGrid = safeId('_calendar-grid_');\n      var idGridCaption = safeId('_calendar-grid-caption_');\n      var idGridHelp = safeId('_calendar-grid-help_');\n      var idActive = activeYMD ? safeId(\"_cell-\".concat(activeYMD, \"_\")) : null; // Header showing current selected date\n\n      var $header = h('output', {\n        staticClass: 'd-block text-center rounded border small p-1 mb-1',\n        class: {\n          'text-muted': this.disabled,\n          readonly: this.readonly || this.disabled\n        },\n        attrs: {\n          id: idValue,\n          for: idGrid,\n          role: 'status',\n          // Mainly for testing purposes, as we do not know\n          // the exact format `Intl` will format the date string\n          'data-selected': toString$1(selectedYMD),\n          // We wait until after mount to enable `aria-live`\n          // to prevent initial announcement on page render\n          'aria-live': isLive ? 'polite' : 'off',\n          'aria-atomic': isLive ? 'true' : null\n        }\n      }, this.selectedDate ? [// We use `bdi` elements here in case the label doesn't match the locale\n      // Although IE 11 does not deal with <BDI> at all (equivalent to a span)\n      h('bdi', {\n        staticClass: 'sr-only'\n      }, \" (\".concat(toString$1(this.labelSelected), \") \")), h('bdi', {}, this.formatDateString(this.selectedDate))] : this.labelNoDateSelected || \"\\xA0\" // '&nbsp;'\n      );\n      $header = h('header', {\n        class: this.hideHeader ? 'sr-only' : 'mb-1',\n        attrs: {\n          title: this.selectedDate ? this.labelSelectedDate || null : null\n        }\n      }, [$header]); // Content for the date navigation buttons\n\n      var $prevYearIcon = h(BIconstack, {\n        props: {\n          shiftV: 0.5,\n          flipH: isRTL\n        }\n      }, [h(BIconChevronLeft, {\n        props: {\n          shiftH: -2\n        }\n      }), h(BIconChevronLeft, {\n        props: {\n          shiftH: 2\n        }\n      })]);\n      var $prevMonthIcon = h(BIconChevronLeft, {\n        props: {\n          shiftV: 0.5,\n          flipH: isRTL\n        }\n      });\n      var $thisMonthIcon = h(BIconCircleFill, {\n        props: {\n          shiftV: 0.5\n        }\n      });\n      var $nextMonthIcon = h(BIconChevronLeft, {\n        props: {\n          shiftV: 0.5,\n          flipH: !isRTL\n        }\n      });\n      var $nextYearIcon = h(BIconstack, {\n        props: {\n          shiftV: 0.5,\n          flipH: !isRTL\n        }\n      }, [h(BIconChevronLeft, {\n        props: {\n          shiftH: -2\n        }\n      }), h(BIconChevronLeft, {\n        props: {\n          shiftH: 2\n        }\n      })]); // Utility to create the date navigation buttons\n\n      var makeNavBtn = function makeNavBtn(content, label, handler, btnDisabled, shortcut) {\n        return h('button', {\n          staticClass: 'btn btn-sm btn-outline-secondary border-0 flex-fill p-1 mx-1',\n          class: {\n            disabled: btnDisabled\n          },\n          attrs: {\n            title: label || null,\n            type: 'button',\n            'aria-label': label || null,\n            'aria-disabled': btnDisabled ? 'true' : null,\n            'aria-keyshortcuts': shortcut || null\n          },\n          on: btnDisabled ? {} : {\n            click: handler\n          }\n        }, [h('div', {\n          attrs: {\n            'aria-hidden': 'true'\n          }\n        }, [content])]);\n      }; // Generate the date navigation buttons\n\n\n      var $nav = h('div', {\n        staticClass: 'b-calendar-nav d-flex mx-n1 mb-1',\n        attrs: {\n          id: idNav,\n          role: 'group',\n          'aria-hidden': this.disabled ? 'true' : null,\n          'aria-label': this.labelNav || null,\n          'aria-controls': idGrid\n        }\n      }, [makeNavBtn($prevYearIcon, this.labelPrevYear, this.gotoPrevYear, this.prevYearDisabled, 'Alt+PageDown'), makeNavBtn($prevMonthIcon, this.labelPrevMonth, this.gotoPrevMonth, this.prevMonthDisabled, 'PageDown'), makeNavBtn($thisMonthIcon, this.labelCurrentMonth, this.gotoCurrentMonth, this.thisMonthDisabled, 'Home'), makeNavBtn($nextMonthIcon, this.labelNextMonth, this.gotoNextMonth, this.nextMonthDisabled, 'PageUp'), makeNavBtn($nextYearIcon, this.labelNextYear, this.gotoNextYear, this.nextYearDisabled, 'Alt+PageUp')]); // Caption for calendar grid\n\n      var $gridCaption = h('header', {\n        key: 'grid-caption',\n        staticClass: 'text-center font-weight-bold p-1 m-0',\n        class: {\n          'text-muted': this.disabled\n        },\n        attrs: {\n          id: idGridCaption,\n          'aria-live': isLive ? 'polite' : null,\n          'aria-atomic': isLive ? 'true' : null\n        }\n      }, this.formatYearMonth(this.calendarFirstDay)); // Calendar weekday headings\n\n      var $gridWeekDays = h('div', {\n        staticClass: 'row no-gutters border-bottom',\n        attrs: {\n          'aria-hidden': 'true'\n        }\n      }, this.calendarHeadings.map(function (d, idx) {\n        return h('small', {\n          key: idx,\n          staticClass: 'col',\n          class: {\n            'text-muted': _this5.disabled\n          },\n          attrs: {\n            title: d.label === d.text ? null : d.label,\n            'aria-label': d.label\n          }\n        }, d.text);\n      })); // Calendar day grid\n\n      var $gridBody = this.calendar.map(function (week) {\n        var $cells = week.map(function (day, dIndex) {\n          var _class;\n\n          var isSelected = day.ymd === selectedYMD;\n          var isActive = day.ymd === activeYMD;\n          var isToday = day.ymd === todayYMD;\n          var idCell = safeId(\"_cell-\".concat(day.ymd, \"_\")); // \"fake\" button\n\n          var $btn = h('span', {\n            staticClass: 'btn border-0 rounded-circle text-nowrap',\n            // Should we add some classes to signify if today/selected/etc?\n            class: (_class = {\n              // Give the fake button a focus ring\n              focus: isActive && _this5.gridHasFocus,\n              // Styling\n              disabled: day.isDisabled || _this5.disabled,\n              active: isSelected\n            }, _defineProperty(_class, _this5.computedVariant, isSelected), _defineProperty(_class, _this5.computedTodayVariant, isToday && highlightToday && !isSelected && day.isThisMonth), _defineProperty(_class, 'btn-outline-light', !(isToday && highlightToday) && !isSelected && !isActive), _defineProperty(_class, 'btn-light', !(isToday && highlightToday) && !isSelected && isActive), _defineProperty(_class, 'text-muted', !day.isThisMonth && !isSelected), _defineProperty(_class, 'text-dark', !(isToday && highlightToday) && !isSelected && !isActive && day.isThisMonth), _defineProperty(_class, 'font-weight-bold', (isSelected || day.isThisMonth) && !day.isDisabled), _class),\n            on: {\n              click: function click() {\n                return _this5.onClickDay(day);\n              }\n            }\n          }, day.day);\n          return h('div', // Cell with button\n          {\n            key: dIndex,\n            staticClass: 'col p-0',\n            class: day.isDisabled ? 'bg-light' : day.info.class || '',\n            attrs: {\n              id: idCell,\n              role: 'button',\n              'data-date': day.ymd,\n              // Primarily for testing purposes\n              // Only days in the month are presented as buttons to screen readers\n              'aria-hidden': day.isThisMonth ? null : 'true',\n              'aria-disabled': day.isDisabled || _this5.disabled ? 'true' : null,\n              'aria-label': [day.label, isSelected ? \"(\".concat(_this5.labelSelected, \")\") : null, isToday ? \"(\".concat(_this5.labelToday, \")\") : null].filter(identity).join(' '),\n              // NVDA doesn't convey `aria-selected`, but does `aria-current`,\n              // ChromeVox doesn't convey `aria-current`, but does `aria-selected`,\n              // so we set both attributes for robustness\n              'aria-selected': isSelected ? 'true' : null,\n              'aria-current': isSelected ? 'date' : null\n            }\n          }, [$btn]);\n        }); // Return the week \"row\"\n        // We use the first day of the weeks YMD value as a\n        // key for efficient DOM patching / element re-use\n\n        return h('div', {\n          key: week[0].ymd,\n          staticClass: 'row no-gutters'\n        }, $cells);\n      });\n      $gridBody = h('div', {\n        // A key is only required on the body if we add in transition support\n        // key: this.activeYMD.slice(0, -3),\n        staticClass: 'b-calendar-grid-body',\n        style: this.disabled ? {\n          pointerEvents: 'none'\n        } : {}\n      }, $gridBody);\n      var $gridHelp = h('footer', {\n        staticClass: 'border-top small text-muted text-center bg-light',\n        attrs: {\n          id: idGridHelp\n        }\n      }, [h('div', {\n        staticClass: 'small'\n      }, this.labelHelp)]);\n      var $grid = h('div', {\n        ref: 'grid',\n        staticClass: 'form-control h-auto text-center p-0 mb-0',\n        attrs: {\n          id: idGrid,\n          role: 'application',\n          tabindex: this.disabled ? null : '0',\n          'data-month': activeYMD.slice(0, -3),\n          // `YYYY-MM`, mainly for testing\n          // tabindex: this.disabled ? null : '0',\n          'aria-roledescription': this.labelCalendar || null,\n          'aria-labelledby': idGridCaption,\n          'aria-describedby': idGridHelp,\n          // `aria-readonly` is not considered valid on `role=\"application\"`\n          // https://www.w3.org/TR/wai-aria-1.1/#aria-readonly\n          // 'aria-readonly': this.readonly && !this.disabled ? 'true' : null,\n          'aria-disabled': this.disabled ? 'true' : null,\n          'aria-activedescendant': idActive\n        },\n        on: {\n          keydown: this.onKeydownGrid,\n          focus: this.setGridFocusFlag,\n          blur: this.setGridFocusFlag\n        }\n      }, [$gridCaption, $gridWeekDays, $gridBody, $gridHelp]); // Optional bottom slot\n\n      var $slot = this.normalizeSlot('default');\n      $slot = $slot ? h('footer', {\n        staticClass: 'mt-2'\n      }, $slot) : h();\n      var $widget = h('div', {\n        class: this.block ? 'd-block' : 'd-inline-block',\n        style: this.block ? {} : {\n          width: this.width\n        },\n        attrs: {\n          id: idWidget,\n          dir: isRTL ? 'rtl' : 'ltr',\n          lang: this.computedLocale || null,\n          role: 'group',\n          'aria-disabled': this.disabled ? 'true' : null,\n          // If datepicker controls an input, this will specify the ID of the input\n          'aria-controls': this.ariaControls || null,\n          // This should be a prop (so it can be changed to Date picker, etc, localized\n          'aria-roledescription': this.roleDescription || null,\n          'aria-describedby': [// Should the attr (if present) go last?\n          // Or should this attr be a prop?\n          this.$attrs['aria-describedby'], idValue, idGridHelp].filter(identity).join(' ')\n        },\n        on: {\n          keydown: this.onKeydownWrapper\n        }\n      }, [$header, $nav, $grid, $slot]); // Wrap in an outer div that can be styled\n\n      return h('div', {\n        staticClass: 'b-calendar',\n        // We use a style here rather than class `d-inline-block` so that users can\n        // override the display value (`d-*` classes use the `!important` flag)\n        style: this.block ? {} : {\n          display: 'inline-block'\n        }\n      }, [$widget]);\n    }\n  });\n\n  var CalendarPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BCalendar: BCalendar\n    }\n  });\n\n  /**\n   * @param {string} prefix\n   * @param {string} value\n   */\n\n  var prefixPropName = function prefixPropName(prefix, value) {\n    return prefix + upperFirst(value);\n  };\n\n  /**\n   * @param {string} prefix\n   * @param {string} value\n   */\n\n  var unprefixPropName = function unprefixPropName(prefix, value) {\n    return lowerFirst(value.replace(prefix, ''));\n  };\n\n  /**\n   * Copies props from one array/object to a new array/object. Prop values\n   * are also cloned as new references to prevent possible mutation of original\n   * prop object values. Optionally accepts a function to transform the prop name.\n   *\n   * @param {[]|{}} props\n   * @param {Function} transformFn\n   */\n\n  var copyProps = function copyProps(props) {\n    var transformFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;\n\n    if (isArray(props)) {\n      return props.map(transformFn);\n    } // Props as an object.\n\n\n    var copied = {};\n\n    for (var prop in props) {\n      /* istanbul ignore else */\n      // eslint-disable-next-line no-prototype-builtins\n      if (props.hasOwnProperty(prop)) {\n        // If the prop value is an object, do a shallow clone to prevent\n        // potential mutations to the original object.\n        copied[transformFn(prop)] = isObject(props[prop]) ? clone(props[prop]) : props[prop];\n      }\n    }\n\n    return copied;\n  };\n\n  // @vue/component\n  var cardMixin = {\n    props: {\n      tag: {\n        type: String,\n        default: 'div'\n      },\n      bgVariant: {\n        type: String,\n        default: null\n      },\n      borderVariant: {\n        type: String,\n        default: null\n      },\n      textVariant: {\n        type: String,\n        default: null\n      }\n    }\n  };\n\n  var props$6 = {\n    title: {\n      type: String,\n      default: ''\n    },\n    titleTag: {\n      type: String,\n      default: 'h4'\n    }\n  }; // @vue/component\n\n  var BCardTitle =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BCardTitle',\n    functional: true,\n    props: props$6,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      return h(props.titleTag, a(data, {\n        staticClass: 'card-title'\n      }), children || props.title);\n    }\n  });\n\n  var NAME$7 = 'BCardSubTitle';\n  var props$7 = {\n    subTitle: {\n      type: String,\n      default: ''\n    },\n    subTitleTag: {\n      type: String,\n      default: 'h6'\n    },\n    subTitleTextVariant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$7, 'subTitleTextVariant');\n      }\n    }\n  }; // @vue/component\n\n  var BCardSubTitle =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$7,\n    functional: true,\n    props: props$7,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      return h(props.subTitleTag, a(data, {\n        staticClass: 'card-subtitle',\n        class: [props.subTitleTextVariant ? \"text-\".concat(props.subTitleTextVariant) : null]\n      }), children || props.subTitle);\n    }\n  });\n\n  var props$8 = _objectSpread2({}, copyProps(cardMixin.props, prefixPropName.bind(null, 'body')), {\n    bodyClass: {\n      type: [String, Object, Array],\n      default: null\n    }\n  }, props$6, {}, props$7, {\n    overlay: {\n      type: Boolean,\n      default: false\n    }\n  }); // @vue/component\n\n  var BCardBody =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BCardBody',\n    functional: true,\n    props: props$8,\n    render: function render(h, _ref) {\n      var _ref2;\n\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      var cardTitle = h();\n      var cardSubTitle = h();\n      var cardContent = children || [h()];\n\n      if (props.title) {\n        cardTitle = h(BCardTitle, {\n          props: pluckProps(props$6, props)\n        });\n      }\n\n      if (props.subTitle) {\n        cardSubTitle = h(BCardSubTitle, {\n          props: pluckProps(props$7, props),\n          class: ['mb-2']\n        });\n      }\n\n      return h(props.bodyTag, a(data, {\n        staticClass: 'card-body',\n        class: [(_ref2 = {\n          'card-img-overlay': props.overlay\n        }, _defineProperty(_ref2, \"bg-\".concat(props.bodyBgVariant), props.bodyBgVariant), _defineProperty(_ref2, \"border-\".concat(props.bodyBorderVariant), props.bodyBorderVariant), _defineProperty(_ref2, \"text-\".concat(props.bodyTextVariant), props.bodyTextVariant), _ref2), props.bodyClass || {}]\n      }), [cardTitle, cardSubTitle].concat(_toConsumableArray(cardContent)));\n    }\n  });\n\n  var props$9 = _objectSpread2({}, copyProps(cardMixin.props, prefixPropName.bind(null, 'header')), {\n    header: {\n      type: String,\n      default: null\n    },\n    headerHtml: {\n      type: String,\n      default: null\n    },\n    headerClass: {\n      type: [String, Object, Array],\n      default: null\n    }\n  }); // @vue/component\n\n  var BCardHeader =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BCardHeader',\n    functional: true,\n    props: props$9,\n    render: function render(h, _ref) {\n      var _ref2;\n\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      return h(props.headerTag, a(data, {\n        staticClass: 'card-header',\n        class: [props.headerClass, (_ref2 = {}, _defineProperty(_ref2, \"bg-\".concat(props.headerBgVariant), props.headerBgVariant), _defineProperty(_ref2, \"border-\".concat(props.headerBorderVariant), props.headerBorderVariant), _defineProperty(_ref2, \"text-\".concat(props.headerTextVariant), props.headerTextVariant), _ref2)]\n      }), children || [h('div', {\n        domProps: htmlOrText(props.headerHtml, props.header)\n      })]);\n    }\n  });\n\n  var props$a = _objectSpread2({}, copyProps(cardMixin.props, prefixPropName.bind(null, 'footer')), {\n    footer: {\n      type: String,\n      default: null\n    },\n    footerHtml: {\n      type: String,\n      default: null\n    },\n    footerClass: {\n      type: [String, Object, Array],\n      default: null\n    }\n  }); // @vue/component\n\n  var BCardFooter =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BCardFooter',\n    functional: true,\n    props: props$a,\n    render: function render(h, _ref) {\n      var _ref2;\n\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      return h(props.footerTag, a(data, {\n        staticClass: 'card-footer',\n        class: [props.footerClass, (_ref2 = {}, _defineProperty(_ref2, \"bg-\".concat(props.footerBgVariant), props.footerBgVariant), _defineProperty(_ref2, \"border-\".concat(props.footerBorderVariant), props.footerBorderVariant), _defineProperty(_ref2, \"text-\".concat(props.footerTextVariant), props.footerTextVariant), _ref2)]\n      }), children || [h('div', {\n        domProps: htmlOrText(props.footerHtml, props.footer)\n      })]);\n    }\n  });\n\n  var props$b = {\n    src: {\n      type: String,\n      default: null,\n      required: true\n    },\n    alt: {\n      type: String,\n      default: null\n    },\n    top: {\n      type: Boolean,\n      default: false\n    },\n    bottom: {\n      type: Boolean,\n      default: false\n    },\n    start: {\n      type: Boolean,\n      default: false\n    },\n    left: {\n      // alias of 'start'\n      type: Boolean,\n      default: false\n    },\n    end: {\n      type: Boolean,\n      default: false\n    },\n    right: {\n      // alias of 'end'\n      type: Boolean,\n      default: false\n    },\n    height: {\n      type: [Number, String],\n      default: null\n    },\n    width: {\n      type: [Number, String],\n      default: null\n    }\n  }; // @vue/component\n\n  var BCardImg =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BCardImg',\n    functional: true,\n    props: props$b,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data;\n      var baseClass = 'card-img';\n\n      if (props.top) {\n        baseClass += '-top';\n      } else if (props.right || props.end) {\n        baseClass += '-right';\n      } else if (props.bottom) {\n        baseClass += '-bottom';\n      } else if (props.left || props.start) {\n        baseClass += '-left';\n      }\n\n      return h('img', a(data, {\n        class: [baseClass],\n        attrs: {\n          src: props.src,\n          alt: props.alt,\n          height: props.height,\n          width: props.width\n        }\n      }));\n    }\n  });\n\n  var cardImgProps = copyProps(props$b, prefixPropName.bind(null, 'img'));\n  cardImgProps.imgSrc.required = false;\n  var props$c = _objectSpread2({}, props$8, {}, props$9, {}, props$a, {}, cardImgProps, {}, copyProps(cardMixin.props), {\n    align: {\n      type: String,\n      default: null\n    },\n    noBody: {\n      type: Boolean,\n      default: false\n    }\n  }); // @vue/component\n\n  var BCard =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BCard',\n    functional: true,\n    props: props$c,\n    render: function render(h, _ref) {\n      var _class;\n\n      var props = _ref.props,\n          data = _ref.data,\n          slots = _ref.slots,\n          scopedSlots = _ref.scopedSlots;\n      var $slots = slots(); // Vue < 2.6.x may return undefined for scopedSlots\n\n      var $scopedSlots = scopedSlots || {}; // Create placeholder elements for each section\n\n      var imgFirst = h();\n      var header = h();\n      var content = h();\n      var footer = h();\n      var imgLast = h();\n\n      if (props.imgSrc) {\n        var img = h(BCardImg, {\n          props: pluckProps(cardImgProps, props, unprefixPropName.bind(null, 'img'))\n        });\n\n        if (props.imgBottom) {\n          imgLast = img;\n        } else {\n          imgFirst = img;\n        }\n      }\n\n      if (props.header || hasNormalizedSlot('header', $scopedSlots, $slots)) {\n        header = h(BCardHeader, {\n          props: pluckProps(props$9, props)\n        }, normalizeSlot('header', {}, $scopedSlots, $slots));\n      }\n\n      content = normalizeSlot('default', {}, $scopedSlots, $slots) || [];\n\n      if (!props.noBody) {\n        // Wrap content in card-body\n        content = [h(BCardBody, {\n          props: pluckProps(props$8, props)\n        }, _toConsumableArray(content))];\n      }\n\n      if (props.footer || hasNormalizedSlot('footer', $scopedSlots, $slots)) {\n        footer = h(BCardFooter, {\n          props: pluckProps(props$a, props)\n        }, normalizeSlot('footer', {}, $scopedSlots, $slots));\n      }\n\n      return h(props.tag, a(data, {\n        staticClass: 'card',\n        class: (_class = {\n          'flex-row': props.imgLeft || props.imgStart,\n          'flex-row-reverse': (props.imgRight || props.imgEnd) && !(props.imgLeft || props.imgStart)\n        }, _defineProperty(_class, \"text-\".concat(props.align), props.align), _defineProperty(_class, \"bg-\".concat(props.bgVariant), props.bgVariant), _defineProperty(_class, \"border-\".concat(props.borderVariant), props.borderVariant), _defineProperty(_class, \"text-\".concat(props.textVariant), props.textVariant), _class)\n      }), [imgFirst, header].concat(_toConsumableArray(content), [footer, imgLast]));\n    }\n  });\n\n  var OBSERVER_PROP_NAME = '__bv__visibility_observer';\n  var onlyDgitsRE = /^\\d+$/;\n\n  var VisibilityObserver =\n  /*#__PURE__*/\n  function () {\n    function VisibilityObserver(el, options, vnode) {\n      _classCallCheck(this, VisibilityObserver);\n\n      this.el = el;\n      this.callback = options.callback;\n      this.margin = options.margin || 0;\n      this.once = options.once || false;\n      this.observer = null;\n      this.visible = undefined;\n      this.doneOnce = false; // Create the observer instance (if possible)\n\n      this.createObserver(vnode);\n    }\n\n    _createClass(VisibilityObserver, [{\n      key: \"createObserver\",\n      value: function createObserver(vnode) {\n        var _this = this;\n\n        // Remove any previous observer\n        if (this.observer) {\n          /* istanbul ignore next */\n          this.stop();\n        } // Should only be called once and `callback` prop should be a function\n\n\n        if (this.doneOnce || !isFunction(this.callback)) {\n          /* istanbul ignore next */\n          return;\n        } // Create the observer instance\n\n\n        try {\n          // Future: Possibly add in other modifiers for left/right/top/bottom\n          // offsets, root element reference, and thresholds\n          this.observer = new IntersectionObserver(this.handler.bind(this), {\n            // `null` = 'viewport'\n            root: null,\n            // Pixels away from view port to consider \"visible\"\n            rootMargin: this.margin,\n            // Intersection ratio of el and root (as a value from 0 to 1)\n            threshold: 0\n          });\n        } catch (_unused) {\n          // No IntersectionObserver support, so just stop trying to observe\n          this.doneOnce = true;\n          this.observer = undefined;\n          this.callback(null);\n          return;\n        } // Start observing in a `$nextTick()` (to allow DOM to complete rendering)\n\n        /* istanbul ignore next: IntersectionObserver not supported in JSDOM */\n\n\n        vnode.context.$nextTick(function () {\n          requestAF(function () {\n            // Placed in an `if` just in case we were destroyed before\n            // this `requestAnimationFrame` runs\n            if (_this.observer) {\n              _this.observer.observe(_this.el);\n            }\n          });\n        });\n      }\n    }, {\n      key: \"handler\",\n      value: function handler(entries)\n      /* istanbul ignore next: IntersectionObserver not supported in JSDOM */\n      {\n        var entry = entries ? entries[0] : {};\n        var isIntersecting = Boolean(entry.isIntersecting || entry.intersectionRatio > 0.0);\n\n        if (isIntersecting !== this.visible) {\n          this.visible = isIntersecting;\n          this.callback(isIntersecting);\n\n          if (this.once && this.visible) {\n            this.doneOnce = true;\n            this.stop();\n          }\n        }\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        var observer = this.observer;\n        /* istanbul ignore next */\n\n        if (observer && observer.disconnect) {\n          observer.disconnect();\n        }\n\n        this.observer = null;\n      }\n    }]);\n\n    return VisibilityObserver;\n  }();\n\n  var destroy = function destroy(el) {\n    var observer = el[OBSERVER_PROP_NAME];\n\n    if (observer && observer.stop) {\n      observer.stop();\n    }\n\n    delete el[OBSERVER_PROP_NAME];\n  };\n\n  var bind = function bind(el, _ref, vnode) {\n    var value = _ref.value,\n        modifiers = _ref.modifiers;\n    // `value` is the callback function\n    var options = {\n      margin: '0px',\n      once: false,\n      callback: value\n    }; // Parse modifiers\n\n    keys(modifiers).forEach(function (mod) {\n      /* istanbul ignore else: Until <b-img-lazy> is switched to use this directive */\n      if (onlyDgitsRE.test(mod)) {\n        options.margin = \"\".concat(mod, \"px\");\n      } else if (mod.toLowerCase() === 'once') {\n        options.once = true;\n      }\n    }); // Destroy any previous observer\n\n    destroy(el); // Create new observer\n\n    el[OBSERVER_PROP_NAME] = new VisibilityObserver(el, options, vnode); // Store the current modifiers on the object (cloned)\n\n    el[OBSERVER_PROP_NAME]._prevModifiers = clone(modifiers);\n  }; // When the directive options may have been updated (or element)\n\n\n  var componentUpdated = function componentUpdated(el, _ref2, vnode) {\n    var value = _ref2.value,\n        oldValue = _ref2.oldValue,\n        modifiers = _ref2.modifiers;\n    // Compare value/oldValue and modifiers to see if anything has changed\n    // and if so, destroy old observer and create new observer\n\n    /* istanbul ignore next */\n    modifiers = clone(modifiers);\n    /* istanbul ignore next */\n\n    if (el && (value !== oldValue || !el[OBSERVER_PROP_NAME] || !looseEqual(modifiers, el[OBSERVER_PROP_NAME]._prevModifiers))) {\n      // Re-bind on element\n      bind(el, {\n        value: value,\n        modifiers: modifiers\n      }, vnode);\n    }\n  }; // When directive un-binds from element\n\n\n  var unbind = function unbind(el) {\n    // Remove the observer\n    destroy(el);\n  }; // Export the directive\n\n\n  var VBVisible = {\n    bind: bind,\n    componentUpdated: componentUpdated,\n    unbind: unbind\n  };\n\n  var NAME$8 = 'BImg'; // Blank image with fill template\n\n  var BLANK_TEMPLATE = '<svg width=\"%{w}\" height=\"%{h}\" ' + 'xmlns=\"http://www.w3.org/2000/svg\" ' + 'viewBox=\"0 0 %{w} %{h}\" preserveAspectRatio=\"none\">' + '<rect width=\"100%\" height=\"100%\" style=\"fill:%{f};\"></rect>' + '</svg>';\n  var props$d = {\n    src: {\n      type: String,\n      default: null\n    },\n    srcset: {\n      type: [String, Array],\n      default: null\n    },\n    sizes: {\n      type: [String, Array],\n      default: null\n    },\n    alt: {\n      type: String,\n      default: null\n    },\n    width: {\n      type: [Number, String],\n      default: null\n    },\n    height: {\n      type: [Number, String],\n      default: null\n    },\n    block: {\n      type: Boolean,\n      default: false\n    },\n    fluid: {\n      type: Boolean,\n      default: false\n    },\n    fluidGrow: {\n      // Gives fluid images class `w-100` to make them grow to fit container\n      type: Boolean,\n      default: false\n    },\n    rounded: {\n      // rounded can be:\n      //   false: no rounding of corners\n      //   true: slightly rounded corners\n      //   'top': top corners rounded\n      //   'right': right corners rounded\n      //   'bottom': bottom corners rounded\n      //   'left': left corners rounded\n      //   'circle': circle/oval\n      //   '0': force rounding off\n      type: [Boolean, String],\n      default: false\n    },\n    thumbnail: {\n      type: Boolean,\n      default: false\n    },\n    left: {\n      type: Boolean,\n      default: false\n    },\n    right: {\n      type: Boolean,\n      default: false\n    },\n    center: {\n      type: Boolean,\n      default: false\n    },\n    blank: {\n      type: Boolean,\n      default: false\n    },\n    blankColor: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$8, 'blankColor');\n      }\n    }\n  }; // --- Helper methods ---\n\n  var makeBlankImgSrc = function makeBlankImgSrc(width, height, color) {\n    var src = encodeURIComponent(BLANK_TEMPLATE.replace('%{w}', toString$1(width)).replace('%{h}', toString$1(height)).replace('%{f}', color));\n    return \"data:image/svg+xml;charset=UTF-8,\".concat(src);\n  }; // @vue/component\n\n\n  var BImg =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$8,\n    functional: true,\n    props: props$d,\n    render: function render(h, _ref) {\n      var _class;\n\n      var props = _ref.props,\n          data = _ref.data;\n      var src = props.src;\n      var width = toInteger(props.width) || null;\n      var height = toInteger(props.height) || null;\n      var align = null;\n      var block = props.block;\n      var srcset = concat(props.srcset).filter(identity).join(',');\n      var sizes = concat(props.sizes).filter(identity).join(',');\n\n      if (props.blank) {\n        if (!height && width) {\n          height = width;\n        } else if (!width && height) {\n          width = height;\n        }\n\n        if (!width && !height) {\n          width = 1;\n          height = 1;\n        } // Make a blank SVG image\n\n\n        src = makeBlankImgSrc(width, height, props.blankColor || 'transparent'); // Disable srcset and sizes\n\n        srcset = null;\n        sizes = null;\n      }\n\n      if (props.left) {\n        align = 'float-left';\n      } else if (props.right) {\n        align = 'float-right';\n      } else if (props.center) {\n        align = 'mx-auto';\n        block = true;\n      }\n\n      return h('img', a(data, {\n        attrs: {\n          src: src,\n          alt: props.alt,\n          width: width ? toString$1(width) : null,\n          height: height ? toString$1(height) : null,\n          srcset: srcset || null,\n          sizes: sizes || null\n        },\n        class: (_class = {\n          'img-thumbnail': props.thumbnail,\n          'img-fluid': props.fluid || props.fluidGrow,\n          'w-100': props.fluidGrow,\n          rounded: props.rounded === '' || props.rounded === true\n        }, _defineProperty(_class, \"rounded-\".concat(props.rounded), isString(props.rounded) && props.rounded !== ''), _defineProperty(_class, align, align), _defineProperty(_class, 'd-block', block), _class)\n      }));\n    }\n  });\n\n  var NAME$9 = 'BImgLazy';\n  var props$e = {\n    src: {\n      type: String,\n      default: null,\n      required: true\n    },\n    srcset: {\n      type: [String, Array],\n      default: null\n    },\n    sizes: {\n      type: [String, Array],\n      default: null\n    },\n    alt: {\n      type: String,\n      default: null\n    },\n    width: {\n      type: [Number, String],\n      default: null\n    },\n    height: {\n      type: [Number, String],\n      default: null\n    },\n    blankSrc: {\n      // If null, a blank image is generated\n      type: String,\n      default: null\n    },\n    blankColor: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$9, 'blankColor');\n      }\n    },\n    blankWidth: {\n      type: [Number, String],\n      default: null\n    },\n    blankHeight: {\n      type: [Number, String],\n      default: null\n    },\n    show: {\n      type: Boolean,\n      default: false\n    },\n    fluid: {\n      type: Boolean,\n      default: false\n    },\n    fluidGrow: {\n      type: Boolean,\n      default: false\n    },\n    block: {\n      type: Boolean,\n      default: false\n    },\n    thumbnail: {\n      type: Boolean,\n      default: false\n    },\n    rounded: {\n      type: [Boolean, String],\n      default: false\n    },\n    left: {\n      type: Boolean,\n      default: false\n    },\n    right: {\n      type: Boolean,\n      default: false\n    },\n    center: {\n      type: Boolean,\n      default: false\n    },\n    offset: {\n      // Distance away from viewport (in pixels) before being\n      // considered \"visible\"\n      type: [Number, String],\n      default: 360\n    }\n  }; // @vue/component\n\n  var BImgLazy =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$9,\n    directives: {\n      bVisible: VBVisible\n    },\n    props: props$e,\n    data: function data() {\n      return {\n        isShown: this.show\n      };\n    },\n    computed: {\n      computedSrc: function computedSrc() {\n        return !this.blankSrc || this.isShown ? this.src : this.blankSrc;\n      },\n      computedBlank: function computedBlank() {\n        return !(this.isShown || this.blankSrc);\n      },\n      computedWidth: function computedWidth() {\n        return this.isShown ? this.width : this.blankWidth || this.width;\n      },\n      computedHeight: function computedHeight() {\n        return this.isShown ? this.height : this.blankHeight || this.height;\n      },\n      computedSrcset: function computedSrcset() {\n        var srcset = concat(this.srcset).filter(identity).join(',');\n        return !this.blankSrc || this.isShown ? srcset : null;\n      },\n      computedSizes: function computedSizes() {\n        var sizes = concat(this.sizes).filter(identity).join(',');\n        return !this.blankSrc || this.isShown ? sizes : null;\n      }\n    },\n    watch: {\n      show: function show(newVal, oldVal) {\n        if (newVal !== oldVal) {\n          // If IntersectionObserver support is not available, image is always shown\n          var visible = hasIntersectionObserverSupport ? newVal : true;\n          this.isShown = visible;\n\n          if (visible !== newVal) {\n            // Ensure the show prop is synced (when no IntersectionObserver)\n            this.$nextTick(this.updateShowProp);\n          }\n        }\n      },\n      isShown: function isShown(newVal, oldVal) {\n        if (newVal !== oldVal) {\n          // Update synched show prop\n          this.updateShowProp();\n        }\n      }\n    },\n    mounted: function mounted() {\n      // If IntersectionObserver is not available, image is always shown\n      this.isShown = hasIntersectionObserverSupport ? this.show : true;\n    },\n    methods: {\n      updateShowProp: function updateShowProp() {\n        this.$emit('update:show', this.isShown);\n      },\n      doShow: function doShow(visible) {\n        // If IntersectionObserver is not supported, the callback\n        // will be called with `null` rather than `true` or `false`\n        if ((visible || visible === null) && !this.isShown) {\n          this.isShown = true;\n        }\n      }\n    },\n    render: function render(h) {\n      var directives = [];\n\n      if (!this.isShown) {\n        var _modifiers;\n\n        // We only add the visible directive if we are not shown\n        directives.push({\n          // Visible directive will silently do nothing if\n          // IntersectionObserver is not supported\n          name: 'b-visible',\n          // Value expects a callback (passed one arg of `visible` = `true` or `false`)\n          value: this.doShow,\n          modifiers: (_modifiers = {}, _defineProperty(_modifiers, \"\".concat(toInteger(this.offset) || 0), true), _defineProperty(_modifiers, \"once\", true), _modifiers)\n        });\n      }\n\n      return h(BImg, {\n        directives: directives,\n        props: {\n          // Computed value props\n          src: this.computedSrc,\n          blank: this.computedBlank,\n          width: this.computedWidth,\n          height: this.computedHeight,\n          srcset: this.computedSrcset || null,\n          sizes: this.computedSizes || null,\n          // Passthrough props\n          alt: this.alt,\n          blankColor: this.blankColor,\n          fluid: this.fluid,\n          fluidGrow: this.fluidGrow,\n          block: this.block,\n          thumbnail: this.thumbnail,\n          rounded: this.rounded,\n          left: this.left,\n          right: this.right,\n          center: this.center\n        }\n      });\n    }\n  });\n\n  // The `omit()` util creates a new object, so we can just pass the original props\n\n  var lazyProps = omit(props$e, ['left', 'right', 'center', 'block', 'rounded', 'thumbnail', 'fluid', 'fluidGrow']);\n  var props$f = _objectSpread2({}, lazyProps, {\n    top: {\n      type: Boolean,\n      default: false\n    },\n    bottom: {\n      type: Boolean,\n      default: false\n    },\n    start: {\n      type: Boolean,\n      default: false\n    },\n    left: {\n      // alias of 'start'\n      type: Boolean,\n      default: false\n    },\n    end: {\n      type: Boolean,\n      default: false\n    },\n    right: {\n      // alias of 'end'\n      type: Boolean,\n      default: false\n    }\n  }); // @vue/component\n\n  var BCardImgLazy =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BCardImgLazy',\n    functional: true,\n    props: props$f,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data;\n      var baseClass = 'card-img';\n\n      if (props.top) {\n        baseClass += '-top';\n      } else if (props.right || props.end) {\n        baseClass += '-right';\n      } else if (props.bottom) {\n        baseClass += '-bottom';\n      } else if (props.left || props.start) {\n        baseClass += '-left';\n      } // False out the left/center/right props before passing to b-img-lazy\n\n\n      var lazyProps = _objectSpread2({}, props, {\n        left: false,\n        right: false,\n        center: false\n      });\n\n      return h(BImgLazy, a(data, {\n        class: [baseClass],\n        props: lazyProps\n      }));\n    }\n  });\n\n  var props$g = {\n    textTag: {\n      type: String,\n      default: 'p'\n    }\n  }; // @vue/component\n\n  var BCardText =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BCardText',\n    functional: true,\n    props: props$g,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      return h(props.textTag, a(data, {\n        staticClass: 'card-text'\n      }), children);\n    }\n  });\n\n  var props$h = {\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    deck: {\n      type: Boolean,\n      default: false\n    },\n    columns: {\n      type: Boolean,\n      default: false\n    }\n  }; // @vue/component\n\n  var BCardGroup =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BCardGroup',\n    functional: true,\n    props: props$h,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      return h(props.tag, a(data, {\n        class: props.deck ? 'card-deck' : props.columns ? 'card-columns' : 'card-group'\n      }), children);\n    }\n  });\n\n  var CardPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BCard: BCard,\n      BCardHeader: BCardHeader,\n      BCardBody: BCardBody,\n      BCardTitle: BCardTitle,\n      BCardSubTitle: BCardSubTitle,\n      BCardFooter: BCardFooter,\n      BCardImg: BCardImg,\n      BCardImgLazy: BCardImgLazy,\n      BCardText: BCardText,\n      BCardGroup: BCardGroup\n    }\n  });\n\n  var noop = function noop() {};\n\n  /**\n   * Observe a DOM element changes, falls back to eventListener mode\n   * @param {Element} el The DOM element to observe\n   * @param {Function} callback callback to be called on change\n   * @param {object} [options={childList: true, subtree: true}] observe options\n   * @see http://stackoverflow.com/questions/3219758\n   */\n\n  var observeDom = function observeDom(el, callback, options)\n  /* istanbul ignore next: difficult to test in JSDOM */\n  {\n    // Handle cases where we might be passed a Vue instance\n    el = el ? el.$el || el : null; // Early exit when we have no element\n\n    /* istanbul ignore next: difficult to test in JSDOM */\n\n    if (!isElement(el)) {\n      return null;\n    } // Exit and throw a warning when `MutationObserver` isn't available\n\n\n    if (warnNoMutationObserverSupport('observeDom')) {\n      return null;\n    } // Define a new observer\n\n\n    var obs = new MutationObs(function (mutations) {\n      var changed = false; // A mutation can contain several change records, so we loop\n      // through them to see what has changed\n      // We break out of the loop early if any \"significant\" change\n      // has been detected\n\n      for (var i = 0; i < mutations.length && !changed; i++) {\n        // The mutation record\n        var mutation = mutations[i]; // Mutation type\n\n        var type = mutation.type; // DOM node (could be any DOM node type - HTMLElement, Text, comment, etc.)\n\n        var target = mutation.target; // Detect whether a change happened based on type and target\n\n        if (type === 'characterData' && target.nodeType === Node.TEXT_NODE) {\n          // We ignore nodes that are not TEXT (i.e. comments, etc)\n          // as they don't change layout\n          changed = true;\n        } else if (type === 'attributes') {\n          changed = true;\n        } else if (type === 'childList' && (mutation.addedNodes.length > 0 || mutation.removedNodes.length > 0)) {\n          // This includes HTMLElement and text nodes being\n          // added/removed/re-arranged\n          changed = true;\n        }\n      } // We only call the callback if a change that could affect\n      // layout/size truely happened\n\n\n      if (changed) {\n        callback();\n      }\n    }); // Have the observer observe foo for changes in children, etc\n\n    obs.observe(el, _objectSpread2({\n      childList: true,\n      subtree: true\n    }, options)); // We return a reference to the observer so that `obs.disconnect()`\n    // can be called if necessary\n    // To reduce overhead when the root element is hidden\n\n    return obs;\n  };\n\n  var EVENT_OPTIONS_PASSIVE = {\n    passive: true\n  };\n  var EVENT_OPTIONS_NO_CAPTURE = {\n    passive: true,\n    capture: false\n  }; // --- Utils ---\n  // Normalize event options based on support of passive option\n  // Exported only for testing purposes\n\n  var parseEventOptions = function parseEventOptions(options) {\n    /* istanbul ignore else: can't test in JSDOM, as it supports passive */\n    if (hasPassiveEventSupport) {\n      return isObject(options) ? options : {\n        capture: !!options || false\n      };\n    } else {\n      // Need to translate to actual Boolean value\n      return !!(isObject(options) ? options.capture : options);\n    }\n  }; // Attach an event listener to an element\n\n  var eventOn = function eventOn(el, evtName, handler, options) {\n    if (el && el.addEventListener) {\n      el.addEventListener(evtName, handler, parseEventOptions(options));\n    }\n  }; // Remove an event listener from an element\n\n  var eventOff = function eventOff(el, evtName, handler, options) {\n    if (el && el.removeEventListener) {\n      el.removeEventListener(evtName, handler, parseEventOptions(options));\n    }\n  }; // Utility method to add/remove a event listener based on first argument (boolean)\n  // It passes all other arguments to the `eventOn()` or `eventOff` method\n\n  var eventOnOff = function eventOnOff(on) {\n    var method = on ? eventOn : eventOff;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    method.apply(void 0, args);\n  };\n\n  var NAME$a = 'BCarousel'; // Slide directional classes\n\n  var DIRECTION = {\n    next: {\n      dirClass: 'carousel-item-left',\n      overlayClass: 'carousel-item-next'\n    },\n    prev: {\n      dirClass: 'carousel-item-right',\n      overlayClass: 'carousel-item-prev'\n    }\n  }; // Fallback Transition duration (with a little buffer) in ms\n\n  var TRANS_DURATION = 600 + 50; // Time for mouse compat events to fire after touch\n\n  var TOUCH_EVENT_COMPAT_WAIT = 500; // Number of pixels to consider touch move a swipe\n\n  var SWIPE_THRESHOLD = 40; // PointerEvent pointer types\n\n  var PointerType = {\n    TOUCH: 'touch',\n    PEN: 'pen'\n  }; // Transition Event names\n\n  var TransitionEndEvents = {\n    WebkitTransition: 'webkitTransitionEnd',\n    MozTransition: 'transitionend',\n    OTransition: 'otransitionend oTransitionEnd',\n    transition: 'transitionend'\n  }; // Return the browser specific transitionEnd event name\n\n  var getTransitionEndEvent = function getTransitionEndEvent(el) {\n    for (var name in TransitionEndEvents) {\n      if (!isUndefined(el.style[name])) {\n        return TransitionEndEvents[name];\n      }\n    } // Fallback\n\n    /* istanbul ignore next */\n\n\n    return null;\n  }; // @vue/component\n\n\n  var BCarousel =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$a,\n    mixins: [idMixin, normalizeSlotMixin],\n    provide: function provide() {\n      return {\n        bvCarousel: this\n      };\n    },\n    model: {\n      prop: 'value',\n      event: 'input'\n    },\n    props: {\n      labelPrev: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$a, 'labelPrev');\n        }\n      },\n      labelNext: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$a, 'labelNext');\n        }\n      },\n      labelGotoSlide: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$a, 'labelGotoSlide');\n        }\n      },\n      labelIndicators: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$a, 'labelIndicators');\n        }\n      },\n      interval: {\n        type: Number,\n        default: 5000\n      },\n      indicators: {\n        type: Boolean,\n        default: false\n      },\n      controls: {\n        type: Boolean,\n        default: false\n      },\n      noAnimation: {\n        // Disable slide/fade animation\n        type: Boolean,\n        default: false\n      },\n      fade: {\n        // Enable cross-fade animation instead of slide animation\n        type: Boolean,\n        default: false\n      },\n      noWrap: {\n        // Disable wrapping/looping when start/end is reached\n        type: Boolean,\n        default: false\n      },\n      noTouch: {\n        // Sniffed by carousel-slide\n        type: Boolean,\n        default: false\n      },\n      noHoverPause: {\n        // Disable pause on hover\n        type: Boolean,\n        default: false\n      },\n      imgWidth: {\n        // Sniffed by carousel-slide\n        type: [Number, String] // default: undefined\n\n      },\n      imgHeight: {\n        // Sniffed by carousel-slide\n        type: [Number, String] // default: undefined\n\n      },\n      background: {\n        type: String // default: undefined\n\n      },\n      value: {\n        type: Number,\n        default: 0\n      }\n    },\n    data: function data() {\n      return {\n        index: this.value || 0,\n        isSliding: false,\n        transitionEndEvent: null,\n        slides: [],\n        direction: null,\n        isPaused: !(toInteger(this.interval) > 0),\n        // Touch event handling values\n        touchStartX: 0,\n        touchDeltaX: 0\n      };\n    },\n    computed: {\n      numSlides: function numSlides() {\n        return this.slides.length;\n      }\n    },\n    watch: {\n      value: function value(newVal, oldVal) {\n        if (newVal !== oldVal) {\n          this.setSlide(toInteger(newVal) || 0);\n        }\n      },\n      interval: function interval(newVal, oldVal) {\n        if (newVal === oldVal) {\n          /* istanbul ignore next */\n          return;\n        }\n\n        if (!newVal) {\n          // Pausing slide show\n          this.pause(false);\n        } else {\n          // Restarting or Changing interval\n          this.pause(true);\n          this.start(false);\n        }\n      },\n      isPaused: function isPaused(newVal, oldVal) {\n        if (newVal !== oldVal) {\n          this.$emit(newVal ? 'paused' : 'unpaused');\n        }\n      },\n      index: function index(to, from) {\n        if (to === from || this.isSliding) {\n          /* istanbul ignore next */\n          return;\n        }\n\n        this.doSlide(to, from);\n      }\n    },\n    created: function created() {\n      // Create private non-reactive props\n      this._intervalId = null;\n      this._animationTimeout = null;\n      this._touchTimeout = null; // Set initial paused state\n\n      this.isPaused = !(toInteger(this.interval) > 0);\n    },\n    mounted: function mounted() {\n      // Cache current browser transitionend event name\n      this.transitionEndEvent = getTransitionEndEvent(this.$el) || null; // Get all slides\n\n      this.updateSlides(); // Observe child changes so we can update slide list\n\n      observeDom(this.$refs.inner, this.updateSlides.bind(this), {\n        subtree: false,\n        childList: true,\n        attributes: true,\n        attributeFilter: ['id']\n      });\n    },\n    beforeDestroy: function beforeDestroy() {\n      clearTimeout(this._animationTimeout);\n      clearTimeout(this._touchTimeout);\n      clearInterval(this._intervalId);\n      this._intervalId = null;\n      this._animationTimeout = null;\n      this._touchTimeout = null;\n    },\n    methods: {\n      // Set slide\n      setSlide: function setSlide(slide) {\n        var _this = this;\n\n        var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        // Don't animate when page is not visible\n\n        /* istanbul ignore if: difficult to test */\n        if (isBrowser && document.visibilityState && document.hidden) {\n          return;\n        }\n\n        var noWrap = this.noWrap;\n        var numSlides = this.numSlides; // Make sure we have an integer (you never know!)\n\n        slide = Math.floor(slide); // Don't do anything if nothing to slide to\n\n        if (numSlides === 0) {\n          return;\n        } // Don't change slide while transitioning, wait until transition is done\n\n\n        if (this.isSliding) {\n          // Schedule slide after sliding complete\n          this.$once('sliding-end', function () {\n            return _this.setSlide(slide, direction);\n          });\n          return;\n        }\n\n        this.direction = direction; // Set new slide index\n        // Wrap around if necessary (if no-wrap not enabled)\n\n        this.index = slide >= numSlides ? noWrap ? numSlides - 1 : 0 : slide < 0 ? noWrap ? 0 : numSlides - 1 : slide; // Ensure the v-model is synched up if no-wrap is enabled\n        // and user tried to slide pass either ends\n\n        if (noWrap && this.index !== slide && this.index !== this.value) {\n          this.$emit('input', this.index);\n        }\n      },\n      // Previous slide\n      prev: function prev() {\n        this.setSlide(this.index - 1, 'prev');\n      },\n      // Next slide\n      next: function next() {\n        this.setSlide(this.index + 1, 'next');\n      },\n      // Pause auto rotation\n      pause: function pause(evt) {\n        if (!evt) {\n          this.isPaused = true;\n        }\n\n        if (this._intervalId) {\n          clearInterval(this._intervalId);\n          this._intervalId = null;\n        }\n      },\n      // Start auto rotate slides\n      start: function start(evt) {\n        if (!evt) {\n          this.isPaused = false;\n        }\n        /* istanbul ignore next: most likely will never happen, but just in case */\n\n\n        if (this._intervalId) {\n          clearInterval(this._intervalId);\n          this._intervalId = null;\n        } // Don't start if no interval, or less than 2 slides\n\n\n        if (this.interval && this.numSlides > 1) {\n          this._intervalId = setInterval(this.next, Math.max(1000, this.interval));\n        }\n      },\n      // Restart auto rotate slides when focus/hover leaves the carousel\n      restart: function restart()\n      /* istanbul ignore next: difficult to test */\n      {\n        if (!this.$el.contains(document.activeElement)) {\n          this.start();\n        }\n      },\n      doSlide: function doSlide(to, from) {\n        var _this2 = this;\n\n        var isCycling = Boolean(this.interval); // Determine sliding direction\n\n        var direction = this.calcDirection(this.direction, from, to);\n        var overlayClass = direction.overlayClass;\n        var dirClass = direction.dirClass; // Determine current and next slides\n\n        var currentSlide = this.slides[from];\n        var nextSlide = this.slides[to]; // Don't do anything if there aren't any slides to slide to\n\n        if (!currentSlide || !nextSlide) {\n          /* istanbul ignore next */\n          return;\n        } // Start animating\n\n\n        this.isSliding = true;\n\n        if (isCycling) {\n          this.pause(false);\n        }\n\n        this.$emit('sliding-start', to); // Update v-model\n\n        this.$emit('input', this.index);\n\n        if (this.noAnimation) {\n          addClass(nextSlide, 'active');\n          removeClass(currentSlide, 'active');\n          this.isSliding = false; // Notify ourselves that we're done sliding (slid)\n\n          this.$nextTick(function () {\n            return _this2.$emit('sliding-end', to);\n          });\n        } else {\n          addClass(nextSlide, overlayClass); // Trigger a reflow of next slide\n\n          reflow(nextSlide);\n          addClass(currentSlide, dirClass);\n          addClass(nextSlide, dirClass); // Transition End handler\n\n          var called = false;\n          /* istanbul ignore next: difficult to test */\n\n          var onceTransEnd = function onceTransEnd() {\n            if (called) {\n              return;\n            }\n\n            called = true;\n            /* istanbul ignore if: transition events cant be tested in JSDOM */\n\n            if (_this2.transitionEndEvent) {\n              var events = _this2.transitionEndEvent.split(/\\s+/);\n\n              events.forEach(function (evt) {\n                return eventOff(currentSlide, evt, onceTransEnd, EVENT_OPTIONS_NO_CAPTURE);\n              });\n            }\n\n            _this2._animationTimeout = null;\n            removeClass(nextSlide, dirClass);\n            removeClass(nextSlide, overlayClass);\n            addClass(nextSlide, 'active');\n            removeClass(currentSlide, 'active');\n            removeClass(currentSlide, dirClass);\n            removeClass(currentSlide, overlayClass);\n            setAttr(currentSlide, 'aria-current', 'false');\n            setAttr(nextSlide, 'aria-current', 'true');\n            setAttr(currentSlide, 'aria-hidden', 'true');\n            setAttr(nextSlide, 'aria-hidden', 'false');\n            _this2.isSliding = false;\n            _this2.direction = null; // Notify ourselves that we're done sliding (slid)\n\n            _this2.$nextTick(function () {\n              return _this2.$emit('sliding-end', to);\n            });\n          }; // Set up transitionend handler\n\n          /* istanbul ignore if: transition events cant be tested in JSDOM */\n\n\n          if (this.transitionEndEvent) {\n            var events = this.transitionEndEvent.split(/\\s+/);\n            events.forEach(function (event) {\n              return eventOn(currentSlide, event, onceTransEnd, EVENT_OPTIONS_NO_CAPTURE);\n            });\n          } // Fallback to setTimeout()\n\n\n          this._animationTimeout = setTimeout(onceTransEnd, TRANS_DURATION);\n        }\n\n        if (isCycling) {\n          this.start(false);\n        }\n      },\n      // Update slide list\n      updateSlides: function updateSlides() {\n        this.pause(true); // Get all slides as DOM elements\n\n        this.slides = selectAll('.carousel-item', this.$refs.inner);\n        var numSlides = this.slides.length; // Keep slide number in range\n\n        var index = Math.max(0, Math.min(Math.floor(this.index), numSlides - 1));\n        this.slides.forEach(function (slide, idx) {\n          var n = idx + 1;\n\n          if (idx === index) {\n            addClass(slide, 'active');\n            setAttr(slide, 'aria-current', 'true');\n          } else {\n            removeClass(slide, 'active');\n            setAttr(slide, 'aria-current', 'false');\n          }\n\n          setAttr(slide, 'aria-posinset', String(n));\n          setAttr(slide, 'aria-setsize', String(numSlides));\n        }); // Set slide as active\n\n        this.setSlide(index);\n        this.start(this.isPaused);\n      },\n      calcDirection: function calcDirection() {\n        var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var curIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var nextIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n        if (!direction) {\n          return nextIndex > curIndex ? DIRECTION.next : DIRECTION.prev;\n        }\n\n        return DIRECTION[direction];\n      },\n      handleClick: function handleClick(evt, fn) {\n        var keyCode = evt.keyCode;\n\n        if (evt.type === 'click' || keyCode === KEY_CODES.SPACE || keyCode === KEY_CODES.ENTER) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          fn();\n        }\n      },\n      handleSwipe: function handleSwipe()\n      /* istanbul ignore next: JSDOM doesn't support touch events */\n      {\n        var absDeltaX = Math.abs(this.touchDeltaX);\n\n        if (absDeltaX <= SWIPE_THRESHOLD) {\n          return;\n        }\n\n        var direction = absDeltaX / this.touchDeltaX; // Reset touch delta X\n        // https://github.com/twbs/bootstrap/pull/28558\n\n        this.touchDeltaX = 0;\n\n        if (direction > 0) {\n          // Swipe left\n          this.prev();\n        } else if (direction < 0) {\n          // Swipe right\n          this.next();\n        }\n      },\n      touchStart: function touchStart(evt)\n      /* istanbul ignore next: JSDOM doesn't support touch events */\n      {\n        if (hasPointerEventSupport && PointerType[evt.pointerType.toUpperCase()]) {\n          this.touchStartX = evt.clientX;\n        } else if (!hasPointerEventSupport) {\n          this.touchStartX = evt.touches[0].clientX;\n        }\n      },\n      touchMove: function touchMove(evt)\n      /* istanbul ignore next: JSDOM doesn't support touch events */\n      {\n        // Ensure swiping with one touch and not pinching\n        if (evt.touches && evt.touches.length > 1) {\n          this.touchDeltaX = 0;\n        } else {\n          this.touchDeltaX = evt.touches[0].clientX - this.touchStartX;\n        }\n      },\n      touchEnd: function touchEnd(evt)\n      /* istanbul ignore next: JSDOM doesn't support touch events */\n      {\n        if (hasPointerEventSupport && PointerType[evt.pointerType.toUpperCase()]) {\n          this.touchDeltaX = evt.clientX - this.touchStartX;\n        }\n\n        this.handleSwipe(); // If it's a touch-enabled device, mouseenter/leave are fired as\n        // part of the mouse compatibility events on first tap - the carousel\n        // would stop cycling until user tapped out of it;\n        // here, we listen for touchend, explicitly pause the carousel\n        // (as if it's the second time we tap on it, mouseenter compat event\n        // is NOT fired) and after a timeout (to allow for mouse compatibility\n        // events to fire) we explicitly restart cycling\n\n        this.pause(false);\n\n        if (this._touchTimeout) {\n          clearTimeout(this._touchTimeout);\n        }\n\n        this._touchTimeout = setTimeout(this.start, TOUCH_EVENT_COMPAT_WAIT + Math.max(1000, this.interval));\n      }\n    },\n    render: function render(h) {\n      var _this3 = this;\n\n      // Wrapper for slides\n      var inner = h('div', {\n        ref: 'inner',\n        class: ['carousel-inner'],\n        attrs: {\n          id: this.safeId('__BV_inner_'),\n          role: 'list'\n        }\n      }, [this.normalizeSlot('default')]); // Prev and next controls\n\n      var controls = h();\n\n      if (this.controls) {\n        var prevHandler = function prevHandler(evt) {\n          /* istanbul ignore next */\n          if (!_this3.isSliding) {\n            _this3.handleClick(evt, _this3.prev);\n          } else {\n            evt.preventDefault();\n          }\n        };\n\n        var nextHandler = function nextHandler(evt) {\n          /* istanbul ignore next */\n          if (!_this3.isSliding) {\n            _this3.handleClick(evt, _this3.next);\n          } else {\n            evt.preventDefault();\n          }\n        };\n\n        controls = [h('a', {\n          class: ['carousel-control-prev'],\n          attrs: {\n            href: '#',\n            role: 'button',\n            'aria-controls': this.safeId('__BV_inner_'),\n            'aria-disabled': this.isSliding ? 'true' : null\n          },\n          on: {\n            click: prevHandler,\n            keydown: prevHandler\n          }\n        }, [h('span', {\n          class: ['carousel-control-prev-icon'],\n          attrs: {\n            'aria-hidden': 'true'\n          }\n        }), h('span', {\n          class: ['sr-only']\n        }, [this.labelPrev])]), h('a', {\n          class: ['carousel-control-next'],\n          attrs: {\n            href: '#',\n            role: 'button',\n            'aria-controls': this.safeId('__BV_inner_'),\n            'aria-disabled': this.isSliding ? 'true' : null\n          },\n          on: {\n            click: nextHandler,\n            keydown: nextHandler\n          }\n        }, [h('span', {\n          class: ['carousel-control-next-icon'],\n          attrs: {\n            'aria-hidden': 'true'\n          }\n        }), h('span', {\n          class: ['sr-only']\n        }, [this.labelNext])])];\n      } // Indicators\n\n\n      var indicators = h('ol', {\n        class: ['carousel-indicators'],\n        directives: [{\n          name: 'show',\n          rawName: 'v-show',\n          value: this.indicators,\n          expression: 'indicators'\n        }],\n        attrs: {\n          id: this.safeId('__BV_indicators_'),\n          'aria-hidden': this.indicators ? 'false' : 'true',\n          'aria-label': this.labelIndicators,\n          'aria-owns': this.safeId('__BV_inner_')\n        }\n      }, this.slides.map(function (slide, n) {\n        return h('li', {\n          key: \"slide_\".concat(n),\n          class: {\n            active: n === _this3.index\n          },\n          attrs: {\n            role: 'button',\n            id: _this3.safeId(\"__BV_indicator_\".concat(n + 1, \"_\")),\n            tabindex: _this3.indicators ? '0' : '-1',\n            'aria-current': n === _this3.index ? 'true' : 'false',\n            'aria-label': \"\".concat(_this3.labelGotoSlide, \" \").concat(n + 1),\n            'aria-describedby': _this3.slides[n].id || null,\n            'aria-controls': _this3.safeId('__BV_inner_')\n          },\n          on: {\n            click: function click(evt) {\n              _this3.handleClick(evt, function () {\n                _this3.setSlide(n);\n              });\n            },\n            keydown: function keydown(evt) {\n              _this3.handleClick(evt, function () {\n                _this3.setSlide(n);\n              });\n            }\n          }\n        });\n      }));\n      var on = {\n        mouseenter: this.noHoverPause ? noop : this.pause,\n        mouseleave: this.noHoverPause ? noop : this.restart,\n        focusin: this.pause,\n        focusout: this.restart,\n        keydown: function keydown(evt) {\n          if (/input|textarea/i.test(evt.target.tagName)) {\n            /* istanbul ignore next */\n            return;\n          }\n\n          var keyCode = evt.keyCode;\n\n          if (keyCode === KEY_CODES.LEFT || keyCode === KEY_CODES.RIGHT) {\n            evt.preventDefault();\n            evt.stopPropagation();\n\n            _this3[keyCode === KEY_CODES.LEFT ? 'prev' : 'next']();\n          }\n        }\n      }; // Touch support event handlers for environment\n\n      if (!this.noTouch && hasTouchSupport) {\n        // Attach appropriate listeners (prepend event name with '&' for passive mode)\n\n        /* istanbul ignore next: JSDOM doesn't support touch events */\n        if (hasPointerEventSupport) {\n          on['&pointerdown'] = this.touchStart;\n          on['&pointerup'] = this.touchEnd;\n        } else {\n          on['&touchstart'] = this.touchStart;\n          on['&touchmove'] = this.touchMove;\n          on['&touchend'] = this.touchEnd;\n        }\n      } // Return the carousel\n\n\n      return h('div', {\n        staticClass: 'carousel',\n        class: {\n          slide: !this.noAnimation,\n          'carousel-fade': !this.noAnimation && this.fade,\n          'pointer-event': !this.noTouch && hasTouchSupport && hasPointerEventSupport\n        },\n        style: {\n          background: this.background\n        },\n        attrs: {\n          role: 'region',\n          id: this.safeId(),\n          'aria-busy': this.isSliding ? 'true' : 'false'\n        },\n        on: on\n      }, [inner, controls, indicators]);\n    }\n  });\n\n  var props$i = {\n    imgSrc: {\n      type: String // default: undefined\n\n    },\n    imgAlt: {\n      type: String // default: undefined\n\n    },\n    imgWidth: {\n      type: [Number, String] // default: undefined\n\n    },\n    imgHeight: {\n      type: [Number, String] // default: undefined\n\n    },\n    imgBlank: {\n      type: Boolean,\n      default: false\n    },\n    imgBlankColor: {\n      type: String,\n      default: 'transparent'\n    },\n    contentVisibleUp: {\n      type: String\n    },\n    contentTag: {\n      type: String,\n      default: 'div'\n    },\n    caption: {\n      type: String\n    },\n    captionHtml: {\n      type: String\n    },\n    captionTag: {\n      type: String,\n      default: 'h3'\n    },\n    text: {\n      type: String\n    },\n    textHtml: {\n      type: String\n    },\n    textTag: {\n      type: String,\n      default: 'p'\n    },\n    background: {\n      type: String\n    }\n  }; // @vue/component\n\n  var BCarouselSlide =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BCarouselSlide',\n    mixins: [idMixin, normalizeSlotMixin],\n    inject: {\n      bvCarousel: {\n        default: function _default() {\n          return {\n            // Explicitly disable touch if not a child of carousel\n            noTouch: true\n          };\n        }\n      }\n    },\n    props: props$i,\n    computed: {\n      contentClasses: function contentClasses() {\n        return [this.contentVisibleUp ? 'd-none' : '', this.contentVisibleUp ? \"d-\".concat(this.contentVisibleUp, \"-block\") : ''];\n      },\n      computedWidth: function computedWidth() {\n        // Use local width, or try parent width\n        return this.imgWidth || this.bvCarousel.imgWidth || null;\n      },\n      computedHeight: function computedHeight() {\n        // Use local height, or try parent height\n        return this.imgHeight || this.bvCarousel.imgHeight || null;\n      }\n    },\n    render: function render(h) {\n      var noDrag = !this.bvCarousel.noTouch && hasTouchSupport;\n      var img = this.normalizeSlot('img');\n\n      if (!img && (this.imgSrc || this.imgBlank)) {\n        img = h(BImg, {\n          props: {\n            fluidGrow: true,\n            block: true,\n            src: this.imgSrc,\n            blank: this.imgBlank,\n            blankColor: this.imgBlankColor,\n            width: this.computedWidth,\n            height: this.computedHeight,\n            alt: this.imgAlt\n          },\n          // Touch support event handler\n          on: noDrag ? {\n            dragstart: function dragstart(e) {\n              /* istanbul ignore next: difficult to test in JSDOM */\n              e.preventDefault();\n            }\n          } : {}\n        });\n      }\n\n      if (!img) {\n        img = h();\n      }\n\n      var content = h();\n      var contentChildren = [this.caption || this.captionHtml ? h(this.captionTag, {\n        domProps: htmlOrText(this.captionHtml, this.caption)\n      }) : false, this.text || this.textHtml ? h(this.textTag, {\n        domProps: htmlOrText(this.textHtml, this.text)\n      }) : false, this.normalizeSlot('default') || false];\n\n      if (contentChildren.some(Boolean)) {\n        content = h(this.contentTag, {\n          staticClass: 'carousel-caption',\n          class: this.contentClasses\n        }, contentChildren.map(function (i) {\n          return i || h();\n        }));\n      }\n\n      return h('div', {\n        staticClass: 'carousel-item',\n        style: {\n          background: this.background || this.bvCarousel.background || null\n        },\n        attrs: {\n          id: this.safeId(),\n          role: 'listitem'\n        }\n      }, [img, content]);\n    }\n  });\n\n  var CarouselPlugin =\n  /*#__PURE*/\n  pluginFactory({\n    components: {\n      BCarousel: BCarousel,\n      BCarouselSlide: BCarouselSlide\n    }\n  });\n\n  // Generic collapse transion helper component\n\n  var onEnter = function onEnter(el) {\n    el.style.height = 0; // Animaton frame delay neeeded for `appear` to work\n\n    requestAF(function () {\n      reflow(el);\n      el.style.height = \"\".concat(el.scrollHeight, \"px\");\n    });\n  };\n\n  var onAfterEnter = function onAfterEnter(el) {\n    el.style.height = null;\n  };\n\n  var onLeave = function onLeave(el) {\n    el.style.height = 'auto';\n    el.style.display = 'block';\n    el.style.height = \"\".concat(getBCR(el).height, \"px\");\n    reflow(el);\n    el.style.height = 0;\n  };\n\n  var onAfterLeave = function onAfterLeave(el) {\n    el.style.height = null;\n  }; // Default transition props\n  // `appear` will use the enter classes\n\n\n  var TRANSITION_PROPS = {\n    css: true,\n    enterClass: '',\n    enterActiveClass: 'collapsing',\n    enterToClass: 'collapse show',\n    leaveClass: 'collapse show',\n    leaveActiveClass: 'collapsing',\n    leaveToClass: 'collapse'\n  }; // Default transition handlers\n  // `appear` will use the enter handlers\n\n  var TRANSITION_HANDLERS = {\n    enter: onEnter,\n    afterEnter: onAfterEnter,\n    leave: onLeave,\n    afterLeave: onAfterLeave\n  }; // @vue/component\n\n  var BVCollapse =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BVCollapse',\n    functional: true,\n    props: {\n      appear: {\n        // If `true` (and `visible` is `true` on mount), animate initially visible\n        type: Boolean,\n        default: false\n      }\n    },\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      return h('transition', // We merge in the `appear` prop last\n      a(data, {\n        props: TRANSITION_PROPS,\n        on: TRANSITION_HANDLERS\n      }, {\n        props: props\n      }), // Note: `<tranition>` supports a single root element only\n      children);\n    }\n  });\n\n  /**\n   * Issue #569: collapse::toggle::state triggered too many times\n   * @link https://github.com/bootstrap-vue/bootstrap-vue/issues/569\n   */\n  // @vue/component\n  var listenOnRootMixin = {\n    methods: {\n      /**\n       * Safely register event listeners on the root Vue node.\n       * While Vue automatically removes listeners for individual components,\n       * when a component registers a listener on root and is destroyed,\n       * this orphans a callback because the node is gone,\n       * but the root does not clear the callback.\n       *\n       * When registering a $root listener, it also registers a listener on\n       * the component's `beforeDestroy` hook to automatically remove the\n       * event listener from the $root instance.\n       *\n       * @param {string} event\n       * @param {function} callback\n       * @chainable\n       */\n      listenOnRoot: function listenOnRoot(event, callback) {\n        var _this = this;\n\n        this.$root.$on(event, callback);\n        this.$on('hook:beforeDestroy', function () {\n          _this.$root.$off(event, callback);\n        }); // Return this for easy chaining\n\n        return this;\n      },\n\n      /**\n       * Safely register a $once event listener on the root Vue node.\n       * While Vue automatically removes listeners for individual components,\n       * when a component registers a listener on root and is destroyed,\n       * this orphans a callback because the node is gone,\n       * but the root does not clear the callback.\n       *\n       * When registering a $root listener, it also registers a listener on\n       * the component's `beforeDestroy` hook to automatically remove the\n       * event listener from the $root instance.\n       *\n       * @param {string} event\n       * @param {function} callback\n       * @chainable\n       */\n      listenOnRootOnce: function listenOnRootOnce(event, callback) {\n        var _this2 = this;\n\n        this.$root.$once(event, callback);\n        this.$on('hook:beforeDestroy', function () {\n          _this2.$root.$off(event, callback);\n        }); // Return this for easy chaining\n\n        return this;\n      },\n\n      /**\n       * Convenience method for calling vm.$emit on vm.$root.\n       * @param {string} event\n       * @param {*} args\n       * @chainable\n       */\n      emitOnRoot: function emitOnRoot(event) {\n        var _this$$root;\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        (_this$$root = this.$root).$emit.apply(_this$$root, [event].concat(args)); // Return this for easy chaining\n\n\n        return this;\n      }\n    }\n  };\n\n  var EVENT_STATE = 'bv::collapse::state';\n  var EVENT_ACCORDION = 'bv::collapse::accordion'; // Private event we emit on `$root` to ensure the toggle state is\n  // always synced. It gets emitted even if the state has not changed!\n  // This event is NOT to be documented as people should not be using it\n\n  var EVENT_STATE_SYNC = 'bv::collapse::sync::state'; // Events we listen to on `$root`\n\n  var EVENT_TOGGLE = 'bv::toggle::collapse';\n  var EVENT_STATE_REQUEST = 'bv::request::collapse::state'; // @vue/component\n\n  var BCollapse =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BCollapse',\n    mixins: [idMixin, listenOnRootMixin, normalizeSlotMixin],\n    model: {\n      prop: 'visible',\n      event: 'input'\n    },\n    props: {\n      isNav: {\n        type: Boolean,\n        default: false\n      },\n      accordion: {\n        type: String,\n        default: null\n      },\n      visible: {\n        type: Boolean,\n        default: false\n      },\n      tag: {\n        type: String,\n        default: 'div'\n      },\n      appear: {\n        // If `true` (and `visible` is `true` on mount), animate initially visible\n        type: Boolean,\n        default: false\n      }\n    },\n    data: function data() {\n      return {\n        show: this.visible,\n        transitioning: false\n      };\n    },\n    computed: {\n      classObject: function classObject() {\n        return {\n          'navbar-collapse': this.isNav,\n          collapse: !this.transitioning,\n          show: this.show && !this.transitioning\n        };\n      }\n    },\n    watch: {\n      visible: function visible(newVal) {\n        if (newVal !== this.show) {\n          this.show = newVal;\n        }\n      },\n      show: function show(newVal, oldVal) {\n        if (newVal !== oldVal) {\n          this.emitState();\n        }\n      }\n    },\n    created: function created() {\n      this.show = this.visible;\n    },\n    mounted: function mounted() {\n      var _this = this;\n\n      this.show = this.visible; // Listen for toggle events to open/close us\n\n      this.listenOnRoot(EVENT_TOGGLE, this.handleToggleEvt); // Listen to other collapses for accordion events\n\n      this.listenOnRoot(EVENT_ACCORDION, this.handleAccordionEvt);\n\n      if (this.isNav) {\n        // Set up handlers\n        this.setWindowEvents(true);\n        this.handleResize();\n      }\n\n      this.$nextTick(function () {\n        _this.emitState();\n      }); // Listen for \"Sync state\" requests from `v-b-toggle`\n\n      this.listenOnRoot(EVENT_STATE_REQUEST, function (id) {\n        if (id === _this.safeId()) {\n          _this.$nextTick(_this.emitSync);\n        }\n      });\n    },\n    updated: function updated() {\n      // Emit a private event every time this component updates to ensure\n      // the toggle button is in sync with the collapse's state\n      // It is emitted regardless if the visible state changes\n      this.emitSync();\n    },\n    deactivated: function deactivated()\n    /* istanbul ignore next */\n    {\n      if (this.isNav) {\n        this.setWindowEvents(false);\n      }\n    },\n    activated: function activated()\n    /* istanbul ignore next */\n    {\n      if (this.isNav) {\n        this.setWindowEvents(true);\n      }\n\n      this.emitSync();\n    },\n    beforeDestroy: function beforeDestroy() {\n      // Trigger state emit if needed\n      this.show = false;\n\n      if (this.isNav && isBrowser) {\n        this.setWindowEvents(false);\n      }\n    },\n    methods: {\n      setWindowEvents: function setWindowEvents(on) {\n        eventOnOff(on, window, 'resize', this.handleResize, EVENT_OPTIONS_NO_CAPTURE);\n        eventOnOff(on, window, 'orientationchange', this.handleResize, EVENT_OPTIONS_NO_CAPTURE);\n      },\n      toggle: function toggle() {\n        this.show = !this.show;\n      },\n      onEnter: function onEnter() {\n        this.transitioning = true; // This should be moved out so we can add cancellable events\n\n        this.$emit('show');\n      },\n      onAfterEnter: function onAfterEnter() {\n        this.transitioning = false;\n        this.$emit('shown');\n      },\n      onLeave: function onLeave() {\n        this.transitioning = true; // This should be moved out so we can add cancellable events\n\n        this.$emit('hide');\n      },\n      onAfterLeave: function onAfterLeave() {\n        this.transitioning = false;\n        this.$emit('hidden');\n      },\n      emitState: function emitState() {\n        this.$emit('input', this.show); // Let `v-b-toggle` know the state of this collapse\n\n        this.$root.$emit(EVENT_STATE, this.safeId(), this.show);\n\n        if (this.accordion && this.show) {\n          // Tell the other collapses in this accordion to close\n          this.$root.$emit(EVENT_ACCORDION, this.safeId(), this.accordion);\n        }\n      },\n      emitSync: function emitSync() {\n        // Emit a private event every time this component updates to ensure\n        // the toggle button is in sync with the collapse's state\n        // It is emitted regardless if the visible state changes\n        this.$root.$emit(EVENT_STATE_SYNC, this.safeId(), this.show);\n      },\n      checkDisplayBlock: function checkDisplayBlock() {\n        // Check to see if the collapse has `display: block !important` set\n        // We can't set `display: none` directly on `this.$el`, as it would\n        // trigger a new transition to start (or cancel a current one)\n        var restore = hasClass(this.$el, 'show');\n        removeClass(this.$el, 'show');\n        var isBlock = getCS(this.$el).display === 'block';\n\n        if (restore) {\n          addClass(this.$el, 'show');\n        }\n\n        return isBlock;\n      },\n      clickHandler: function clickHandler(evt) {\n        // If we are in a nav/navbar, close the collapse when non-disabled link clicked\n        var el = evt.target;\n\n        if (!this.isNav || !el || getCS(this.$el).display !== 'block') {\n          /* istanbul ignore next: can't test getComputedStyle in JSDOM */\n          return;\n        }\n\n        if (matches(el, '.nav-link,.dropdown-item') || closest('.nav-link,.dropdown-item', el)) {\n          if (!this.checkDisplayBlock()) {\n            // Only close the collapse if it is not forced to be `display: block !important`\n            this.show = false;\n          }\n        }\n      },\n      handleToggleEvt: function handleToggleEvt(target) {\n        if (target !== this.safeId()) {\n          return;\n        }\n\n        this.toggle();\n      },\n      handleAccordionEvt: function handleAccordionEvt(openedId, accordion) {\n        if (!this.accordion || accordion !== this.accordion) {\n          return;\n        }\n\n        if (openedId === this.safeId()) {\n          // Open this collapse if not shown\n          if (!this.show) {\n            this.toggle();\n          }\n        } else {\n          // Close this collapse if shown\n          if (this.show) {\n            this.toggle();\n          }\n        }\n      },\n      handleResize: function handleResize() {\n        // Handler for orientation/resize to set collapsed state in nav/navbar\n        this.show = getCS(this.$el).display === 'block';\n      }\n    },\n    render: function render(h) {\n      var _this2 = this;\n\n      var scope = {\n        visible: this.show,\n        close: function close() {\n          return _this2.show = false;\n        }\n      };\n      var content = h(this.tag, {\n        class: this.classObject,\n        directives: [{\n          name: 'show',\n          value: this.show\n        }],\n        attrs: {\n          id: this.safeId()\n        },\n        on: {\n          click: this.clickHandler\n        }\n      }, [this.normalizeSlot('default', scope)]);\n      return h(BVCollapse, {\n        props: {\n          appear: this.appear\n        },\n        on: {\n          enter: this.onEnter,\n          afterEnter: this.onAfterEnter,\n          leave: this.onLeave,\n          afterLeave: this.onAfterLeave\n        }\n      }, [content]);\n    }\n  });\n\n  var allListenTypes = {\n    hover: true,\n    click: true,\n    focus: true\n  };\n  var BVBoundListeners = '__BV_boundEventListeners__';\n\n  var getTargets = function getTargets(binding) {\n    var targets = keys(binding.modifiers || {}).filter(function (t) {\n      return !allListenTypes[t];\n    });\n\n    if (binding.value) {\n      targets.push(binding.value);\n    }\n\n    return targets;\n  };\n\n  var bindTargets = function bindTargets(vnode, binding, listenTypes, fn) {\n    var targets = getTargets(binding);\n\n    var listener = function listener() {\n      fn({\n        targets: targets,\n        vnode: vnode\n      });\n    };\n\n    keys(allListenTypes).forEach(function (type) {\n      if (listenTypes[type] || binding.modifiers[type]) {\n        eventOn(vnode.elm, type, listener);\n        var boundListeners = vnode.elm[BVBoundListeners] || {};\n        boundListeners[type] = boundListeners[type] || [];\n        boundListeners[type].push(listener);\n        vnode.elm[BVBoundListeners] = boundListeners;\n      }\n    }); // Return the list of targets\n\n    return targets;\n  };\n\n  var unbindTargets = function unbindTargets(vnode, binding, listenTypes) {\n    keys(allListenTypes).forEach(function (type) {\n      if (listenTypes[type] || binding.modifiers[type]) {\n        var boundListeners = vnode.elm[BVBoundListeners] && vnode.elm[BVBoundListeners][type];\n\n        if (boundListeners) {\n          boundListeners.forEach(function (listener) {\n            return eventOff(vnode.elm, type, listener);\n          });\n          delete vnode.elm[BVBoundListeners][type];\n        }\n      }\n    });\n  };\n\n  var listenTypes = {\n    click: true\n  }; // Property key for handler storage\n\n  var BV_TOGGLE = '__BV_toggle__';\n  var BV_TOGGLE_STATE = '__BV_toggle_STATE__';\n  var BV_TOGGLE_CONTROLS = '__BV_toggle_CONTROLS__';\n  var BV_TOGGLE_TARGETS = '__BV_toggle_TARGETS__'; // Emitted control event for collapse (emitted to collapse)\n\n  var EVENT_TOGGLE$1 = 'bv::toggle::collapse'; // Listen to event for toggle state update (emitted by collapse)\n\n  var EVENT_STATE$1 = 'bv::collapse::state'; // Private event emitted on $root to ensure the toggle state is always synced.\n  // Gets emitted even if the state of b-collapse has not changed.\n  // This event is NOT to be documented as people should not be using it.\n\n  var EVENT_STATE_SYNC$1 = 'bv::collapse::sync::state'; // Private event we send to collapse to request state update sync event\n\n  var EVENT_STATE_REQUEST$1 = 'bv::request::collapse::state'; // Reset and remove a property from the provided element\n\n  var resetProp = function resetProp(el, prop) {\n    el[prop] = null;\n    delete el[prop];\n  }; // Handle targets update\n\n\n  var handleTargets = function handleTargets(_ref) {\n    var targets = _ref.targets,\n        vnode = _ref.vnode;\n    targets.forEach(function (target) {\n      vnode.context.$root.$emit(EVENT_TOGGLE$1, target);\n    });\n  }; // Handle directive updates\n\n  /* istanbul ignore next: not easy to test */\n\n\n  var handleUpdate = function handleUpdate(el, binding, vnode) {\n    if (!isBrowser) {\n      return;\n    }\n\n    if (!looseEqual(getTargets(binding), el[BV_TOGGLE_TARGETS])) {\n      // Targets have changed, so update accordingly\n      unbindTargets(vnode, binding, listenTypes);\n      var targets = bindTargets(vnode, binding, listenTypes, handleTargets); // Update targets array to element\n\n      el[BV_TOGGLE_TARGETS] = targets; // Add aria attributes to element\n\n      el[BV_TOGGLE_CONTROLS] = targets.join(' '); // ensure aria-controls is up to date\n\n      setAttr(el, 'aria-controls', el[BV_TOGGLE_CONTROLS]); // Request a state update from targets so that we can ensure\n      // expanded state is correct\n\n      targets.forEach(function (target) {\n        vnode.context.$root.$emit(EVENT_STATE_REQUEST$1, target);\n      });\n    } // Ensure the collapse class and aria-* attributes persist\n    // after element is updated (either by parent re-rendering\n    // or changes to this element or its contents\n\n\n    if (el[BV_TOGGLE_STATE] === true) {\n      addClass(el, 'collapsed');\n      setAttr(el, 'aria-expanded', 'true');\n    } else if (el[BV_TOGGLE_STATE] === false) {\n      removeClass(el, 'collapsed');\n      setAttr(el, 'aria-expanded', 'false');\n    }\n\n    setAttr(el, 'aria-controls', el[BV_TOGGLE_CONTROLS]);\n  };\n  /*\n   * Export our directive\n   */\n\n\n  var VBToggle = {\n    bind: function bind(el, binding, vnode) {\n      var targets = bindTargets(vnode, binding, listenTypes, handleTargets);\n\n      if (isBrowser && vnode.context && targets.length > 0) {\n        // Add targets array to element\n        el[BV_TOGGLE_TARGETS] = targets; // Add aria attributes to element\n\n        el[BV_TOGGLE_CONTROLS] = targets.join(' '); // State is initially collapsed until we receive a state event\n\n        el[BV_TOGGLE_STATE] = false;\n        setAttr(el, 'aria-controls', el[BV_TOGGLE_CONTROLS]);\n        setAttr(el, 'aria-expanded', 'false'); // If element is not a button, we add `role=\"button\"` for accessibility\n\n        if (el.tagName !== 'BUTTON' && !hasAttr(el, 'role')) {\n          setAttr(el, 'role', 'button');\n        } // Toggle state handler\n\n\n        var toggleDirectiveHandler = function toggleDirectiveHandler(id, state) {\n          var targets = el[BV_TOGGLE_TARGETS] || [];\n\n          if (targets.indexOf(id) !== -1) {\n            // Set aria-expanded state\n            setAttr(el, 'aria-expanded', state ? 'true' : 'false'); // Set/Clear 'collapsed' class state\n\n            el[BV_TOGGLE_STATE] = state;\n\n            if (state) {\n              removeClass(el, 'collapsed');\n            } else {\n              addClass(el, 'collapsed');\n            }\n          }\n        }; // Store the toggle handler on the element\n\n\n        el[BV_TOGGLE] = toggleDirectiveHandler; // Listen for toggle state changes (public)\n\n        vnode.context.$root.$on(EVENT_STATE$1, el[BV_TOGGLE]); // Listen for toggle state sync (private)\n\n        vnode.context.$root.$on(EVENT_STATE_SYNC$1, el[BV_TOGGLE]);\n      }\n    },\n    componentUpdated: handleUpdate,\n    updated: handleUpdate,\n    unbind: function unbind(el, binding, vnode)\n    /* istanbul ignore next */\n    {\n      unbindTargets(vnode, binding, listenTypes); // Remove our $root listener\n\n      if (el[BV_TOGGLE]) {\n        vnode.context.$root.$off(EVENT_STATE$1, el[BV_TOGGLE]);\n        vnode.context.$root.$off(EVENT_STATE_SYNC$1, el[BV_TOGGLE]);\n      } // Reset custom  props\n\n\n      resetProp(el, BV_TOGGLE);\n      resetProp(el, BV_TOGGLE_STATE);\n      resetProp(el, BV_TOGGLE_CONTROLS);\n      resetProp(el, BV_TOGGLE_TARGETS); // Reset classes/attrs\n\n      removeClass(el, 'collapsed');\n      removeAttr(el, 'aria-expanded');\n      removeAttr(el, 'aria-controls');\n      removeAttr(el, 'role');\n    }\n  };\n\n  var CollapsePlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BCollapse: BCollapse\n    },\n    directives: {\n      VBToggle: VBToggle\n    }\n  });\n\n  /**!\n   * @fileOverview Kickass library to create and place poppers near their reference elements.\n   * @version 1.16.1\n   * @license\n   * Copyright (c) 2016 Federico Zivolo and contributors\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in all\n   * copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n   * SOFTWARE.\n   */\n  var isBrowser$1 = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';\n\n  var timeoutDuration = function () {\n    var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\n    for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n      if (isBrowser$1 && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n        return 1;\n      }\n    }\n    return 0;\n  }();\n\n  function microtaskDebounce(fn) {\n    var called = false;\n    return function () {\n      if (called) {\n        return;\n      }\n      called = true;\n      window.Promise.resolve().then(function () {\n        called = false;\n        fn();\n      });\n    };\n  }\n\n  function taskDebounce(fn) {\n    var scheduled = false;\n    return function () {\n      if (!scheduled) {\n        scheduled = true;\n        setTimeout(function () {\n          scheduled = false;\n          fn();\n        }, timeoutDuration);\n      }\n    };\n  }\n\n  var supportsMicroTasks = isBrowser$1 && window.Promise;\n\n  /**\n  * Create a debounced version of a method, that's asynchronously deferred\n  * but called in the minimum time possible.\n  *\n  * @method\n  * @memberof Popper.Utils\n  * @argument {Function} fn\n  * @returns {Function}\n  */\n  var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;\n\n  /**\n   * Check if the given variable is a function\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Any} functionToCheck - variable to check\n   * @returns {Boolean} answer to: is a function?\n   */\n  function isFunction$1(functionToCheck) {\n    var getType = {};\n    return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n  }\n\n  /**\n   * Get CSS computed property of the given element\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Eement} element\n   * @argument {String} property\n   */\n  function getStyleComputedProperty(element, property) {\n    if (element.nodeType !== 1) {\n      return [];\n    }\n    // NOTE: 1 DOM access here\n    var window = element.ownerDocument.defaultView;\n    var css = window.getComputedStyle(element, null);\n    return property ? css[property] : css;\n  }\n\n  /**\n   * Returns the parentNode or the host of the element\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Element} element\n   * @returns {Element} parent\n   */\n  function getParentNode(element) {\n    if (element.nodeName === 'HTML') {\n      return element;\n    }\n    return element.parentNode || element.host;\n  }\n\n  /**\n   * Returns the scrolling parent of the given element\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Element} element\n   * @returns {Element} scroll parent\n   */\n  function getScrollParent(element) {\n    // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n    if (!element) {\n      return document.body;\n    }\n\n    switch (element.nodeName) {\n      case 'HTML':\n      case 'BODY':\n        return element.ownerDocument.body;\n      case '#document':\n        return element.body;\n    }\n\n    // Firefox want us to check `-x` and `-y` variations as well\n\n    var _getStyleComputedProp = getStyleComputedProperty(element),\n        overflow = _getStyleComputedProp.overflow,\n        overflowX = _getStyleComputedProp.overflowX,\n        overflowY = _getStyleComputedProp.overflowY;\n\n    if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n      return element;\n    }\n\n    return getScrollParent(getParentNode(element));\n  }\n\n  /**\n   * Returns the reference node of the reference object, or the reference object itself.\n   * @method\n   * @memberof Popper.Utils\n   * @param {Element|Object} reference - the reference element (the popper will be relative to this)\n   * @returns {Element} parent\n   */\n  function getReferenceNode(reference) {\n    return reference && reference.referenceNode ? reference.referenceNode : reference;\n  }\n\n  var isIE11 = isBrowser$1 && !!(window.MSInputMethodContext && document.documentMode);\n  var isIE10 = isBrowser$1 && /MSIE 10/.test(navigator.userAgent);\n\n  /**\n   * Determines if the browser is Internet Explorer\n   * @method\n   * @memberof Popper.Utils\n   * @param {Number} version to check\n   * @returns {Boolean} isIE\n   */\n  function isIE$1(version) {\n    if (version === 11) {\n      return isIE11;\n    }\n    if (version === 10) {\n      return isIE10;\n    }\n    return isIE11 || isIE10;\n  }\n\n  /**\n   * Returns the offset parent of the given element\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Element} element\n   * @returns {Element} offset parent\n   */\n  function getOffsetParent(element) {\n    if (!element) {\n      return document.documentElement;\n    }\n\n    var noOffsetParent = isIE$1(10) ? document.body : null;\n\n    // NOTE: 1 DOM access here\n    var offsetParent = element.offsetParent || null;\n    // Skip hidden elements which don't have an offsetParent\n    while (offsetParent === noOffsetParent && element.nextElementSibling) {\n      offsetParent = (element = element.nextElementSibling).offsetParent;\n    }\n\n    var nodeName = offsetParent && offsetParent.nodeName;\n\n    if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n      return element ? element.ownerDocument.documentElement : document.documentElement;\n    }\n\n    // .offsetParent will return the closest TH, TD or TABLE in case\n    // no offsetParent is present, I hate this job...\n    if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n      return getOffsetParent(offsetParent);\n    }\n\n    return offsetParent;\n  }\n\n  function isOffsetContainer(element) {\n    var nodeName = element.nodeName;\n\n    if (nodeName === 'BODY') {\n      return false;\n    }\n    return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n  }\n\n  /**\n   * Finds the root node (document, shadowDOM root) of the given element\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Element} node\n   * @returns {Element} root node\n   */\n  function getRoot(node) {\n    if (node.parentNode !== null) {\n      return getRoot(node.parentNode);\n    }\n\n    return node;\n  }\n\n  /**\n   * Finds the offset parent common to the two provided nodes\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Element} element1\n   * @argument {Element} element2\n   * @returns {Element} common offset parent\n   */\n  function findCommonOffsetParent(element1, element2) {\n    // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n    if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n      return document.documentElement;\n    }\n\n    // Here we make sure to give as \"start\" the element that comes first in the DOM\n    var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n    var start = order ? element1 : element2;\n    var end = order ? element2 : element1;\n\n    // Get common ancestor container\n    var range = document.createRange();\n    range.setStart(start, 0);\n    range.setEnd(end, 0);\n    var commonAncestorContainer = range.commonAncestorContainer;\n\n    // Both nodes are inside #document\n\n    if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n      if (isOffsetContainer(commonAncestorContainer)) {\n        return commonAncestorContainer;\n      }\n\n      return getOffsetParent(commonAncestorContainer);\n    }\n\n    // one of the nodes is inside shadowDOM, find which one\n    var element1root = getRoot(element1);\n    if (element1root.host) {\n      return findCommonOffsetParent(element1root.host, element2);\n    } else {\n      return findCommonOffsetParent(element1, getRoot(element2).host);\n    }\n  }\n\n  /**\n   * Gets the scroll value of the given element in the given side (top and left)\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Element} element\n   * @argument {String} side `top` or `left`\n   * @returns {number} amount of scrolled pixels\n   */\n  function getScroll(element) {\n    var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n\n    var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n    var nodeName = element.nodeName;\n\n    if (nodeName === 'BODY' || nodeName === 'HTML') {\n      var html = element.ownerDocument.documentElement;\n      var scrollingElement = element.ownerDocument.scrollingElement || html;\n      return scrollingElement[upperSide];\n    }\n\n    return element[upperSide];\n  }\n\n  /*\n   * Sum or subtract the element scroll values (left and top) from a given rect object\n   * @method\n   * @memberof Popper.Utils\n   * @param {Object} rect - Rect object you want to change\n   * @param {HTMLElement} element - The element from the function reads the scroll values\n   * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n   * @return {Object} rect - The modifier rect object\n   */\n  function includeScroll(rect, element) {\n    var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    var scrollTop = getScroll(element, 'top');\n    var scrollLeft = getScroll(element, 'left');\n    var modifier = subtract ? -1 : 1;\n    rect.top += scrollTop * modifier;\n    rect.bottom += scrollTop * modifier;\n    rect.left += scrollLeft * modifier;\n    rect.right += scrollLeft * modifier;\n    return rect;\n  }\n\n  /*\n   * Helper to detect borders of a given element\n   * @method\n   * @memberof Popper.Utils\n   * @param {CSSStyleDeclaration} styles\n   * Result of `getStyleComputedProperty` on the given element\n   * @param {String} axis - `x` or `y`\n   * @return {number} borders - The borders size of the given axis\n   */\n\n  function getBordersSize(styles, axis) {\n    var sideA = axis === 'x' ? 'Left' : 'Top';\n    var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n    return parseFloat(styles['border' + sideA + 'Width']) + parseFloat(styles['border' + sideB + 'Width']);\n  }\n\n  function getSize(axis, body, html, computedStyle) {\n    return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE$1(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);\n  }\n\n  function getWindowSizes(document) {\n    var body = document.body;\n    var html = document.documentElement;\n    var computedStyle = isIE$1(10) && getComputedStyle(html);\n\n    return {\n      height: getSize('Height', body, html, computedStyle),\n      width: getSize('Width', body, html, computedStyle)\n    };\n  }\n\n  var classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n\n\n\n\n  var defineProperty$1 = function (obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  };\n\n  var _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  /**\n   * Given element offsets, generate an output similar to getBoundingClientRect\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Object} offsets\n   * @returns {Object} ClientRect like output\n   */\n  function getClientRect(offsets) {\n    return _extends({}, offsets, {\n      right: offsets.left + offsets.width,\n      bottom: offsets.top + offsets.height\n    });\n  }\n\n  /**\n   * Get bounding client rect of given element\n   * @method\n   * @memberof Popper.Utils\n   * @param {HTMLElement} element\n   * @return {Object} client rect\n   */\n  function getBoundingClientRect(element) {\n    var rect = {};\n\n    // IE10 10 FIX: Please, don't ask, the element isn't\n    // considered in DOM in some circumstances...\n    // This isn't reproducible in IE10 compatibility mode of IE11\n    try {\n      if (isIE$1(10)) {\n        rect = element.getBoundingClientRect();\n        var scrollTop = getScroll(element, 'top');\n        var scrollLeft = getScroll(element, 'left');\n        rect.top += scrollTop;\n        rect.left += scrollLeft;\n        rect.bottom += scrollTop;\n        rect.right += scrollLeft;\n      } else {\n        rect = element.getBoundingClientRect();\n      }\n    } catch (e) {}\n\n    var result = {\n      left: rect.left,\n      top: rect.top,\n      width: rect.right - rect.left,\n      height: rect.bottom - rect.top\n    };\n\n    // subtract scrollbar size from sizes\n    var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n    var width = sizes.width || element.clientWidth || result.width;\n    var height = sizes.height || element.clientHeight || result.height;\n\n    var horizScrollbar = element.offsetWidth - width;\n    var vertScrollbar = element.offsetHeight - height;\n\n    // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n    // we make this check conditional for performance reasons\n    if (horizScrollbar || vertScrollbar) {\n      var styles = getStyleComputedProperty(element);\n      horizScrollbar -= getBordersSize(styles, 'x');\n      vertScrollbar -= getBordersSize(styles, 'y');\n\n      result.width -= horizScrollbar;\n      result.height -= vertScrollbar;\n    }\n\n    return getClientRect(result);\n  }\n\n  function getOffsetRectRelativeToArbitraryNode(children, parent) {\n    var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    var isIE10 = isIE$1(10);\n    var isHTML = parent.nodeName === 'HTML';\n    var childrenRect = getBoundingClientRect(children);\n    var parentRect = getBoundingClientRect(parent);\n    var scrollParent = getScrollParent(children);\n\n    var styles = getStyleComputedProperty(parent);\n    var borderTopWidth = parseFloat(styles.borderTopWidth);\n    var borderLeftWidth = parseFloat(styles.borderLeftWidth);\n\n    // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n    if (fixedPosition && isHTML) {\n      parentRect.top = Math.max(parentRect.top, 0);\n      parentRect.left = Math.max(parentRect.left, 0);\n    }\n    var offsets = getClientRect({\n      top: childrenRect.top - parentRect.top - borderTopWidth,\n      left: childrenRect.left - parentRect.left - borderLeftWidth,\n      width: childrenRect.width,\n      height: childrenRect.height\n    });\n    offsets.marginTop = 0;\n    offsets.marginLeft = 0;\n\n    // Subtract margins of documentElement in case it's being used as parent\n    // we do this only on HTML because it's the only element that behaves\n    // differently when margins are applied to it. The margins are included in\n    // the box of the documentElement, in the other cases not.\n    if (!isIE10 && isHTML) {\n      var marginTop = parseFloat(styles.marginTop);\n      var marginLeft = parseFloat(styles.marginLeft);\n\n      offsets.top -= borderTopWidth - marginTop;\n      offsets.bottom -= borderTopWidth - marginTop;\n      offsets.left -= borderLeftWidth - marginLeft;\n      offsets.right -= borderLeftWidth - marginLeft;\n\n      // Attach marginTop and marginLeft because in some circumstances we may need them\n      offsets.marginTop = marginTop;\n      offsets.marginLeft = marginLeft;\n    }\n\n    if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n      offsets = includeScroll(offsets, parent);\n    }\n\n    return offsets;\n  }\n\n  function getViewportOffsetRectRelativeToArtbitraryNode(element) {\n    var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var html = element.ownerDocument.documentElement;\n    var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n    var width = Math.max(html.clientWidth, window.innerWidth || 0);\n    var height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n    var scrollTop = !excludeScroll ? getScroll(html) : 0;\n    var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n    var offset = {\n      top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n      left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n      width: width,\n      height: height\n    };\n\n    return getClientRect(offset);\n  }\n\n  /**\n   * Check if the given element is fixed or is inside a fixed parent\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Element} element\n   * @argument {Element} customContainer\n   * @returns {Boolean} answer to \"isFixed?\"\n   */\n  function isFixed(element) {\n    var nodeName = element.nodeName;\n    if (nodeName === 'BODY' || nodeName === 'HTML') {\n      return false;\n    }\n    if (getStyleComputedProperty(element, 'position') === 'fixed') {\n      return true;\n    }\n    var parentNode = getParentNode(element);\n    if (!parentNode) {\n      return false;\n    }\n    return isFixed(parentNode);\n  }\n\n  /**\n   * Finds the first parent of an element that has a transformed property defined\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Element} element\n   * @returns {Element} first transformed parent or documentElement\n   */\n\n  function getFixedPositionOffsetParent(element) {\n    // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n    if (!element || !element.parentElement || isIE$1()) {\n      return document.documentElement;\n    }\n    var el = element.parentElement;\n    while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n      el = el.parentElement;\n    }\n    return el || document.documentElement;\n  }\n\n  /**\n   * Computed the boundaries limits and return them\n   * @method\n   * @memberof Popper.Utils\n   * @param {HTMLElement} popper\n   * @param {HTMLElement} reference\n   * @param {number} padding\n   * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n   * @param {Boolean} fixedPosition - Is in fixed position mode\n   * @returns {Object} Coordinates of the boundaries\n   */\n  function getBoundaries(popper, reference, padding, boundariesElement) {\n    var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    // NOTE: 1 DOM access here\n\n    var boundaries = { top: 0, left: 0 };\n    var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n\n    // Handle viewport case\n    if (boundariesElement === 'viewport') {\n      boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n    } else {\n      // Handle other cases based on DOM element used as boundaries\n      var boundariesNode = void 0;\n      if (boundariesElement === 'scrollParent') {\n        boundariesNode = getScrollParent(getParentNode(reference));\n        if (boundariesNode.nodeName === 'BODY') {\n          boundariesNode = popper.ownerDocument.documentElement;\n        }\n      } else if (boundariesElement === 'window') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      } else {\n        boundariesNode = boundariesElement;\n      }\n\n      var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);\n\n      // In case of HTML, we need a different computation\n      if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n        var _getWindowSizes = getWindowSizes(popper.ownerDocument),\n            height = _getWindowSizes.height,\n            width = _getWindowSizes.width;\n\n        boundaries.top += offsets.top - offsets.marginTop;\n        boundaries.bottom = height + offsets.top;\n        boundaries.left += offsets.left - offsets.marginLeft;\n        boundaries.right = width + offsets.left;\n      } else {\n        // for all the other DOM elements, this one is good\n        boundaries = offsets;\n      }\n    }\n\n    // Add paddings\n    padding = padding || 0;\n    var isPaddingNumber = typeof padding === 'number';\n    boundaries.left += isPaddingNumber ? padding : padding.left || 0;\n    boundaries.top += isPaddingNumber ? padding : padding.top || 0;\n    boundaries.right -= isPaddingNumber ? padding : padding.right || 0;\n    boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;\n\n    return boundaries;\n  }\n\n  function getArea(_ref) {\n    var width = _ref.width,\n        height = _ref.height;\n\n    return width * height;\n  }\n\n  /**\n   * Utility used to transform the `auto` placement to the placement with more\n   * available space.\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Object} data - The data object generated by update method\n   * @argument {Object} options - Modifiers configuration and options\n   * @returns {Object} The data object, properly modified\n   */\n  function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n    var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n    if (placement.indexOf('auto') === -1) {\n      return placement;\n    }\n\n    var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n\n    var rects = {\n      top: {\n        width: boundaries.width,\n        height: refRect.top - boundaries.top\n      },\n      right: {\n        width: boundaries.right - refRect.right,\n        height: boundaries.height\n      },\n      bottom: {\n        width: boundaries.width,\n        height: boundaries.bottom - refRect.bottom\n      },\n      left: {\n        width: refRect.left - boundaries.left,\n        height: boundaries.height\n      }\n    };\n\n    var sortedAreas = Object.keys(rects).map(function (key) {\n      return _extends({\n        key: key\n      }, rects[key], {\n        area: getArea(rects[key])\n      });\n    }).sort(function (a, b) {\n      return b.area - a.area;\n    });\n\n    var filteredAreas = sortedAreas.filter(function (_ref2) {\n      var width = _ref2.width,\n          height = _ref2.height;\n      return width >= popper.clientWidth && height >= popper.clientHeight;\n    });\n\n    var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n\n    var variation = placement.split('-')[1];\n\n    return computedPlacement + (variation ? '-' + variation : '');\n  }\n\n  /**\n   * Get offsets to the reference element\n   * @method\n   * @memberof Popper.Utils\n   * @param {Object} state\n   * @param {Element} popper - the popper element\n   * @param {Element} reference - the reference element (the popper will be relative to this)\n   * @param {Element} fixedPosition - is in fixed position mode\n   * @returns {Object} An object containing the offsets which will be applied to the popper\n   */\n  function getReferenceOffsets(state, popper, reference) {\n    var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n    var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n    return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n  }\n\n  /**\n   * Get the outer sizes of the given element (offset size + margins)\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Element} element\n   * @returns {Object} object containing width and height properties\n   */\n  function getOuterSizes(element) {\n    var window = element.ownerDocument.defaultView;\n    var styles = window.getComputedStyle(element);\n    var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n    var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n    var result = {\n      width: element.offsetWidth + y,\n      height: element.offsetHeight + x\n    };\n    return result;\n  }\n\n  /**\n   * Get the opposite placement of the given one\n   * @method\n   * @memberof Popper.Utils\n   * @argument {String} placement\n   * @returns {String} flipped placement\n   */\n  function getOppositePlacement(placement) {\n    var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n    return placement.replace(/left|right|bottom|top/g, function (matched) {\n      return hash[matched];\n    });\n  }\n\n  /**\n   * Get offsets to the popper\n   * @method\n   * @memberof Popper.Utils\n   * @param {Object} position - CSS position the Popper will get applied\n   * @param {HTMLElement} popper - the popper element\n   * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n   * @param {String} placement - one of the valid placement options\n   * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n   */\n  function getPopperOffsets(popper, referenceOffsets, placement) {\n    placement = placement.split('-')[0];\n\n    // Get popper node sizes\n    var popperRect = getOuterSizes(popper);\n\n    // Add position, width and height to our offsets object\n    var popperOffsets = {\n      width: popperRect.width,\n      height: popperRect.height\n    };\n\n    // depending by the popper placement we have to compute its offsets slightly differently\n    var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n    var mainSide = isHoriz ? 'top' : 'left';\n    var secondarySide = isHoriz ? 'left' : 'top';\n    var measurement = isHoriz ? 'height' : 'width';\n    var secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n    popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n    if (placement === secondarySide) {\n      popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n    } else {\n      popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n    }\n\n    return popperOffsets;\n  }\n\n  /**\n   * Mimics the `find` method of Array\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Array} arr\n   * @argument prop\n   * @argument value\n   * @returns index or -1\n   */\n  function find(arr, check) {\n    // use native find if supported\n    if (Array.prototype.find) {\n      return arr.find(check);\n    }\n\n    // use `filter` to obtain the same behavior of `find`\n    return arr.filter(check)[0];\n  }\n\n  /**\n   * Return the index of the matching object\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Array} arr\n   * @argument prop\n   * @argument value\n   * @returns index or -1\n   */\n  function findIndex(arr, prop, value) {\n    // use native findIndex if supported\n    if (Array.prototype.findIndex) {\n      return arr.findIndex(function (cur) {\n        return cur[prop] === value;\n      });\n    }\n\n    // use `find` + `indexOf` if `findIndex` isn't supported\n    var match = find(arr, function (obj) {\n      return obj[prop] === value;\n    });\n    return arr.indexOf(match);\n  }\n\n  /**\n   * Loop trough the list of modifiers and run them in order,\n   * each of them will then edit the data object.\n   * @method\n   * @memberof Popper.Utils\n   * @param {dataObject} data\n   * @param {Array} modifiers\n   * @param {String} ends - Optional modifier name used as stopper\n   * @returns {dataObject}\n   */\n  function runModifiers(modifiers, data, ends) {\n    var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n    modifiersToRun.forEach(function (modifier) {\n      if (modifier['function']) {\n        // eslint-disable-line dot-notation\n        console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n      }\n      var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n      if (modifier.enabled && isFunction$1(fn)) {\n        // Add properties to offsets to make them a complete clientRect object\n        // we do this before each modifier to make sure the previous one doesn't\n        // mess with these values\n        data.offsets.popper = getClientRect(data.offsets.popper);\n        data.offsets.reference = getClientRect(data.offsets.reference);\n\n        data = fn(data, modifier);\n      }\n    });\n\n    return data;\n  }\n\n  /**\n   * Updates the position of the popper, computing the new offsets and applying\n   * the new style.<br />\n   * Prefer `scheduleUpdate` over `update` because of performance reasons.\n   * @method\n   * @memberof Popper\n   */\n  function update() {\n    // if popper is destroyed, don't perform any further update\n    if (this.state.isDestroyed) {\n      return;\n    }\n\n    var data = {\n      instance: this,\n      styles: {},\n      arrowStyles: {},\n      attributes: {},\n      flipped: false,\n      offsets: {}\n    };\n\n    // compute reference element offsets\n    data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);\n\n    // compute auto placement, store placement inside the data object,\n    // modifiers will be able to edit `placement` if needed\n    // and refer to originalPlacement to know the original value\n    data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\n\n    // store the computed placement inside `originalPlacement`\n    data.originalPlacement = data.placement;\n\n    data.positionFixed = this.options.positionFixed;\n\n    // compute the popper offsets\n    data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n\n    data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';\n\n    // run the modifiers\n    data = runModifiers(this.modifiers, data);\n\n    // the first `update` will call `onCreate` callback\n    // the other ones will call `onUpdate` callback\n    if (!this.state.isCreated) {\n      this.state.isCreated = true;\n      this.options.onCreate(data);\n    } else {\n      this.options.onUpdate(data);\n    }\n  }\n\n  /**\n   * Helper used to know if the given modifier is enabled.\n   * @method\n   * @memberof Popper.Utils\n   * @returns {Boolean}\n   */\n  function isModifierEnabled(modifiers, modifierName) {\n    return modifiers.some(function (_ref) {\n      var name = _ref.name,\n          enabled = _ref.enabled;\n      return enabled && name === modifierName;\n    });\n  }\n\n  /**\n   * Get the prefixed supported property name\n   * @method\n   * @memberof Popper.Utils\n   * @argument {String} property (camelCase)\n   * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n   */\n  function getSupportedPropertyName(property) {\n    var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n    var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n    for (var i = 0; i < prefixes.length; i++) {\n      var prefix = prefixes[i];\n      var toCheck = prefix ? '' + prefix + upperProp : property;\n      if (typeof document.body.style[toCheck] !== 'undefined') {\n        return toCheck;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Destroys the popper.\n   * @method\n   * @memberof Popper\n   */\n  function destroy$1() {\n    this.state.isDestroyed = true;\n\n    // touch DOM only if `applyStyle` modifier is enabled\n    if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n      this.popper.removeAttribute('x-placement');\n      this.popper.style.position = '';\n      this.popper.style.top = '';\n      this.popper.style.left = '';\n      this.popper.style.right = '';\n      this.popper.style.bottom = '';\n      this.popper.style.willChange = '';\n      this.popper.style[getSupportedPropertyName('transform')] = '';\n    }\n\n    this.disableEventListeners();\n\n    // remove the popper if user explicitly asked for the deletion on destroy\n    // do not use `remove` because IE11 doesn't support it\n    if (this.options.removeOnDestroy) {\n      this.popper.parentNode.removeChild(this.popper);\n    }\n    return this;\n  }\n\n  /**\n   * Get the window associated with the element\n   * @argument {Element} element\n   * @returns {Window}\n   */\n  function getWindow(element) {\n    var ownerDocument = element.ownerDocument;\n    return ownerDocument ? ownerDocument.defaultView : window;\n  }\n\n  function attachToScrollParents(scrollParent, event, callback, scrollParents) {\n    var isBody = scrollParent.nodeName === 'BODY';\n    var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n    target.addEventListener(event, callback, { passive: true });\n\n    if (!isBody) {\n      attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n    }\n    scrollParents.push(target);\n  }\n\n  /**\n   * Setup needed event listeners used to update the popper position\n   * @method\n   * @memberof Popper.Utils\n   * @private\n   */\n  function setupEventListeners(reference, options, state, updateBound) {\n    // Resize event listener on window\n    state.updateBound = updateBound;\n    getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n    // Scroll event listener on scroll parents\n    var scrollElement = getScrollParent(reference);\n    attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\n    state.scrollElement = scrollElement;\n    state.eventsEnabled = true;\n\n    return state;\n  }\n\n  /**\n   * It will add resize/scroll events and start recalculating\n   * position of the popper element when they are triggered.\n   * @method\n   * @memberof Popper\n   */\n  function enableEventListeners() {\n    if (!this.state.eventsEnabled) {\n      this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n    }\n  }\n\n  /**\n   * Remove event listeners used to update the popper position\n   * @method\n   * @memberof Popper.Utils\n   * @private\n   */\n  function removeEventListeners(reference, state) {\n    // Remove resize event listener on window\n    getWindow(reference).removeEventListener('resize', state.updateBound);\n\n    // Remove scroll event listener on scroll parents\n    state.scrollParents.forEach(function (target) {\n      target.removeEventListener('scroll', state.updateBound);\n    });\n\n    // Reset state\n    state.updateBound = null;\n    state.scrollParents = [];\n    state.scrollElement = null;\n    state.eventsEnabled = false;\n    return state;\n  }\n\n  /**\n   * It will remove resize/scroll events and won't recalculate popper position\n   * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n   * unless you call `update` method manually.\n   * @method\n   * @memberof Popper\n   */\n  function disableEventListeners() {\n    if (this.state.eventsEnabled) {\n      cancelAnimationFrame(this.scheduleUpdate);\n      this.state = removeEventListeners(this.reference, this.state);\n    }\n  }\n\n  /**\n   * Tells if a given input is a number\n   * @method\n   * @memberof Popper.Utils\n   * @param {*} input to check\n   * @return {Boolean}\n   */\n  function isNumeric(n) {\n    return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  /**\n   * Set the style to the given popper\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Element} element - Element to apply the style to\n   * @argument {Object} styles\n   * Object with a list of properties and values which will be applied to the element\n   */\n  function setStyles(element, styles) {\n    Object.keys(styles).forEach(function (prop) {\n      var unit = '';\n      // add unit if the value is numeric and is one of the following\n      if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n        unit = 'px';\n      }\n      element.style[prop] = styles[prop] + unit;\n    });\n  }\n\n  /**\n   * Set the attributes to the given popper\n   * @method\n   * @memberof Popper.Utils\n   * @argument {Element} element - Element to apply the attributes to\n   * @argument {Object} styles\n   * Object with a list of properties and values which will be applied to the element\n   */\n  function setAttributes(element, attributes) {\n    Object.keys(attributes).forEach(function (prop) {\n      var value = attributes[prop];\n      if (value !== false) {\n        element.setAttribute(prop, attributes[prop]);\n      } else {\n        element.removeAttribute(prop);\n      }\n    });\n  }\n\n  /**\n   * @function\n   * @memberof Modifiers\n   * @argument {Object} data - The data object generated by `update` method\n   * @argument {Object} data.styles - List of style properties - values to apply to popper element\n   * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n   * @argument {Object} options - Modifiers configuration and options\n   * @returns {Object} The same data object\n   */\n  function applyStyle(data) {\n    // any property present in `data.styles` will be applied to the popper,\n    // in this way we can make the 3rd party modifiers add custom styles to it\n    // Be aware, modifiers could override the properties defined in the previous\n    // lines of this modifier!\n    setStyles(data.instance.popper, data.styles);\n\n    // any property present in `data.attributes` will be applied to the popper,\n    // they will be set as HTML attributes of the element\n    setAttributes(data.instance.popper, data.attributes);\n\n    // if arrowElement is defined and arrowStyles has some properties\n    if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n      setStyles(data.arrowElement, data.arrowStyles);\n    }\n\n    return data;\n  }\n\n  /**\n   * Set the x-placement attribute before everything else because it could be used\n   * to add margins to the popper margins needs to be calculated to get the\n   * correct popper offsets.\n   * @method\n   * @memberof Popper.modifiers\n   * @param {HTMLElement} reference - The reference element used to position the popper\n   * @param {HTMLElement} popper - The HTML element used as popper\n   * @param {Object} options - Popper.js options\n   */\n  function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n    // compute reference element offsets\n    var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n    // compute auto placement, store placement inside the data object,\n    // modifiers will be able to edit `placement` if needed\n    // and refer to originalPlacement to know the original value\n    var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n\n    popper.setAttribute('x-placement', placement);\n\n    // Apply `position` to popper before anything else because\n    // without the position applied we can't guarantee correct computations\n    setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n    return options;\n  }\n\n  /**\n   * @function\n   * @memberof Popper.Utils\n   * @argument {Object} data - The data object generated by `update` method\n   * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n   * @returns {Object} The popper's position offsets rounded\n   *\n   * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n   * good as it can be within reason.\n   * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n   *\n   * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n   * as well on High DPI screens).\n   *\n   * Firefox prefers no rounding for positioning and does not have blurriness on\n   * high DPI screens.\n   *\n   * Only horizontal placement and left/right values need to be considered.\n   */\n  function getRoundedOffsets(data, shouldRound) {\n    var _data$offsets = data.offsets,\n        popper = _data$offsets.popper,\n        reference = _data$offsets.reference;\n    var round = Math.round,\n        floor = Math.floor;\n\n    var noRound = function noRound(v) {\n      return v;\n    };\n\n    var referenceWidth = round(reference.width);\n    var popperWidth = round(popper.width);\n\n    var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n    var isVariation = data.placement.indexOf('-') !== -1;\n    var sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n    var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n\n    var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;\n    var verticalToInteger = !shouldRound ? noRound : round;\n\n    return {\n      left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),\n      top: verticalToInteger(popper.top),\n      bottom: verticalToInteger(popper.bottom),\n      right: horizontalToInteger(popper.right)\n    };\n  }\n\n  var isFirefox = isBrowser$1 && /Firefox/i.test(navigator.userAgent);\n\n  /**\n   * @function\n   * @memberof Modifiers\n   * @argument {Object} data - The data object generated by `update` method\n   * @argument {Object} options - Modifiers configuration and options\n   * @returns {Object} The data object, properly modified\n   */\n  function computeStyle(data, options) {\n    var x = options.x,\n        y = options.y;\n    var popper = data.offsets.popper;\n\n    // Remove this legacy support in Popper.js v2\n\n    var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\n      return modifier.name === 'applyStyle';\n    }).gpuAcceleration;\n    if (legacyGpuAccelerationOption !== undefined) {\n      console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n    }\n    var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n\n    var offsetParent = getOffsetParent(data.instance.popper);\n    var offsetParentRect = getBoundingClientRect(offsetParent);\n\n    // Styles\n    var styles = {\n      position: popper.position\n    };\n\n    var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);\n\n    var sideA = x === 'bottom' ? 'top' : 'bottom';\n    var sideB = y === 'right' ? 'left' : 'right';\n\n    // if gpuAcceleration is set to `true` and transform is supported,\n    //  we use `translate3d` to apply the position to the popper we\n    // automatically use the supported prefixed version if needed\n    var prefixedProperty = getSupportedPropertyName('transform');\n\n    // now, let's make a step back and look at this code closely (wtf?)\n    // If the content of the popper grows once it's been positioned, it\n    // may happen that the popper gets misplaced because of the new content\n    // overflowing its reference element\n    // To avoid this problem, we provide two options (x and y), which allow\n    // the consumer to define the offset origin.\n    // If we position a popper on top of a reference element, we can set\n    // `x` to `top` to make the popper grow towards its top instead of\n    // its bottom.\n    var left = void 0,\n        top = void 0;\n    if (sideA === 'bottom') {\n      // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n      // and not the bottom of the html element\n      if (offsetParent.nodeName === 'HTML') {\n        top = -offsetParent.clientHeight + offsets.bottom;\n      } else {\n        top = -offsetParentRect.height + offsets.bottom;\n      }\n    } else {\n      top = offsets.top;\n    }\n    if (sideB === 'right') {\n      if (offsetParent.nodeName === 'HTML') {\n        left = -offsetParent.clientWidth + offsets.right;\n      } else {\n        left = -offsetParentRect.width + offsets.right;\n      }\n    } else {\n      left = offsets.left;\n    }\n    if (gpuAcceleration && prefixedProperty) {\n      styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\n      styles[sideA] = 0;\n      styles[sideB] = 0;\n      styles.willChange = 'transform';\n    } else {\n      // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n      var invertTop = sideA === 'bottom' ? -1 : 1;\n      var invertLeft = sideB === 'right' ? -1 : 1;\n      styles[sideA] = top * invertTop;\n      styles[sideB] = left * invertLeft;\n      styles.willChange = sideA + ', ' + sideB;\n    }\n\n    // Attributes\n    var attributes = {\n      'x-placement': data.placement\n    };\n\n    // Update `data` attributes, styles and arrowStyles\n    data.attributes = _extends({}, attributes, data.attributes);\n    data.styles = _extends({}, styles, data.styles);\n    data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);\n\n    return data;\n  }\n\n  /**\n   * Helper used to know if the given modifier depends from another one.<br />\n   * It checks if the needed modifier is listed and enabled.\n   * @method\n   * @memberof Popper.Utils\n   * @param {Array} modifiers - list of modifiers\n   * @param {String} requestingName - name of requesting modifier\n   * @param {String} requestedName - name of requested modifier\n   * @returns {Boolean}\n   */\n  function isModifierRequired(modifiers, requestingName, requestedName) {\n    var requesting = find(modifiers, function (_ref) {\n      var name = _ref.name;\n      return name === requestingName;\n    });\n\n    var isRequired = !!requesting && modifiers.some(function (modifier) {\n      return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n    });\n\n    if (!isRequired) {\n      var _requesting = '`' + requestingName + '`';\n      var requested = '`' + requestedName + '`';\n      console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\n    }\n    return isRequired;\n  }\n\n  /**\n   * @function\n   * @memberof Modifiers\n   * @argument {Object} data - The data object generated by update method\n   * @argument {Object} options - Modifiers configuration and options\n   * @returns {Object} The data object, properly modified\n   */\n  function arrow(data, options) {\n    var _data$offsets$arrow;\n\n    // arrow depends on keepTogether in order to work\n    if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n      return data;\n    }\n\n    var arrowElement = options.element;\n\n    // if arrowElement is a string, suppose it's a CSS selector\n    if (typeof arrowElement === 'string') {\n      arrowElement = data.instance.popper.querySelector(arrowElement);\n\n      // if arrowElement is not found, don't run the modifier\n      if (!arrowElement) {\n        return data;\n      }\n    } else {\n      // if the arrowElement isn't a query selector we must check that the\n      // provided DOM node is child of its popper node\n      if (!data.instance.popper.contains(arrowElement)) {\n        console.warn('WARNING: `arrow.element` must be child of its popper element!');\n        return data;\n      }\n    }\n\n    var placement = data.placement.split('-')[0];\n    var _data$offsets = data.offsets,\n        popper = _data$offsets.popper,\n        reference = _data$offsets.reference;\n\n    var isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n    var len = isVertical ? 'height' : 'width';\n    var sideCapitalized = isVertical ? 'Top' : 'Left';\n    var side = sideCapitalized.toLowerCase();\n    var altSide = isVertical ? 'left' : 'top';\n    var opSide = isVertical ? 'bottom' : 'right';\n    var arrowElementSize = getOuterSizes(arrowElement)[len];\n\n    //\n    // extends keepTogether behavior making sure the popper and its\n    // reference have enough pixels in conjunction\n    //\n\n    // top/left side\n    if (reference[opSide] - arrowElementSize < popper[side]) {\n      data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n    }\n    // bottom/right side\n    if (reference[side] + arrowElementSize > popper[opSide]) {\n      data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n    }\n    data.offsets.popper = getClientRect(data.offsets.popper);\n\n    // compute center of the popper\n    var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n    // Compute the sideValue using the updated popper offsets\n    // take popper margin in account because we don't have this info available\n    var css = getStyleComputedProperty(data.instance.popper);\n    var popperMarginSide = parseFloat(css['margin' + sideCapitalized]);\n    var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width']);\n    var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n    // prevent arrowElement from being placed not contiguously to its popper\n    sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n    data.arrowElement = arrowElement;\n    data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty$1(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty$1(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);\n\n    return data;\n  }\n\n  /**\n   * Get the opposite placement variation of the given one\n   * @method\n   * @memberof Popper.Utils\n   * @argument {String} placement variation\n   * @returns {String} flipped placement variation\n   */\n  function getOppositeVariation(variation) {\n    if (variation === 'end') {\n      return 'start';\n    } else if (variation === 'start') {\n      return 'end';\n    }\n    return variation;\n  }\n\n  /**\n   * List of accepted placements to use as values of the `placement` option.<br />\n   * Valid placements are:\n   * - `auto`\n   * - `top`\n   * - `right`\n   * - `bottom`\n   * - `left`\n   *\n   * Each placement can have a variation from this list:\n   * - `-start`\n   * - `-end`\n   *\n   * Variations are interpreted easily if you think of them as the left to right\n   * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n   * is right.<br />\n   * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n   *\n   * Some valid examples are:\n   * - `top-end` (on top of reference, right aligned)\n   * - `right-start` (on right of reference, top aligned)\n   * - `bottom` (on bottom, centered)\n   * - `auto-end` (on the side with more space available, alignment depends by placement)\n   *\n   * @static\n   * @type {Array}\n   * @enum {String}\n   * @readonly\n   * @method placements\n   * @memberof Popper\n   */\n  var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\n\n  // Get rid of `auto` `auto-start` and `auto-end`\n  var validPlacements = placements.slice(3);\n\n  /**\n   * Given an initial placement, returns all the subsequent placements\n   * clockwise (or counter-clockwise).\n   *\n   * @method\n   * @memberof Popper.Utils\n   * @argument {String} placement - A valid placement (it accepts variations)\n   * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n   * @returns {Array} placements including their variations\n   */\n  function clockwise(placement) {\n    var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var index = validPlacements.indexOf(placement);\n    var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n    return counter ? arr.reverse() : arr;\n  }\n\n  var BEHAVIORS = {\n    FLIP: 'flip',\n    CLOCKWISE: 'clockwise',\n    COUNTERCLOCKWISE: 'counterclockwise'\n  };\n\n  /**\n   * @function\n   * @memberof Modifiers\n   * @argument {Object} data - The data object generated by update method\n   * @argument {Object} options - Modifiers configuration and options\n   * @returns {Object} The data object, properly modified\n   */\n  function flip(data, options) {\n    // if `inner` modifier is enabled, we can't use the `flip` modifier\n    if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n      return data;\n    }\n\n    if (data.flipped && data.placement === data.originalPlacement) {\n      // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n      return data;\n    }\n\n    var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);\n\n    var placement = data.placement.split('-')[0];\n    var placementOpposite = getOppositePlacement(placement);\n    var variation = data.placement.split('-')[1] || '';\n\n    var flipOrder = [];\n\n    switch (options.behavior) {\n      case BEHAVIORS.FLIP:\n        flipOrder = [placement, placementOpposite];\n        break;\n      case BEHAVIORS.CLOCKWISE:\n        flipOrder = clockwise(placement);\n        break;\n      case BEHAVIORS.COUNTERCLOCKWISE:\n        flipOrder = clockwise(placement, true);\n        break;\n      default:\n        flipOrder = options.behavior;\n    }\n\n    flipOrder.forEach(function (step, index) {\n      if (placement !== step || flipOrder.length === index + 1) {\n        return data;\n      }\n\n      placement = data.placement.split('-')[0];\n      placementOpposite = getOppositePlacement(placement);\n\n      var popperOffsets = data.offsets.popper;\n      var refOffsets = data.offsets.reference;\n\n      // using floor because the reference offsets may contain decimals we are not going to consider here\n      var floor = Math.floor;\n      var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n\n      var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n      var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n      var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n      var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n      var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;\n\n      // flip the variation if required\n      var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n\n      // flips variation if reference element overflows boundaries\n      var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);\n\n      // flips variation if popper content overflows boundaries\n      var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);\n\n      var flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n      if (overlapsRef || overflowsBoundaries || flippedVariation) {\n        // this boolean to detect any flip loop\n        data.flipped = true;\n\n        if (overlapsRef || overflowsBoundaries) {\n          placement = flipOrder[index + 1];\n        }\n\n        if (flippedVariation) {\n          variation = getOppositeVariation(variation);\n        }\n\n        data.placement = placement + (variation ? '-' + variation : '');\n\n        // this object contains `position`, we want to preserve it along with\n        // any additional property we may add in the future\n        data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n\n        data = runModifiers(data.instance.modifiers, data, 'flip');\n      }\n    });\n    return data;\n  }\n\n  /**\n   * @function\n   * @memberof Modifiers\n   * @argument {Object} data - The data object generated by update method\n   * @argument {Object} options - Modifiers configuration and options\n   * @returns {Object} The data object, properly modified\n   */\n  function keepTogether(data) {\n    var _data$offsets = data.offsets,\n        popper = _data$offsets.popper,\n        reference = _data$offsets.reference;\n\n    var placement = data.placement.split('-')[0];\n    var floor = Math.floor;\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n    var side = isVertical ? 'right' : 'bottom';\n    var opSide = isVertical ? 'left' : 'top';\n    var measurement = isVertical ? 'width' : 'height';\n\n    if (popper[side] < floor(reference[opSide])) {\n      data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n    }\n    if (popper[opSide] > floor(reference[side])) {\n      data.offsets.popper[opSide] = floor(reference[side]);\n    }\n\n    return data;\n  }\n\n  /**\n   * Converts a string containing value + unit into a px value number\n   * @function\n   * @memberof {modifiers~offset}\n   * @private\n   * @argument {String} str - Value + unit string\n   * @argument {String} measurement - `height` or `width`\n   * @argument {Object} popperOffsets\n   * @argument {Object} referenceOffsets\n   * @returns {Number|String}\n   * Value in pixels, or original string if no values were extracted\n   */\n  function toValue(str, measurement, popperOffsets, referenceOffsets) {\n    // separate value from unit\n    var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n    var value = +split[1];\n    var unit = split[2];\n\n    // If it's not a number it's an operator, I guess\n    if (!value) {\n      return str;\n    }\n\n    if (unit.indexOf('%') === 0) {\n      var element = void 0;\n      switch (unit) {\n        case '%p':\n          element = popperOffsets;\n          break;\n        case '%':\n        case '%r':\n        default:\n          element = referenceOffsets;\n      }\n\n      var rect = getClientRect(element);\n      return rect[measurement] / 100 * value;\n    } else if (unit === 'vh' || unit === 'vw') {\n      // if is a vh or vw, we calculate the size based on the viewport\n      var size = void 0;\n      if (unit === 'vh') {\n        size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n      } else {\n        size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n      }\n      return size / 100 * value;\n    } else {\n      // if is an explicit pixel unit, we get rid of the unit and keep the value\n      // if is an implicit unit, it's px, and we return just the value\n      return value;\n    }\n  }\n\n  /**\n   * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n   * @function\n   * @memberof {modifiers~offset}\n   * @private\n   * @argument {String} offset\n   * @argument {Object} popperOffsets\n   * @argument {Object} referenceOffsets\n   * @argument {String} basePlacement\n   * @returns {Array} a two cells array with x and y offsets in numbers\n   */\n  function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n    var offsets = [0, 0];\n\n    // Use height if placement is left or right and index is 0 otherwise use width\n    // in this way the first offset will use an axis and the second one\n    // will use the other one\n    var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n    // Split the offset string to obtain a list of values and operands\n    // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n    var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n      return frag.trim();\n    });\n\n    // Detect if the offset string contains a pair of values or a single one\n    // they could be separated by comma or space\n    var divider = fragments.indexOf(find(fragments, function (frag) {\n      return frag.search(/,|\\s/) !== -1;\n    }));\n\n    if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n      console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n    }\n\n    // If divider is found, we divide the list of values and operands to divide\n    // them by ofset X and Y.\n    var splitRegex = /\\s*,\\s*|\\s+/;\n    var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\n\n    // Convert the values with units to absolute pixels to allow our computations\n    ops = ops.map(function (op, index) {\n      // Most of the units rely on the orientation of the popper\n      var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\n      var mergeWithPrevious = false;\n      return op\n      // This aggregates any `+` or `-` sign that aren't considered operators\n      // e.g.: 10 + +5 => [10, +, +5]\n      .reduce(function (a, b) {\n        if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n          a[a.length - 1] = b;\n          mergeWithPrevious = true;\n          return a;\n        } else if (mergeWithPrevious) {\n          a[a.length - 1] += b;\n          mergeWithPrevious = false;\n          return a;\n        } else {\n          return a.concat(b);\n        }\n      }, [])\n      // Here we convert the string values into number values (in px)\n      .map(function (str) {\n        return toValue(str, measurement, popperOffsets, referenceOffsets);\n      });\n    });\n\n    // Loop trough the offsets arrays and execute the operations\n    ops.forEach(function (op, index) {\n      op.forEach(function (frag, index2) {\n        if (isNumeric(frag)) {\n          offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n        }\n      });\n    });\n    return offsets;\n  }\n\n  /**\n   * @function\n   * @memberof Modifiers\n   * @argument {Object} data - The data object generated by update method\n   * @argument {Object} options - Modifiers configuration and options\n   * @argument {Number|String} options.offset=0\n   * The offset value as described in the modifier description\n   * @returns {Object} The data object, properly modified\n   */\n  function offset$1(data, _ref) {\n    var offset = _ref.offset;\n    var placement = data.placement,\n        _data$offsets = data.offsets,\n        popper = _data$offsets.popper,\n        reference = _data$offsets.reference;\n\n    var basePlacement = placement.split('-')[0];\n\n    var offsets = void 0;\n    if (isNumeric(+offset)) {\n      offsets = [+offset, 0];\n    } else {\n      offsets = parseOffset(offset, popper, reference, basePlacement);\n    }\n\n    if (basePlacement === 'left') {\n      popper.top += offsets[0];\n      popper.left -= offsets[1];\n    } else if (basePlacement === 'right') {\n      popper.top += offsets[0];\n      popper.left += offsets[1];\n    } else if (basePlacement === 'top') {\n      popper.left += offsets[0];\n      popper.top -= offsets[1];\n    } else if (basePlacement === 'bottom') {\n      popper.left += offsets[0];\n      popper.top += offsets[1];\n    }\n\n    data.popper = popper;\n    return data;\n  }\n\n  /**\n   * @function\n   * @memberof Modifiers\n   * @argument {Object} data - The data object generated by `update` method\n   * @argument {Object} options - Modifiers configuration and options\n   * @returns {Object} The data object, properly modified\n   */\n  function preventOverflow(data, options) {\n    var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\n\n    // If offsetParent is the reference element, we really want to\n    // go one step up and use the next offsetParent as reference to\n    // avoid to make this modifier completely useless and look like broken\n    if (data.instance.reference === boundariesElement) {\n      boundariesElement = getOffsetParent(boundariesElement);\n    }\n\n    // NOTE: DOM access here\n    // resets the popper's position so that the document size can be calculated excluding\n    // the size of the popper element itself\n    var transformProp = getSupportedPropertyName('transform');\n    var popperStyles = data.instance.popper.style; // assignment to help minification\n    var top = popperStyles.top,\n        left = popperStyles.left,\n        transform = popperStyles[transformProp];\n\n    popperStyles.top = '';\n    popperStyles.left = '';\n    popperStyles[transformProp] = '';\n\n    var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);\n\n    // NOTE: DOM access here\n    // restores the original style properties after the offsets have been computed\n    popperStyles.top = top;\n    popperStyles.left = left;\n    popperStyles[transformProp] = transform;\n\n    options.boundaries = boundaries;\n\n    var order = options.priority;\n    var popper = data.offsets.popper;\n\n    var check = {\n      primary: function primary(placement) {\n        var value = popper[placement];\n        if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n          value = Math.max(popper[placement], boundaries[placement]);\n        }\n        return defineProperty$1({}, placement, value);\n      },\n      secondary: function secondary(placement) {\n        var mainSide = placement === 'right' ? 'left' : 'top';\n        var value = popper[mainSide];\n        if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n          value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\n        }\n        return defineProperty$1({}, mainSide, value);\n      }\n    };\n\n    order.forEach(function (placement) {\n      var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n      popper = _extends({}, popper, check[side](placement));\n    });\n\n    data.offsets.popper = popper;\n\n    return data;\n  }\n\n  /**\n   * @function\n   * @memberof Modifiers\n   * @argument {Object} data - The data object generated by `update` method\n   * @argument {Object} options - Modifiers configuration and options\n   * @returns {Object} The data object, properly modified\n   */\n  function shift(data) {\n    var placement = data.placement;\n    var basePlacement = placement.split('-')[0];\n    var shiftvariation = placement.split('-')[1];\n\n    // if shift shiftvariation is specified, run the modifier\n    if (shiftvariation) {\n      var _data$offsets = data.offsets,\n          reference = _data$offsets.reference,\n          popper = _data$offsets.popper;\n\n      var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n      var side = isVertical ? 'left' : 'top';\n      var measurement = isVertical ? 'width' : 'height';\n\n      var shiftOffsets = {\n        start: defineProperty$1({}, side, reference[side]),\n        end: defineProperty$1({}, side, reference[side] + reference[measurement] - popper[measurement])\n      };\n\n      data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n    }\n\n    return data;\n  }\n\n  /**\n   * @function\n   * @memberof Modifiers\n   * @argument {Object} data - The data object generated by update method\n   * @argument {Object} options - Modifiers configuration and options\n   * @returns {Object} The data object, properly modified\n   */\n  function hide(data) {\n    if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n      return data;\n    }\n\n    var refRect = data.offsets.reference;\n    var bound = find(data.instance.modifiers, function (modifier) {\n      return modifier.name === 'preventOverflow';\n    }).boundaries;\n\n    if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n      // Avoid unnecessary DOM access if visibility hasn't changed\n      if (data.hide === true) {\n        return data;\n      }\n\n      data.hide = true;\n      data.attributes['x-out-of-boundaries'] = '';\n    } else {\n      // Avoid unnecessary DOM access if visibility hasn't changed\n      if (data.hide === false) {\n        return data;\n      }\n\n      data.hide = false;\n      data.attributes['x-out-of-boundaries'] = false;\n    }\n\n    return data;\n  }\n\n  /**\n   * @function\n   * @memberof Modifiers\n   * @argument {Object} data - The data object generated by `update` method\n   * @argument {Object} options - Modifiers configuration and options\n   * @returns {Object} The data object, properly modified\n   */\n  function inner(data) {\n    var placement = data.placement;\n    var basePlacement = placement.split('-')[0];\n    var _data$offsets = data.offsets,\n        popper = _data$offsets.popper,\n        reference = _data$offsets.reference;\n\n    var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n    var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n    popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n    data.placement = getOppositePlacement(placement);\n    data.offsets.popper = getClientRect(popper);\n\n    return data;\n  }\n\n  /**\n   * Modifier function, each modifier can have a function of this type assigned\n   * to its `fn` property.<br />\n   * These functions will be called on each update, this means that you must\n   * make sure they are performant enough to avoid performance bottlenecks.\n   *\n   * @function ModifierFn\n   * @argument {dataObject} data - The data object generated by `update` method\n   * @argument {Object} options - Modifiers configuration and options\n   * @returns {dataObject} The data object, properly modified\n   */\n\n  /**\n   * Modifiers are plugins used to alter the behavior of your poppers.<br />\n   * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n   * needed by the library.\n   *\n   * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n   * All the other properties are configurations that could be tweaked.\n   * @namespace modifiers\n   */\n  var modifiers = {\n    /**\n     * Modifier used to shift the popper on the start or end of its reference\n     * element.<br />\n     * It will read the variation of the `placement` property.<br />\n     * It can be one either `-end` or `-start`.\n     * @memberof modifiers\n     * @inner\n     */\n    shift: {\n      /** @prop {number} order=100 - Index used to define the order of execution */\n      order: 100,\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n      enabled: true,\n      /** @prop {ModifierFn} */\n      fn: shift\n    },\n\n    /**\n     * The `offset` modifier can shift your popper on both its axis.\n     *\n     * It accepts the following units:\n     * - `px` or unit-less, interpreted as pixels\n     * - `%` or `%r`, percentage relative to the length of the reference element\n     * - `%p`, percentage relative to the length of the popper element\n     * - `vw`, CSS viewport width unit\n     * - `vh`, CSS viewport height unit\n     *\n     * For length is intended the main axis relative to the placement of the popper.<br />\n     * This means that if the placement is `top` or `bottom`, the length will be the\n     * `width`. In case of `left` or `right`, it will be the `height`.\n     *\n     * You can provide a single value (as `Number` or `String`), or a pair of values\n     * as `String` divided by a comma or one (or more) white spaces.<br />\n     * The latter is a deprecated method because it leads to confusion and will be\n     * removed in v2.<br />\n     * Additionally, it accepts additions and subtractions between different units.\n     * Note that multiplications and divisions aren't supported.\n     *\n     * Valid examples are:\n     * ```\n     * 10\n     * '10%'\n     * '10, 10'\n     * '10%, 10'\n     * '10 + 10%'\n     * '10 - 5vh + 3%'\n     * '-10px + 5vh, 5px - 6%'\n     * ```\n     * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n     * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n     * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n     *\n     * @memberof modifiers\n     * @inner\n     */\n    offset: {\n      /** @prop {number} order=200 - Index used to define the order of execution */\n      order: 200,\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n      enabled: true,\n      /** @prop {ModifierFn} */\n      fn: offset$1,\n      /** @prop {Number|String} offset=0\n       * The offset value as described in the modifier description\n       */\n      offset: 0\n    },\n\n    /**\n     * Modifier used to prevent the popper from being positioned outside the boundary.\n     *\n     * A scenario exists where the reference itself is not within the boundaries.<br />\n     * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n     * In this case we need to decide whether the popper should either:\n     *\n     * - detach from the reference and remain \"trapped\" in the boundaries, or\n     * - if it should ignore the boundary and \"escape with its reference\"\n     *\n     * When `escapeWithReference` is set to`true` and reference is completely\n     * outside its boundaries, the popper will overflow (or completely leave)\n     * the boundaries in order to remain attached to the edge of the reference.\n     *\n     * @memberof modifiers\n     * @inner\n     */\n    preventOverflow: {\n      /** @prop {number} order=300 - Index used to define the order of execution */\n      order: 300,\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n      enabled: true,\n      /** @prop {ModifierFn} */\n      fn: preventOverflow,\n      /**\n       * @prop {Array} [priority=['left','right','top','bottom']]\n       * Popper will try to prevent overflow following these priorities by default,\n       * then, it could overflow on the left and on top of the `boundariesElement`\n       */\n      priority: ['left', 'right', 'top', 'bottom'],\n      /**\n       * @prop {number} padding=5\n       * Amount of pixel used to define a minimum distance between the boundaries\n       * and the popper. This makes sure the popper always has a little padding\n       * between the edges of its container\n       */\n      padding: 5,\n      /**\n       * @prop {String|HTMLElement} boundariesElement='scrollParent'\n       * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n       * `viewport` or any DOM element.\n       */\n      boundariesElement: 'scrollParent'\n    },\n\n    /**\n     * Modifier used to make sure the reference and its popper stay near each other\n     * without leaving any gap between the two. Especially useful when the arrow is\n     * enabled and you want to ensure that it points to its reference element.\n     * It cares only about the first axis. You can still have poppers with margin\n     * between the popper and its reference element.\n     * @memberof modifiers\n     * @inner\n     */\n    keepTogether: {\n      /** @prop {number} order=400 - Index used to define the order of execution */\n      order: 400,\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n      enabled: true,\n      /** @prop {ModifierFn} */\n      fn: keepTogether\n    },\n\n    /**\n     * This modifier is used to move the `arrowElement` of the popper to make\n     * sure it is positioned between the reference element and its popper element.\n     * It will read the outer size of the `arrowElement` node to detect how many\n     * pixels of conjunction are needed.\n     *\n     * It has no effect if no `arrowElement` is provided.\n     * @memberof modifiers\n     * @inner\n     */\n    arrow: {\n      /** @prop {number} order=500 - Index used to define the order of execution */\n      order: 500,\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n      enabled: true,\n      /** @prop {ModifierFn} */\n      fn: arrow,\n      /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n      element: '[x-arrow]'\n    },\n\n    /**\n     * Modifier used to flip the popper's placement when it starts to overlap its\n     * reference element.\n     *\n     * Requires the `preventOverflow` modifier before it in order to work.\n     *\n     * **NOTE:** this modifier will interrupt the current update cycle and will\n     * restart it if it detects the need to flip the placement.\n     * @memberof modifiers\n     * @inner\n     */\n    flip: {\n      /** @prop {number} order=600 - Index used to define the order of execution */\n      order: 600,\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n      enabled: true,\n      /** @prop {ModifierFn} */\n      fn: flip,\n      /**\n       * @prop {String|Array} behavior='flip'\n       * The behavior used to change the popper's placement. It can be one of\n       * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n       * placements (with optional variations)\n       */\n      behavior: 'flip',\n      /**\n       * @prop {number} padding=5\n       * The popper will flip if it hits the edges of the `boundariesElement`\n       */\n      padding: 5,\n      /**\n       * @prop {String|HTMLElement} boundariesElement='viewport'\n       * The element which will define the boundaries of the popper position.\n       * The popper will never be placed outside of the defined boundaries\n       * (except if `keepTogether` is enabled)\n       */\n      boundariesElement: 'viewport',\n      /**\n       * @prop {Boolean} flipVariations=false\n       * The popper will switch placement variation between `-start` and `-end` when\n       * the reference element overlaps its boundaries.\n       *\n       * The original placement should have a set variation.\n       */\n      flipVariations: false,\n      /**\n       * @prop {Boolean} flipVariationsByContent=false\n       * The popper will switch placement variation between `-start` and `-end` when\n       * the popper element overlaps its reference boundaries.\n       *\n       * The original placement should have a set variation.\n       */\n      flipVariationsByContent: false\n    },\n\n    /**\n     * Modifier used to make the popper flow toward the inner of the reference element.\n     * By default, when this modifier is disabled, the popper will be placed outside\n     * the reference element.\n     * @memberof modifiers\n     * @inner\n     */\n    inner: {\n      /** @prop {number} order=700 - Index used to define the order of execution */\n      order: 700,\n      /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n      enabled: false,\n      /** @prop {ModifierFn} */\n      fn: inner\n    },\n\n    /**\n     * Modifier used to hide the popper when its reference element is outside of the\n     * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n     * be used to hide with a CSS selector the popper when its reference is\n     * out of boundaries.\n     *\n     * Requires the `preventOverflow` modifier before it in order to work.\n     * @memberof modifiers\n     * @inner\n     */\n    hide: {\n      /** @prop {number} order=800 - Index used to define the order of execution */\n      order: 800,\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n      enabled: true,\n      /** @prop {ModifierFn} */\n      fn: hide\n    },\n\n    /**\n     * Computes the style that will be applied to the popper element to gets\n     * properly positioned.\n     *\n     * Note that this modifier will not touch the DOM, it just prepares the styles\n     * so that `applyStyle` modifier can apply it. This separation is useful\n     * in case you need to replace `applyStyle` with a custom implementation.\n     *\n     * This modifier has `850` as `order` value to maintain backward compatibility\n     * with previous versions of Popper.js. Expect the modifiers ordering method\n     * to change in future major versions of the library.\n     *\n     * @memberof modifiers\n     * @inner\n     */\n    computeStyle: {\n      /** @prop {number} order=850 - Index used to define the order of execution */\n      order: 850,\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n      enabled: true,\n      /** @prop {ModifierFn} */\n      fn: computeStyle,\n      /**\n       * @prop {Boolean} gpuAcceleration=true\n       * If true, it uses the CSS 3D transformation to position the popper.\n       * Otherwise, it will use the `top` and `left` properties\n       */\n      gpuAcceleration: true,\n      /**\n       * @prop {string} [x='bottom']\n       * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n       * Change this if your popper should grow in a direction different from `bottom`\n       */\n      x: 'bottom',\n      /**\n       * @prop {string} [x='left']\n       * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n       * Change this if your popper should grow in a direction different from `right`\n       */\n      y: 'right'\n    },\n\n    /**\n     * Applies the computed styles to the popper element.\n     *\n     * All the DOM manipulations are limited to this modifier. This is useful in case\n     * you want to integrate Popper.js inside a framework or view library and you\n     * want to delegate all the DOM manipulations to it.\n     *\n     * Note that if you disable this modifier, you must make sure the popper element\n     * has its position set to `absolute` before Popper.js can do its work!\n     *\n     * Just disable this modifier and define your own to achieve the desired effect.\n     *\n     * @memberof modifiers\n     * @inner\n     */\n    applyStyle: {\n      /** @prop {number} order=900 - Index used to define the order of execution */\n      order: 900,\n      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n      enabled: true,\n      /** @prop {ModifierFn} */\n      fn: applyStyle,\n      /** @prop {Function} */\n      onLoad: applyStyleOnLoad,\n      /**\n       * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n       * @prop {Boolean} gpuAcceleration=true\n       * If true, it uses the CSS 3D transformation to position the popper.\n       * Otherwise, it will use the `top` and `left` properties\n       */\n      gpuAcceleration: undefined\n    }\n  };\n\n  /**\n   * The `dataObject` is an object containing all the information used by Popper.js.\n   * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n   * @name dataObject\n   * @property {Object} data.instance The Popper.js instance\n   * @property {String} data.placement Placement applied to popper\n   * @property {String} data.originalPlacement Placement originally defined on init\n   * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n   * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n   * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n   * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n   * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n   * @property {Object} data.boundaries Offsets of the popper boundaries\n   * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n   * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n   * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n   * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n   */\n\n  /**\n   * Default options provided to Popper.js constructor.<br />\n   * These can be overridden using the `options` argument of Popper.js.<br />\n   * To override an option, simply pass an object with the same\n   * structure of the `options` object, as the 3rd argument. For example:\n   * ```\n   * new Popper(ref, pop, {\n   *   modifiers: {\n   *     preventOverflow: { enabled: false }\n   *   }\n   * })\n   * ```\n   * @type {Object}\n   * @static\n   * @memberof Popper\n   */\n  var Defaults = {\n    /**\n     * Popper's placement.\n     * @prop {Popper.placements} placement='bottom'\n     */\n    placement: 'bottom',\n\n    /**\n     * Set this to true if you want popper to position it self in 'fixed' mode\n     * @prop {Boolean} positionFixed=false\n     */\n    positionFixed: false,\n\n    /**\n     * Whether events (resize, scroll) are initially enabled.\n     * @prop {Boolean} eventsEnabled=true\n     */\n    eventsEnabled: true,\n\n    /**\n     * Set to true if you want to automatically remove the popper when\n     * you call the `destroy` method.\n     * @prop {Boolean} removeOnDestroy=false\n     */\n    removeOnDestroy: false,\n\n    /**\n     * Callback called when the popper is created.<br />\n     * By default, it is set to no-op.<br />\n     * Access Popper.js instance with `data.instance`.\n     * @prop {onCreate}\n     */\n    onCreate: function onCreate() {},\n\n    /**\n     * Callback called when the popper is updated. This callback is not called\n     * on the initialization/creation of the popper, but only on subsequent\n     * updates.<br />\n     * By default, it is set to no-op.<br />\n     * Access Popper.js instance with `data.instance`.\n     * @prop {onUpdate}\n     */\n    onUpdate: function onUpdate() {},\n\n    /**\n     * List of modifiers used to modify the offsets before they are applied to the popper.\n     * They provide most of the functionalities of Popper.js.\n     * @prop {modifiers}\n     */\n    modifiers: modifiers\n  };\n\n  /**\n   * @callback onCreate\n   * @param {dataObject} data\n   */\n\n  /**\n   * @callback onUpdate\n   * @param {dataObject} data\n   */\n\n  // Utils\n  // Methods\n  var Popper = function () {\n    /**\n     * Creates a new Popper.js instance.\n     * @class Popper\n     * @param {Element|referenceObject} reference - The reference element used to position the popper\n     * @param {Element} popper - The HTML / XML element used as the popper\n     * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n     * @return {Object} instance - The generated Popper.js instance\n     */\n    function Popper(reference, popper) {\n      var _this = this;\n\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      classCallCheck(this, Popper);\n\n      this.scheduleUpdate = function () {\n        return requestAnimationFrame(_this.update);\n      };\n\n      // make update() debounced, so that it only runs at most once-per-tick\n      this.update = debounce(this.update.bind(this));\n\n      // with {} we create a new object with the options inside it\n      this.options = _extends({}, Popper.Defaults, options);\n\n      // init state\n      this.state = {\n        isDestroyed: false,\n        isCreated: false,\n        scrollParents: []\n      };\n\n      // get reference and popper elements (allow jQuery wrappers)\n      this.reference = reference && reference.jquery ? reference[0] : reference;\n      this.popper = popper && popper.jquery ? popper[0] : popper;\n\n      // Deep merge modifiers options\n      this.options.modifiers = {};\n      Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n        _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n      });\n\n      // Refactoring modifiers' list (Object => Array)\n      this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n        return _extends({\n          name: name\n        }, _this.options.modifiers[name]);\n      })\n      // sort the modifiers by order\n      .sort(function (a, b) {\n        return a.order - b.order;\n      });\n\n      // modifiers have the ability to execute arbitrary code when Popper.js get inited\n      // such code is executed in the same order of its modifier\n      // they could add new properties to their options configuration\n      // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n      this.modifiers.forEach(function (modifierOptions) {\n        if (modifierOptions.enabled && isFunction$1(modifierOptions.onLoad)) {\n          modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n        }\n      });\n\n      // fire the first update to position the popper in the right place\n      this.update();\n\n      var eventsEnabled = this.options.eventsEnabled;\n      if (eventsEnabled) {\n        // setup event listeners, they will take care of update the position in specific situations\n        this.enableEventListeners();\n      }\n\n      this.state.eventsEnabled = eventsEnabled;\n    }\n\n    // We can't use class properties because they don't get listed in the\n    // class prototype and break stuff like Sinon stubs\n\n\n    createClass(Popper, [{\n      key: 'update',\n      value: function update$$1() {\n        return update.call(this);\n      }\n    }, {\n      key: 'destroy',\n      value: function destroy$$1() {\n        return destroy$1.call(this);\n      }\n    }, {\n      key: 'enableEventListeners',\n      value: function enableEventListeners$$1() {\n        return enableEventListeners.call(this);\n      }\n    }, {\n      key: 'disableEventListeners',\n      value: function disableEventListeners$$1() {\n        return disableEventListeners.call(this);\n      }\n\n      /**\n       * Schedules an update. It will run on the next UI update available.\n       * @method scheduleUpdate\n       * @memberof Popper\n       */\n\n\n      /**\n       * Collection of utilities useful when writing custom modifiers.\n       * Starting from version 1.7, this method is available only if you\n       * include `popper-utils.js` before `popper.js`.\n       *\n       * **DEPRECATION**: This way to access PopperUtils is deprecated\n       * and will be removed in v2! Use the PopperUtils module directly instead.\n       * Due to the high instability of the methods contained in Utils, we can't\n       * guarantee them to follow semver. Use them at your own risk!\n       * @static\n       * @private\n       * @type {Object}\n       * @deprecated since version 1.8\n       * @member Utils\n       * @memberof Popper\n       */\n\n    }]);\n    return Popper;\n  }();\n\n  /**\n   * The `referenceObject` is an object that provides an interface compatible with Popper.js\n   * and lets you use it as replacement of a real DOM node.<br />\n   * You can use this method to position a popper relatively to a set of coordinates\n   * in case you don't have a DOM node to use as reference.\n   *\n   * ```\n   * new Popper(referenceObject, popperNode);\n   * ```\n   *\n   * NB: This feature isn't supported in Internet Explorer 10.\n   * @name referenceObject\n   * @property {Function} data.getBoundingClientRect\n   * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n   * @property {number} data.clientWidth\n   * An ES6 getter that will return the width of the virtual reference element.\n   * @property {number} data.clientHeight\n   * An ES6 getter that will return the height of the virtual reference element.\n   */\n\n\n  Popper.Utils = (typeof window !== 'undefined' ? window : __webpack_require__.g).PopperUtils;\n  Popper.placements = placements;\n  Popper.Defaults = Defaults;\n\n  var BvEvent =\n  /*#__PURE__*/\n  function () {\n    function BvEvent(type) {\n      var eventInit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _classCallCheck(this, BvEvent);\n\n      // Start by emulating native Event constructor\n      if (!type) {\n        /* istanbul ignore next */\n        throw new TypeError(\"Failed to construct '\".concat(this.constructor.name, \"'. 1 argument required, \").concat(arguments.length, \" given.\"));\n      } // Merge defaults first, the eventInit, and the type last\n      // so it can't be overwritten\n\n\n      assign(this, BvEvent.Defaults, this.constructor.Defaults, eventInit, {\n        type: type\n      }); // Freeze some props as readonly, but leave them enumerable\n\n      defineProperties(this, {\n        type: readonlyDescriptor(),\n        cancelable: readonlyDescriptor(),\n        nativeEvent: readonlyDescriptor(),\n        target: readonlyDescriptor(),\n        relatedTarget: readonlyDescriptor(),\n        vueTarget: readonlyDescriptor(),\n        componentId: readonlyDescriptor()\n      }); // Create a private variable using closure scoping\n\n      var defaultPrevented = false; // Recreate preventDefault method. One way setter\n\n      this.preventDefault = function preventDefault() {\n        if (this.cancelable) {\n          defaultPrevented = true;\n        }\n      }; // Create `defaultPrevented` publicly accessible prop that\n      // can only be altered by the preventDefault method\n\n\n      defineProperty(this, 'defaultPrevented', {\n        enumerable: true,\n        get: function get() {\n          return defaultPrevented;\n        }\n      });\n    }\n\n    _createClass(BvEvent, null, [{\n      key: \"Defaults\",\n      get: function get() {\n        return {\n          type: '',\n          cancelable: true,\n          nativeEvent: null,\n          target: null,\n          relatedTarget: null,\n          vueTarget: null,\n          componentId: null\n        };\n      }\n    }]);\n\n    return BvEvent;\n  }(); // Named Exports\n\n  var clickOutMixin = {\n    data: function data() {\n      return {\n        listenForClickOut: false\n      };\n    },\n    watch: {\n      listenForClickOut: function listenForClickOut(newValue, oldValue) {\n        if (newValue !== oldValue) {\n          eventOff(this.clickOutElement, this.clickOutEventName, this._clickOutHandler, EVENT_OPTIONS_NO_CAPTURE);\n\n          if (newValue) {\n            eventOn(this.clickOutElement, this.clickOutEventName, this._clickOutHandler, EVENT_OPTIONS_NO_CAPTURE);\n          }\n        }\n      }\n    },\n    beforeCreate: function beforeCreate() {\n      // Declare non-reactive properties\n      this.clickOutElement = null;\n      this.clickOutEventName = null;\n    },\n    mounted: function mounted() {\n      if (!this.clickOutElement) {\n        this.clickOutElement = document;\n      }\n\n      if (!this.clickOutEventName) {\n        this.clickOutEventName = 'click';\n      }\n\n      if (this.listenForClickOut) {\n        eventOn(this.clickOutElement, this.clickOutEventName, this._clickOutHandler, EVENT_OPTIONS_NO_CAPTURE);\n      }\n    },\n    beforeDestroy: function beforeDestroy()\n    /* istanbul ignore next */\n    {\n      eventOff(this.clickOutElement, this.clickOutEventName, this._clickOutHandler, EVENT_OPTIONS_NO_CAPTURE);\n    },\n    methods: {\n      isClickOut: function isClickOut(evt) {\n        return !contains(this.$el, evt.target);\n      },\n      _clickOutHandler: function _clickOutHandler(evt) {\n        if (this.clickOutHandler && this.isClickOut(evt)) {\n          this.clickOutHandler(evt);\n        }\n      }\n    }\n  };\n\n  var focusInMixin = {\n    data: function data() {\n      return {\n        listenForFocusIn: false\n      };\n    },\n    watch: {\n      listenForFocusIn: function listenForFocusIn(newValue, oldValue) {\n        if (newValue !== oldValue) {\n          eventOff(this.focusInElement, 'focusin', this._focusInHandler, EVENT_OPTIONS_NO_CAPTURE);\n\n          if (newValue) {\n            eventOn(this.focusInElement, 'focusin', this._focusInHandler, EVENT_OPTIONS_NO_CAPTURE);\n          }\n        }\n      }\n    },\n    beforeCreate: function beforeCreate() {\n      // Declare non-reactive properties\n      this.focusInElement = null;\n    },\n    mounted: function mounted() {\n      if (!this.focusInElement) {\n        this.focusInElement = document;\n      }\n\n      if (this.listenForFocusIn) {\n        eventOn(this.focusInElement, 'focusin', this._focusInHandler, EVENT_OPTIONS_NO_CAPTURE);\n      }\n    },\n    beforeDestroy: function beforeDestroy()\n    /* istanbul ignore next */\n    {\n      eventOff(this.focusInElement, 'focusin', this._focusInHandler, EVENT_OPTIONS_NO_CAPTURE);\n    },\n    methods: {\n      _focusInHandler: function _focusInHandler(evt) {\n        if (this.focusInHandler) {\n          this.focusInHandler(evt);\n        }\n      }\n    }\n  };\n\n  var filterVisibles = function filterVisibles(els) {\n    return (els || []).filter(isVisible);\n  }; // Root dropdown event names\n\n\n  var ROOT_DROPDOWN_PREFIX = 'bv::dropdown::';\n  var ROOT_DROPDOWN_SHOWN = \"\".concat(ROOT_DROPDOWN_PREFIX, \"shown\");\n  var ROOT_DROPDOWN_HIDDEN = \"\".concat(ROOT_DROPDOWN_PREFIX, \"hidden\"); // Dropdown item CSS selectors\n\n  var Selector = {\n    FORM_CHILD: '.dropdown form',\n    ITEM_SELECTOR: ['.dropdown-item', '.b-dropdown-form'].map(function (selector) {\n      return \"\".concat(selector, \":not(.disabled):not([disabled])\");\n    }).join(', ')\n  }; // Popper attachment positions\n\n  var AttachmentMap = {\n    // Dropup left align\n    TOP: 'top-start',\n    // Dropup right align\n    TOPEND: 'top-end',\n    // Dropdown left align\n    BOTTOM: 'bottom-start',\n    // Dropdown right align\n    BOTTOMEND: 'bottom-end',\n    // Dropright left align\n    RIGHT: 'right-start',\n    // Dropright right align\n    RIGHTEND: 'right-end',\n    // Dropleft left align\n    LEFT: 'left-start',\n    // Dropleft right align\n    LEFTEND: 'left-end'\n  }; // @vue/component\n\n  var dropdownMixin = {\n    mixins: [idMixin, clickOutMixin, focusInMixin],\n    provide: function provide() {\n      return {\n        bvDropdown: this\n      };\n    },\n    inject: {\n      bvNavbar: {\n        default: null\n      }\n    },\n    props: {\n      disabled: {\n        type: Boolean,\n        default: false\n      },\n      dropup: {\n        // place on top if possible\n        type: Boolean,\n        default: false\n      },\n      dropright: {\n        // place right if possible\n        type: Boolean,\n        default: false\n      },\n      dropleft: {\n        // place left if possible\n        type: Boolean,\n        default: false\n      },\n      right: {\n        // Right align menu (default is left align)\n        type: Boolean,\n        default: false\n      },\n      offset: {\n        // Number of pixels to offset menu, or a CSS unit value (i.e. 1px, 1rem, etc)\n        type: [Number, String],\n        default: 0\n      },\n      noFlip: {\n        // Disable auto-flipping of menu from bottom<=>top\n        type: Boolean,\n        default: false\n      },\n      popperOpts: {\n        // type: Object,\n        default: function _default() {}\n      },\n      boundary: {\n        // String: `scrollParent`, `window` or `viewport`\n        // HTMLElement: HTML Element reference\n        type: [String, HTMLElement],\n        default: 'scrollParent'\n      }\n    },\n    data: function data() {\n      return {\n        visible: false,\n        visibleChangePrevented: false\n      };\n    },\n    computed: {\n      inNavbar: function inNavbar() {\n        return !isNull(this.bvNavbar);\n      },\n      toggler: function toggler() {\n        var toggle = this.$refs.toggle;\n        return toggle ? toggle.$el || toggle : null;\n      },\n      directionClass: function directionClass() {\n        if (this.dropup) {\n          return 'dropup';\n        } else if (this.dropright) {\n          return 'dropright';\n        } else if (this.dropleft) {\n          return 'dropleft';\n        }\n\n        return '';\n      }\n    },\n    watch: {\n      visible: function visible(newValue, oldValue) {\n        if (this.visibleChangePrevented) {\n          this.visibleChangePrevented = false;\n          return;\n        }\n\n        if (newValue !== oldValue) {\n          var evtName = newValue ? 'show' : 'hide';\n          var bvEvt = new BvEvent(evtName, {\n            cancelable: true,\n            vueTarget: this,\n            target: this.$refs.menu,\n            relatedTarget: null,\n            componentId: this.safeId ? this.safeId() : this.id || null\n          });\n          this.emitEvent(bvEvt);\n\n          if (bvEvt.defaultPrevented) {\n            // Reset value and exit if canceled\n            this.visibleChangePrevented = true;\n            this.visible = oldValue; // Just in case a child element triggered `this.hide(true)`\n\n            this.$off('hidden', this.focusToggler);\n            return;\n          }\n\n          if (evtName === 'show') {\n            this.showMenu();\n          } else {\n            this.hideMenu();\n          }\n        }\n      },\n      disabled: function disabled(newValue, oldValue) {\n        if (newValue !== oldValue && newValue && this.visible) {\n          // Hide dropdown if disabled changes to true\n          this.visible = false;\n        }\n      }\n    },\n    created: function created() {\n      // Create non-reactive property\n      this.$_popper = null;\n    },\n    deactivated: function deactivated()\n    /* istanbul ignore next: not easy to test */\n    {\n      // In case we are inside a `<keep-alive>`\n      this.visible = false;\n      this.whileOpenListen(false);\n      this.destroyPopper();\n    },\n    beforeDestroy: function beforeDestroy() {\n      this.visible = false;\n      this.whileOpenListen(false);\n      this.destroyPopper();\n    },\n    methods: {\n      // Event emitter\n      emitEvent: function emitEvent(bvEvt) {\n        var type = bvEvt.type;\n        this.$emit(type, bvEvt);\n        this.$root.$emit(\"\".concat(ROOT_DROPDOWN_PREFIX).concat(type), bvEvt);\n      },\n      showMenu: function showMenu() {\n        var _this = this;\n\n        if (this.disabled) {\n          /* istanbul ignore next */\n          return;\n        } // Only instantiate Popper.js when dropdown is not in `<b-navbar>`\n\n\n        if (!this.inNavbar) {\n          if (typeof Popper === 'undefined') {\n            /* istanbul ignore next */\n            warn('Popper.js not found. Falling back to CSS positioning', 'BDropdown');\n          } else {\n            // For dropup with alignment we use the parent element as popper container\n            var el = this.dropup && this.right || this.split ? this.$el : this.$refs.toggle; // Make sure we have a reference to an element, not a component!\n\n            el = el.$el || el; // Instantiate Popper.js\n\n            this.createPopper(el);\n          }\n        } // Ensure other menus are closed\n\n\n        this.$root.$emit(ROOT_DROPDOWN_SHOWN, this); // Enable listeners\n\n        this.whileOpenListen(true); // Wrap in `$nextTick()` to ensure menu is fully rendered/shown\n\n        this.$nextTick(function () {\n          // Focus on the menu container on show\n          _this.focusMenu(); // Emit the shown event\n\n\n          _this.$emit('shown');\n        });\n      },\n      hideMenu: function hideMenu() {\n        this.whileOpenListen(false);\n        this.$root.$emit(ROOT_DROPDOWN_HIDDEN, this);\n        this.$emit('hidden');\n        this.destroyPopper();\n      },\n      createPopper: function createPopper(element) {\n        this.destroyPopper();\n        this.$_popper = new Popper(element, this.$refs.menu, this.getPopperConfig());\n      },\n      destroyPopper: function destroyPopper() {\n        // Ensure popper event listeners are removed cleanly\n        if (this.$_popper) {\n          this.$_popper.destroy();\n        }\n\n        this.$_popper = null;\n      },\n      updatePopper: function updatePopper()\n      /* istanbul ignore next: not easy to test */\n      {\n        // Instructs popper to re-computes the dropdown position\n        // usefull if the content changes size\n        try {\n          this.$_popper.scheduleUpdate();\n        } catch (_unused) {}\n      },\n      getPopperConfig: function getPopperConfig() {\n        var placement = AttachmentMap.BOTTOM;\n\n        if (this.dropup) {\n          placement = this.right ? AttachmentMap.TOPEND : AttachmentMap.TOP;\n        } else if (this.dropright) {\n          placement = AttachmentMap.RIGHT;\n        } else if (this.dropleft) {\n          placement = AttachmentMap.LEFT;\n        } else if (this.right) {\n          placement = AttachmentMap.BOTTOMEND;\n        }\n\n        var popperConfig = {\n          placement: placement,\n          modifiers: {\n            offset: {\n              offset: this.offset || 0\n            },\n            flip: {\n              enabled: !this.noFlip\n            }\n          }\n        };\n\n        if (this.boundary) {\n          popperConfig.modifiers.preventOverflow = {\n            boundariesElement: this.boundary\n          };\n        }\n\n        return _objectSpread2({}, popperConfig, {}, this.popperOpts || {});\n      },\n      // Turn listeners on/off while open\n      whileOpenListen: function whileOpenListen(isOpen) {\n        // Hide the dropdown when clicked outside\n        this.listenForClickOut = isOpen; // Hide the dropdown when it loses focus\n\n        this.listenForFocusIn = isOpen; // Hide the dropdown when another dropdown is opened\n\n        var method = isOpen ? '$on' : '$off';\n        this.$root[method](ROOT_DROPDOWN_SHOWN, this.rootCloseListener);\n      },\n      rootCloseListener: function rootCloseListener(vm) {\n        if (vm !== this) {\n          this.visible = false;\n        }\n      },\n      show: function show() {\n        var _this2 = this;\n\n        // Public method to show dropdown\n        if (this.disabled) {\n          return;\n        } // Wrap in a `requestAF()` to allow any previous\n        // click handling to occur first\n\n\n        requestAF(function () {\n          _this2.visible = true;\n        });\n      },\n      hide: function hide() {\n        var refocus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n        // Public method to hide dropdown\n        if (this.disabled) {\n          /* istanbul ignore next */\n          return;\n        }\n\n        this.visible = false;\n\n        if (refocus) {\n          // Child element is closing the dropdown on click\n          this.$once('hidden', this.focusToggler);\n        }\n      },\n      // Called only by a button that toggles the menu\n      toggle: function toggle(evt) {\n        evt = evt || {}; // Early exit when not a click event or ENTER, SPACE or DOWN were pressed\n\n        var _evt = evt,\n            type = _evt.type,\n            keyCode = _evt.keyCode;\n\n        if (type !== 'click' && !(type === 'keydown' && [KEY_CODES.ENTER, KEY_CODES.SPACE, KEY_CODES.DOWN].indexOf(keyCode) !== -1)) {\n          /* istanbul ignore next */\n          return;\n        }\n        /* istanbul ignore next */\n\n\n        if (this.disabled) {\n          this.visible = false;\n          return;\n        }\n\n        this.$emit('toggle', evt);\n        evt.preventDefault();\n        evt.stopPropagation(); // Toggle visibility\n\n        if (this.visible) {\n          this.hide(true);\n        } else {\n          this.show();\n        }\n      },\n      // Mousedown handler for the toggle\n      onMousedown: function onMousedown(evt)\n      /* istanbul ignore next */\n      {\n        // We prevent the 'mousedown' event for the toggle to stop the\n        // 'focusin' event from being fired\n        // The event would otherwise be picked up by the global 'focusin'\n        // listener and there is no cross-browser solution to detect it\n        // relates to the toggle click\n        // The 'click' event will still be fired and we handle closing\n        // other dropdowns there too\n        // See https://github.com/bootstrap-vue/bootstrap-vue/issues/4328\n        evt.preventDefault();\n      },\n      // Called from dropdown menu context\n      onKeydown: function onKeydown(evt) {\n        var keyCode = evt.keyCode;\n\n        if (keyCode === KEY_CODES.ESC) {\n          // Close on ESC\n          this.onEsc(evt);\n        } else if (keyCode === KEY_CODES.DOWN) {\n          // Down Arrow\n          this.focusNext(evt, false);\n        } else if (keyCode === KEY_CODES.UP) {\n          // Up Arrow\n          this.focusNext(evt, true);\n        }\n      },\n      // If user presses ESC, close the menu\n      onEsc: function onEsc(evt) {\n        if (this.visible) {\n          this.visible = false;\n          evt.preventDefault();\n          evt.stopPropagation(); // Return focus to original trigger button\n\n          this.$once('hidden', this.focusToggler);\n        }\n      },\n      // Called only in split button mode, for the split button\n      onSplitClick: function onSplitClick(evt) {\n        /* istanbul ignore next */\n        if (this.disabled) {\n          this.visible = false;\n          return;\n        }\n\n        this.$emit('click', evt);\n      },\n      // Shared hide handler between click-out and focus-in events\n      hideHandler: function hideHandler(evt) {\n        var target = evt.target;\n\n        if (this.visible && !contains(this.$refs.menu, target) && !contains(this.toggler, target)) {\n          this.hide();\n        }\n      },\n      // Document click-out listener\n      clickOutHandler: function clickOutHandler(evt) {\n        this.hideHandler(evt);\n      },\n      // Document focus-in listener\n      focusInHandler: function focusInHandler(evt) {\n        this.hideHandler(evt);\n      },\n      // Keyboard nav\n      focusNext: function focusNext(evt, up) {\n        var _this3 = this;\n\n        // Ignore key up/down on form elements\n        var target = evt.target;\n\n        if (!this.visible || evt && closest(Selector.FORM_CHILD, target)) {\n          /* istanbul ignore next: should never happen */\n          return;\n        }\n\n        evt.preventDefault();\n        evt.stopPropagation();\n        this.$nextTick(function () {\n          var items = _this3.getItems();\n\n          if (items.length < 1) {\n            /* istanbul ignore next: should never happen */\n            return;\n          }\n\n          var index = items.indexOf(target);\n\n          if (up && index > 0) {\n            index--;\n          } else if (!up && index < items.length - 1) {\n            index++;\n          }\n\n          if (index < 0) {\n            /* istanbul ignore next: should never happen */\n            index = 0;\n          }\n\n          _this3.focusItem(index, items);\n        });\n      },\n      focusItem: function focusItem(idx, items) {\n        var el = items.find(function (el, i) {\n          return i === idx;\n        });\n\n        if (el && el.focus) {\n          el.focus();\n        }\n      },\n      getItems: function getItems() {\n        // Get all items\n        return filterVisibles(selectAll(Selector.ITEM_SELECTOR, this.$refs.menu));\n      },\n      focusMenu: function focusMenu() {\n        try {\n          this.$refs.menu.focus();\n        } catch (_unused2) {}\n      },\n      focusToggler: function focusToggler() {\n        var _this4 = this;\n\n        this.$nextTick(function () {\n          var toggler = _this4.toggler;\n\n          if (toggler && toggler.focus) {\n            toggler.focus();\n          }\n        });\n      }\n    }\n  };\n\n  var NAME$b = 'BDropdown';\n  var props$j = {\n    text: {\n      // Button label\n      type: String,\n      default: ''\n    },\n    html: {\n      // Button label\n      type: String\n    },\n    size: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$b, 'size');\n      }\n    },\n    variant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$b, 'variant');\n      }\n    },\n    block: {\n      type: Boolean,\n      default: false\n    },\n    menuClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    toggleTag: {\n      type: String,\n      default: 'button'\n    },\n    toggleText: {\n      // This really should be toggleLabel\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$b, 'toggleText');\n      }\n    },\n    toggleClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    noCaret: {\n      type: Boolean,\n      default: false\n    },\n    split: {\n      type: Boolean,\n      default: false\n    },\n    splitHref: {\n      type: String // default: undefined\n\n    },\n    splitTo: {\n      type: [String, Object] // default: undefined\n\n    },\n    splitVariant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$b, 'splitVariant');\n      }\n    },\n    splitClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    splitButtonType: {\n      type: String,\n      default: 'button',\n      validator: function validator(value) {\n        return arrayIncludes(['button', 'submit', 'reset'], value);\n      }\n    },\n    lazy: {\n      // If true, only render menu contents when open\n      type: Boolean,\n      default: false\n    },\n    role: {\n      type: String,\n      default: 'menu'\n    }\n  }; // @vue/component\n\n  var BDropdown =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$b,\n    mixins: [idMixin, dropdownMixin, normalizeSlotMixin],\n    props: props$j,\n    computed: {\n      dropdownClasses: function dropdownClasses() {\n        return [this.directionClass, {\n          show: this.visible,\n          // The 'btn-group' class is required in `split` mode for button alignment\n          // It needs also to be applied when `block` is disabled to allow multiple\n          // dropdowns to be aligned one line\n          'btn-group': this.split || !this.block,\n          // When `block` is enabled and we are in `split` mode the 'd-flex' class\n          // needs to be applied to allow the buttons to stretch to full width\n          'd-flex': this.block && this.split,\n          // Position `static` is needed to allow menu to \"breakout\" of the `scrollParent`\n          // boundaries when boundary is anything other than `scrollParent`\n          // See: https://github.com/twbs/bootstrap/issues/24251#issuecomment-341413786\n          'position-static': this.boundary !== 'scrollParent' || !this.boundary\n        }];\n      },\n      menuClasses: function menuClasses() {\n        return [this.menuClass, {\n          'dropdown-menu-right': this.right,\n          show: this.visible\n        }];\n      },\n      toggleClasses: function toggleClasses() {\n        return [this.toggleClass, {\n          'dropdown-toggle-split': this.split,\n          'dropdown-toggle-no-caret': this.noCaret && !this.split\n        }];\n      }\n    },\n    render: function render(h) {\n      var split = h();\n      var buttonContent = this.normalizeSlot('button-content') || this.html || stripTags(this.text);\n\n      if (this.split) {\n        var btnProps = {\n          variant: this.splitVariant || this.variant,\n          size: this.size,\n          block: this.block,\n          disabled: this.disabled\n        }; // We add these as needed due to router-link issues with defined property with undefined/null values\n\n        if (this.splitTo) {\n          btnProps.to = this.splitTo;\n        } else if (this.splitHref) {\n          btnProps.href = this.splitHref;\n        } else if (this.splitButtonType) {\n          btnProps.type = this.splitButtonType;\n        }\n\n        split = h(BButton, {\n          ref: 'button',\n          props: btnProps,\n          class: this.splitClass,\n          attrs: {\n            id: this.safeId('_BV_button_')\n          },\n          on: {\n            click: this.onSplitClick\n          }\n        }, [buttonContent]);\n      }\n\n      var toggle = h(BButton, {\n        ref: 'toggle',\n        staticClass: 'dropdown-toggle',\n        class: this.toggleClasses,\n        props: {\n          tag: this.toggleTag,\n          variant: this.variant,\n          size: this.size,\n          block: this.block && !this.split,\n          disabled: this.disabled\n        },\n        attrs: {\n          id: this.safeId('_BV_toggle_'),\n          'aria-haspopup': 'true',\n          'aria-expanded': this.visible ? 'true' : 'false'\n        },\n        on: {\n          mousedown: this.onMousedown,\n          click: this.toggle,\n          keydown: this.toggle // Handle ENTER, SPACE and DOWN\n\n        }\n      }, [this.split ? h('span', {\n        class: ['sr-only']\n      }, [this.toggleText]) : buttonContent]);\n      var menu = h('ul', {\n        ref: 'menu',\n        staticClass: 'dropdown-menu',\n        class: this.menuClasses,\n        attrs: {\n          role: this.role,\n          tabindex: '-1',\n          'aria-labelledby': this.safeId(this.split ? '_BV_button_' : '_BV_toggle_')\n        },\n        on: {\n          keydown: this.onKeydown // Handle UP, DOWN and ESC\n\n        }\n      }, !this.lazy || this.visible ? this.normalizeSlot('default', {\n        hide: this.hide\n      }) : [h()]);\n      return h('div', {\n        staticClass: 'dropdown b-dropdown',\n        class: this.dropdownClasses,\n        attrs: {\n          id: this.safeId()\n        }\n      }, [split, toggle, menu]);\n    }\n  });\n\n  var props$k = propsFactory(); // @vue/component\n\n  var BDropdownItem =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BDropdownItem',\n    mixins: [normalizeSlotMixin],\n    inheritAttrs: false,\n    inject: {\n      bvDropdown: {\n        default: null\n      }\n    },\n    props: _objectSpread2({}, props$k, {\n      variant: {\n        type: String,\n        default: null\n      }\n    }),\n    methods: {\n      closeDropdown: function closeDropdown() {\n        var _this = this;\n\n        // Close on next animation frame to allow <b-link> time to process\n        requestAF(function () {\n          if (_this.bvDropdown) {\n            _this.bvDropdown.hide(true);\n          }\n        });\n      },\n      onClick: function onClick(evt) {\n        this.$emit('click', evt);\n        this.closeDropdown();\n      }\n    },\n    render: function render(h) {\n      return h('li', {\n        attrs: {\n          role: 'presentation'\n        }\n      }, [h(BLink, {\n        props: this.$props,\n        staticClass: 'dropdown-item',\n        class: _defineProperty({}, \"text-\".concat(this.variant), this.variant && !(this.active || this.disabled)),\n        attrs: _objectSpread2({}, this.$attrs, {\n          role: 'menuitem'\n        }),\n        on: {\n          click: this.onClick\n        },\n        ref: 'item'\n      }, this.normalizeSlot('default'))]);\n    }\n  });\n\n  var props$l = {\n    active: {\n      type: Boolean,\n      default: false\n    },\n    activeClass: {\n      type: String,\n      default: 'active'\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    variant: {\n      type: String,\n      default: null\n    }\n  }; // @vue/component\n\n  var BDropdownItemButton =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BDropdownItemButton',\n    mixins: [normalizeSlotMixin],\n    inheritAttrs: false,\n    inject: {\n      bvDropdown: {\n        default: null\n      }\n    },\n    props: props$l,\n    methods: {\n      closeDropdown: function closeDropdown() {\n        if (this.bvDropdown) {\n          this.bvDropdown.hide(true);\n        }\n      },\n      onClick: function onClick(evt) {\n        this.$emit('click', evt);\n        this.closeDropdown();\n      }\n    },\n    render: function render(h) {\n      var _class;\n\n      return h('li', {\n        attrs: {\n          role: 'presentation'\n        }\n      }, [h('button', {\n        staticClass: 'dropdown-item',\n        class: (_class = {}, _defineProperty(_class, this.activeClass, this.active), _defineProperty(_class, \"text-\".concat(this.variant), this.variant && !(this.active || this.disabled)), _class),\n        attrs: _objectSpread2({}, this.$attrs, {\n          role: 'menuitem',\n          type: 'button',\n          disabled: this.disabled\n        }),\n        on: {\n          click: this.onClick\n        },\n        ref: 'button'\n      }, this.normalizeSlot('default'))]);\n    }\n  });\n\n  var props$m = {\n    id: {\n      type: String,\n      default: null\n    },\n    tag: {\n      type: String,\n      default: 'header'\n    },\n    variant: {\n      type: String,\n      default: null\n    }\n  }; // @vue/component\n\n  var BDropdownHeader =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BDropdownHeader',\n    functional: true,\n    props: props$m,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      var $attrs = data.attrs || {};\n      data.attrs = {};\n      return h('li', a(data, {\n        attrs: {\n          role: 'presentation'\n        }\n      }), [h(props.tag, {\n        staticClass: 'dropdown-header',\n        class: _defineProperty({}, \"text-\".concat(props.variant), props.variant),\n        attrs: _objectSpread2({}, $attrs, {\n          id: props.id || null,\n          role: 'heading'\n        }),\n        ref: 'header'\n      }, children)]);\n    }\n  });\n\n  var props$n = {\n    tag: {\n      type: String,\n      default: 'hr'\n    }\n  }; // @vue/component\n\n  var BDropdownDivider =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BDropdownDivider',\n    functional: true,\n    props: props$n,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data;\n      var $attrs = data.attrs || {};\n      data.attrs = {};\n      return h('li', a(data, {\n        attrs: {\n          role: 'presentation'\n        }\n      }), [h(props.tag, {\n        staticClass: 'dropdown-divider',\n        attrs: _objectSpread2({}, $attrs, {\n          role: 'separator',\n          'aria-orientation': 'horizontal'\n        }),\n        ref: 'divider'\n      })]);\n    }\n  });\n\n  var props$o = {\n    id: {\n      type: String,\n      default: null\n    },\n    inline: {\n      type: Boolean,\n      default: false\n    },\n    novalidate: {\n      type: Boolean,\n      default: false\n    },\n    validated: {\n      type: Boolean,\n      default: false\n    }\n  }; // @vue/component\n\n  var BForm =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BForm',\n    functional: true,\n    props: props$o,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      return h('form', a(data, {\n        class: {\n          'form-inline': props.inline,\n          'was-validated': props.validated\n        },\n        attrs: {\n          id: props.id,\n          novalidate: props.novalidate\n        }\n      }), children);\n    }\n  });\n\n  var BDropdownForm =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BDropdownForm',\n    functional: true,\n    props: _objectSpread2({}, props$o, {\n      disabled: {\n        type: Boolean,\n        default: false\n      },\n      formClass: {\n        type: [String, Object, Array],\n        default: null\n      }\n    }),\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      var $attrs = data.attrs || {};\n      var $listeners = data.on || {};\n      data.attrs = {};\n      data.on = {};\n      return h('li', a(data, {\n        attrs: {\n          role: 'presentation'\n        }\n      }), [h(BForm, {\n        ref: 'form',\n        staticClass: 'b-dropdown-form',\n        class: [props.formClass, {\n          disabled: props.disabled\n        }],\n        props: props,\n        attrs: _objectSpread2({}, $attrs, {\n          disabled: props.disabled,\n          // Tab index of -1 for keyboard navigation\n          tabindex: props.disabled ? null : '-1'\n        }),\n        on: $listeners\n      }, children)]);\n    }\n  });\n\n  var BDropdownText =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BDropdownText',\n    functional: true,\n    props: {\n      tag: {\n        type: String,\n        default: 'p'\n      },\n      variant: {\n        type: String,\n        default: null\n      }\n    },\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      var $attrs = data.attrs || {};\n      data.attrs = {};\n      return h('li', a(data, {\n        attrs: {\n          role: 'presentation'\n        }\n      }), [h(props.tag, {\n        staticClass: 'b-dropdown-text',\n        class: _defineProperty({}, \"text-\".concat(props.variant), props.variant),\n        props: props,\n        attrs: $attrs,\n        ref: 'text'\n      }, children)]);\n    }\n  });\n\n  var props$p = {\n    id: {\n      type: String,\n      default: null\n    },\n    header: {\n      type: String,\n      default: null\n    },\n    headerTag: {\n      type: String,\n      default: 'header'\n    },\n    headerVariant: {\n      type: String,\n      default: null\n    },\n    headerClasses: {\n      type: [String, Array, Object],\n      default: null\n    },\n    ariaDescribedby: {\n      type: String,\n      default: null\n    }\n  }; // @vue/component\n\n  var BDropdownGroup =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BDropdownGroup',\n    functional: true,\n    props: props$p,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          slots = _ref.slots,\n          scopedSlots = _ref.scopedSlots;\n      var $slots = slots();\n      var $scopedSlots = scopedSlots || {};\n      var $attrs = data.attrs || {};\n      data.attrs = {};\n      var header;\n      var headerId = null;\n\n      if (hasNormalizedSlot('header', $scopedSlots, $slots) || props.header) {\n        headerId = props.id ? \"_bv_\".concat(props.id, \"_group_dd_header\") : null;\n        header = h(props.headerTag, {\n          staticClass: 'dropdown-header',\n          class: [props.headerClasses, _defineProperty({}, \"text-\".concat(props.variant), props.variant)],\n          attrs: {\n            id: headerId,\n            role: 'heading'\n          }\n        }, normalizeSlot('header', {}, $scopedSlots, $slots) || props.header);\n      }\n\n      var adb = [headerId, props.ariaDescribedBy].filter(Boolean).join(' ').trim();\n      return h('li', a(data, {\n        attrs: {\n          role: 'presentation'\n        }\n      }), [header || h(), h('ul', {\n        staticClass: 'list-unstyled',\n        attrs: _objectSpread2({}, $attrs, {\n          id: props.id || null,\n          role: 'group',\n          'aria-describedby': adb || null\n        })\n      }, normalizeSlot('default', {}, $scopedSlots, $slots))]);\n    }\n  });\n\n  var DropdownPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BDropdown: BDropdown,\n      BDd: BDropdown,\n      BDropdownItem: BDropdownItem,\n      BDdItem: BDropdownItem,\n      BDropdownItemButton: BDropdownItemButton,\n      BDropdownItemBtn: BDropdownItemButton,\n      BDdItemButton: BDropdownItemButton,\n      BDdItemBtn: BDropdownItemButton,\n      BDropdownHeader: BDropdownHeader,\n      BDdHeader: BDropdownHeader,\n      BDropdownDivider: BDropdownDivider,\n      BDdDivider: BDropdownDivider,\n      BDropdownForm: BDropdownForm,\n      BDdForm: BDropdownForm,\n      BDropdownText: BDropdownText,\n      BDdText: BDropdownText,\n      BDropdownGroup: BDropdownGroup,\n      BDdGroup: BDropdownGroup\n    }\n  });\n\n  var props$q = {\n    type: {\n      type: String,\n      default: 'iframe',\n      validator: function validator(str) {\n        return arrayIncludes(['iframe', 'embed', 'video', 'object', 'img', 'b-img', 'b-img-lazy'], str);\n      }\n    },\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    aspect: {\n      type: String,\n      default: '16by9'\n    }\n  }; // @vue/component\n\n  var BEmbed =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BEmbed',\n    functional: true,\n    props: props$q,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      return h(props.tag, {\n        ref: data.ref,\n        staticClass: 'embed-responsive',\n        class: _defineProperty({}, \"embed-responsive-\".concat(props.aspect), props.aspect)\n      }, [h(props.type, a(data, {\n        ref: '',\n        staticClass: 'embed-responsive-item'\n      }), children)]);\n    }\n  });\n\n  var EmbedPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BEmbed: BEmbed\n    }\n  });\n\n  var OPTIONS_OBJECT_DEPRECATED_MSG = 'Setting prop \"options\" to an object is deprecated. Use the array format instead.'; // @vue/component\n\n  var formOptionsMixin = {\n    props: {\n      options: {\n        type: [Array, Object],\n        default: function _default() {\n          return [];\n        }\n      },\n      valueField: {\n        type: String,\n        default: 'value'\n      },\n      textField: {\n        type: String,\n        default: 'text'\n      },\n      htmlField: {\n        type: String,\n        default: 'html'\n      },\n      disabledField: {\n        type: String,\n        default: 'disabled'\n      }\n    },\n    computed: {\n      formOptions: function formOptions() {\n        var _this = this;\n\n        var options = this.options; // Normalize the given options array\n\n        if (isArray(options)) {\n          return options.map(function (option) {\n            return _this.normalizeOption(option);\n          });\n        } // Deprecate the object options format\n\n\n        warn(OPTIONS_OBJECT_DEPRECATED_MSG, this.$options.name); // Normalize a `options` object to an array of options\n\n        return keys(options).map(function (key) {\n          return _this.normalizeOption(options[key] || {}, key);\n        });\n      }\n    },\n    methods: {\n      normalizeOption: function normalizeOption(option) {\n        var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        // When the option is an object, normalize it\n        if (isPlainObject(option)) {\n          var value = get(option, this.valueField);\n          var text = get(option, this.textField);\n          return {\n            value: isUndefined(value) ? key || text : value,\n            text: stripTags(String(isUndefined(text) ? key : text)),\n            html: get(option, this.htmlField),\n            disabled: Boolean(get(option, this.disabledField))\n          };\n        } // Otherwise create an `<option>` object from the given value\n\n\n        return {\n          value: key || option,\n          text: stripTags(String(option)),\n          disabled: false\n        };\n      }\n    }\n  };\n\n  var BFormDatalist =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BFormDatalist',\n    mixins: [formOptionsMixin, normalizeSlotMixin],\n    props: {\n      id: {\n        type: String,\n        default: null,\n        required: true\n      }\n    },\n    render: function render(h) {\n      var options = this.formOptions.map(function (option, index) {\n        return h('option', {\n          key: \"option_\".concat(index, \"_opt\"),\n          attrs: {\n            disabled: option.disabled\n          },\n          domProps: _objectSpread2({}, htmlOrText(option.html, option.text), {\n            value: option.value\n          })\n        });\n      });\n      return h('datalist', {\n        attrs: {\n          id: this.id\n        }\n      }, [options, this.normalizeSlot('default')]);\n    }\n  });\n\n  var NAME$c = 'BFormText';\n  var props$r = {\n    id: {\n      type: String,\n      default: null\n    },\n    tag: {\n      type: String,\n      default: 'small'\n    },\n    textVariant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$c, 'textVariant');\n      }\n    },\n    inline: {\n      type: Boolean,\n      default: false\n    }\n  }; // @vue/component\n\n  var BFormText =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$c,\n    functional: true,\n    props: props$r,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      return h(props.tag, a(data, {\n        class: _defineProperty({\n          'form-text': !props.inline\n        }, \"text-\".concat(props.textVariant), props.textVariant),\n        attrs: {\n          id: props.id\n        }\n      }), children);\n    }\n  });\n\n  var props$s = {\n    id: {\n      type: String,\n      default: null\n    },\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    tooltip: {\n      type: Boolean,\n      default: false\n    },\n    forceShow: {\n      type: Boolean,\n      default: false\n    },\n    state: {\n      type: Boolean,\n      default: null\n    },\n    ariaLive: {\n      type: String,\n      default: null\n    },\n    role: {\n      type: String,\n      default: null\n    }\n  }; // @vue/component\n\n  var BFormInvalidFeedback =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BFormInvalidFeedback',\n    functional: true,\n    props: props$s,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      var show = props.forceShow === true || props.state === false;\n      return h(props.tag, a(data, {\n        class: {\n          'invalid-feedback': !props.tooltip,\n          'invalid-tooltip': props.tooltip,\n          'd-block': show\n        },\n        attrs: {\n          id: props.id,\n          role: props.role,\n          'aria-live': props.ariaLive,\n          'aria-atomic': props.ariaLive ? 'true' : null\n        }\n      }), children);\n    }\n  });\n\n  var props$t = {\n    id: {\n      type: String,\n      default: null\n    },\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    tooltip: {\n      type: Boolean,\n      default: false\n    },\n    forceShow: {\n      type: Boolean,\n      default: false\n    },\n    state: {\n      type: Boolean,\n      default: null\n    },\n    ariaLive: {\n      type: String,\n      default: null\n    },\n    role: {\n      type: String,\n      default: null\n    }\n  }; // @vue/component\n\n  var BFormValidFeedback =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BFormValidFeedback',\n    functional: true,\n    props: props$t,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      var show = props.forceShow === true || props.state === true;\n      return h(props.tag, a(data, {\n        class: {\n          'valid-feedback': !props.tooltip,\n          'valid-tooltip': props.tooltip,\n          'd-block': show\n        },\n        attrs: {\n          id: props.id,\n          role: props.role,\n          'aria-live': props.ariaLive,\n          'aria-atomic': props.ariaLive ? 'true' : null\n        }\n      }), children);\n    }\n  });\n\n  var props$u = {\n    tag: {\n      type: String,\n      default: 'div'\n    }\n  }; // @vue/component\n\n  var BFormRow =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BFormRow',\n    functional: true,\n    props: props$u,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      return h(props.tag, a(data, {\n        staticClass: 'form-row'\n      }), children);\n    }\n  });\n\n  var FormPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BForm: BForm,\n      BFormDatalist: BFormDatalist,\n      BDatalist: BFormDatalist,\n      BFormText: BFormText,\n      BFormInvalidFeedback: BFormInvalidFeedback,\n      BFormFeedback: BFormInvalidFeedback,\n      BFormValidFeedback: BFormValidFeedback,\n      // Added here for convenience\n      BFormRow: BFormRow\n    }\n  }); // BFormRow is not exported here as a named export, as it is exported by Layout\n\n  var looseIndexOf = function looseIndexOf(arr, val) {\n    // Assumes that the first argument is an array\n    for (var i = 0; i < arr.length; i++) {\n      if (looseEqual(arr[i], val)) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n\n  var SELECTOR = 'input, textarea, select'; // @vue/component\n\n  var formMixin = {\n    props: {\n      name: {\n        type: String // default: undefined\n\n      },\n      id: {\n        type: String // default: undefined\n\n      },\n      disabled: {\n        type: Boolean\n      },\n      required: {\n        type: Boolean,\n        default: false\n      },\n      form: {\n        type: String,\n        default: null\n      },\n      autofocus: {\n        type: Boolean,\n        default: false\n      }\n    },\n    mounted: function mounted() {\n      this.handleAutofocus();\n    },\n    activated: function activated()\n    /* istanbul ignore next */\n    {\n      this.handleAutofocus();\n    },\n    methods: {\n      handleAutofocus: function handleAutofocus() {\n        var _this = this;\n\n        this.$nextTick(function () {\n          requestAF(function () {\n            var el = _this.$el;\n\n            if (_this.autofocus && isVisible(el)) {\n              if (!matches(el, SELECTOR)) {\n                el = select(SELECTOR, el);\n              }\n\n              el && el.focus && el.focus();\n            }\n          });\n        });\n      }\n    }\n  };\n\n  var formRadioCheckMixin = {\n    mixins: [normalizeSlotMixin],\n    inheritAttrs: false,\n    model: {\n      prop: 'checked',\n      event: 'input'\n    },\n    props: {\n      value: {// Value when checked\n        // type: Object,\n        // default: undefined\n      },\n      checked: {// This is the v-model\n        // type: Object,\n        // default: undefined\n      },\n      inline: {\n        type: Boolean,\n        default: false\n      },\n      plain: {\n        type: Boolean,\n        default: false\n      },\n      button: {\n        // Only applicable in standalone mode (non group)\n        type: Boolean,\n        default: false\n      },\n      buttonVariant: {\n        // Only applicable when rendered with button style\n        type: String,\n        default: null\n      },\n      ariaLabel: {\n        // Placed on the input if present.\n        type: String,\n        default: null\n      },\n      ariaLabelledby: {\n        // Placed on the input if present.\n        type: String,\n        default: null\n      }\n    },\n    data: function data() {\n      return {\n        localChecked: this.isGroup ? this.bvGroup.checked : this.checked,\n        hasFocus: false\n      };\n    },\n    computed: {\n      computedLocalChecked: {\n        get: function get() {\n          return this.isGroup ? this.bvGroup.localChecked : this.localChecked;\n        },\n        set: function set(val) {\n          if (this.isGroup) {\n            this.bvGroup.localChecked = val;\n          } else {\n            this.localChecked = val;\n          }\n        }\n      },\n      isGroup: function isGroup() {\n        // Is this check/radio a child of check-group or radio-group?\n        return Boolean(this.bvGroup);\n      },\n      isBtnMode: function isBtnMode() {\n        // Support button style in single input mode\n        return this.isGroup ? this.bvGroup.buttons : this.button;\n      },\n      isPlain: function isPlain() {\n        return this.isBtnMode ? false : this.isGroup ? this.bvGroup.plain : this.plain;\n      },\n      isCustom: function isCustom() {\n        return this.isBtnMode ? false : !this.isPlain;\n      },\n      isSwitch: function isSwitch() {\n        // Custom switch styling (checkboxes only)\n        return this.isBtnMode || this.isRadio || this.isPlain ? false : this.isGroup ? this.bvGroup.switches : this.switch;\n      },\n      isInline: function isInline() {\n        return this.isGroup ? this.bvGroup.inline : this.inline;\n      },\n      isDisabled: function isDisabled() {\n        // Child can be disabled while parent isn't, but is always disabled if group is\n        return this.isGroup ? this.bvGroup.disabled || this.disabled : this.disabled;\n      },\n      isRequired: function isRequired() {\n        // Required only works when a name is provided for the input(s)\n        // Child can only be required when parent is\n        // Groups will always have a name (either user supplied or auto generated)\n        return this.getName && (this.isGroup ? this.bvGroup.required : this.required);\n      },\n      getName: function getName() {\n        // Group name preferred over local name\n        return (this.isGroup ? this.bvGroup.groupName : this.name) || null;\n      },\n      getForm: function getForm() {\n        return (this.isGroup ? this.bvGroup.form : this.form) || null;\n      },\n      getSize: function getSize() {\n        return (this.isGroup ? this.bvGroup.size : this.size) || '';\n      },\n      getState: function getState() {\n        return this.isGroup ? this.bvGroup.computedState : this.computedState;\n      },\n      getButtonVariant: function getButtonVariant() {\n        // Local variant preferred over group variant\n        if (this.buttonVariant) {\n          return this.buttonVariant;\n        } else if (this.isGroup && this.bvGroup.buttonVariant) {\n          return this.bvGroup.buttonVariant;\n        } // default variant\n\n\n        return 'secondary';\n      },\n      buttonClasses: function buttonClasses() {\n        var _ref;\n\n        // Same for radio & check\n        return ['btn', \"btn-\".concat(this.getButtonVariant), (_ref = {}, _defineProperty(_ref, \"btn-\".concat(this.getSize), this.getSize), _defineProperty(_ref, \"disabled\", this.isDisabled), _defineProperty(_ref, \"active\", this.isChecked), _defineProperty(_ref, \"focus\", this.hasFocus), _ref)];\n      }\n    },\n    watch: {\n      checked: function checked(newVal) {\n        this.computedLocalChecked = newVal;\n      }\n    },\n    methods: {\n      handleFocus: function handleFocus(evt) {\n        // When in buttons mode, we need to add 'focus' class to label when input focused\n        // As it is the hidden input which has actual focus\n        if (evt.target) {\n          if (evt.type === 'focus') {\n            this.hasFocus = true;\n          } else if (evt.type === 'blur') {\n            this.hasFocus = false;\n          }\n        }\n      },\n      // Convenience methods for focusing the input\n      focus: function focus() {\n        if (!this.isDisabled && this.$refs.input && this.$refs.input.focus) {\n          this.$refs.input.focus();\n        }\n      },\n      blur: function blur() {\n        if (!this.isDisabled && this.$refs.input && this.$refs.input.blur) {\n          this.$refs.input.blur();\n        }\n      }\n    },\n    render: function render(h) {\n      var defaultSlot = this.normalizeSlot('default'); // Generate the input element\n\n      var on = {\n        change: this.handleChange\n      };\n\n      if (this.isBtnMode) {\n        // Handlers for focus styling when in button mode\n        on.focus = on.blur = this.handleFocus;\n      }\n\n      var input = h('input', {\n        ref: 'input',\n        key: 'input',\n        on: on,\n        class: {\n          'form-check-input': this.isPlain,\n          'custom-control-input': this.isCustom,\n          'is-valid': this.getState === true && !this.isBtnMode,\n          'is-invalid': this.getState === false && !this.isBtnMode,\n          // https://github.com/bootstrap-vue/bootstrap-vue/issues/2911\n          'position-static': this.isPlain && !defaultSlot\n        },\n        directives: [{\n          name: 'model',\n          rawName: 'v-model',\n          value: this.computedLocalChecked,\n          expression: 'computedLocalChecked'\n        }],\n        attrs: _objectSpread2({}, this.$attrs, {\n          id: this.safeId(),\n          type: this.isRadio ? 'radio' : 'checkbox',\n          name: this.getName,\n          form: this.getForm,\n          disabled: this.isDisabled,\n          required: this.isRequired,\n          autocomplete: 'off',\n          'aria-required': this.isRequired || null,\n          'aria-label': this.ariaLabel || null,\n          'aria-labelledby': this.ariaLabelledby || null\n        }),\n        domProps: {\n          value: this.value,\n          checked: this.isChecked\n        }\n      });\n\n      if (this.isBtnMode) {\n        // Button mode\n        var button = h('label', {\n          class: this.buttonClasses\n        }, [input, defaultSlot]);\n\n        if (!this.isGroup) {\n          // Standalone button mode, so wrap in 'btn-group-toggle'\n          // and flag it as inline-block to mimic regular buttons\n          button = h('div', {\n            class: ['btn-group-toggle', 'd-inline-block']\n          }, [button]);\n        }\n\n        return button;\n      } else {\n        // Not button mode\n        var label = h(); // If no label content in plain mode we dont render the label\n        // https://github.com/bootstrap-vue/bootstrap-vue/issues/2911\n\n        if (!(this.isPlain && !defaultSlot)) {\n          label = h('label', {\n            class: {\n              'form-check-label': this.isPlain,\n              'custom-control-label': this.isCustom\n            },\n            attrs: {\n              for: this.safeId()\n            }\n          }, defaultSlot);\n        } // Wrap it in a div\n\n\n        return h('div', {\n          class: _defineProperty({\n            'form-check': this.isPlain,\n            'form-check-inline': this.isPlain && this.isInline,\n            'custom-control': this.isCustom,\n            'custom-control-inline': this.isCustom && this.isInline,\n            'custom-checkbox': this.isCustom && this.isCheck && !this.isSwitch,\n            'custom-switch': this.isSwitch,\n            'custom-radio': this.isCustom && this.isRadio\n          }, \"b-custom-control-\".concat(this.getSize), Boolean(this.getSize && !this.isBtnMode))\n        }, [input, label]);\n      }\n    }\n  };\n\n  var formSizeMixin = {\n    props: {\n      size: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig('formControls', 'size');\n        }\n      }\n    },\n    computed: {\n      sizeFormClass: function sizeFormClass() {\n        return [this.size ? \"form-control-\".concat(this.size) : null];\n      },\n      sizeBtnClass: function sizeBtnClass()\n      /* istanbul ignore next: don't think this is used */\n      {\n        return [this.size ? \"btn-\".concat(this.size) : null];\n      }\n    }\n  };\n\n  /* Form control contextual state class computation\n   *\n   * Returned class is either 'is-valid' or 'is-invalid' based on the 'state' prop\n   * state can be one of five values:\n   *  - true for is-valid\n   *  - false for is-invalid\n   *  - null for no contextual state\n   */\n\n  var formStateMixin = {\n    props: {\n      state: {\n        // Tri-state prop: true, false, null (or undefined)\n        type: Boolean,\n        default: null\n      }\n    },\n    computed: {\n      computedState: function computedState() {\n        // If not a boolean, ensure that value is null\n        return isBoolean(this.state) ? this.state : null;\n      },\n      stateClass: function stateClass() {\n        var state = this.computedState;\n        return state === true ? 'is-valid' : state === false ? 'is-invalid' : null;\n      }\n    }\n  };\n\n  var BFormCheckbox =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BFormCheckbox',\n    mixins: [formRadioCheckMixin, // Includes shared render function\n    idMixin, formMixin, formSizeMixin, formStateMixin],\n    inject: {\n      bvGroup: {\n        from: 'bvCheckGroup',\n        default: false\n      }\n    },\n    props: {\n      value: {\n        // type: [String, Number, Boolean, Object],\n        default: true\n      },\n      uncheckedValue: {\n        // type: [String, Number, Boolean, Object],\n        // Not applicable in multi-check mode\n        default: false\n      },\n      indeterminate: {\n        // Not applicable in multi-check mode\n        type: Boolean,\n        default: false\n      },\n      switch: {\n        // Custom switch styling\n        type: Boolean,\n        default: false\n      },\n      checked: {\n        // v-model (Array when multiple checkboxes have same name)\n        // type: [String, Number, Boolean, Object, Array],\n        default: null\n      }\n    },\n    computed: {\n      isChecked: function isChecked() {\n        var checked = this.computedLocalChecked;\n        var value = this.value;\n\n        if (isArray(checked)) {\n          return looseIndexOf(checked, value) > -1;\n        } else {\n          return looseEqual(checked, value);\n        }\n      },\n      isRadio: function isRadio() {\n        return false;\n      },\n      isCheck: function isCheck() {\n        return true;\n      }\n    },\n    watch: {\n      computedLocalChecked: function computedLocalChecked(newVal) {\n        this.$emit('input', newVal);\n\n        if (this.$refs && this.$refs.input) {\n          this.$emit('update:indeterminate', this.$refs.input.indeterminate);\n        }\n      },\n      indeterminate: function indeterminate(newVal) {\n        this.setIndeterminate(newVal);\n      }\n    },\n    mounted: function mounted() {\n      // Set initial indeterminate state\n      this.setIndeterminate(this.indeterminate);\n    },\n    methods: {\n      handleChange: function handleChange(_ref) {\n        var _ref$target = _ref.target,\n            checked = _ref$target.checked,\n            indeterminate = _ref$target.indeterminate;\n        var localChecked = this.computedLocalChecked;\n        var value = this.value;\n        var isArr = isArray(localChecked);\n        var uncheckedValue = isArr ? null : this.uncheckedValue; // Update computedLocalChecked\n\n        if (isArr) {\n          var idx = looseIndexOf(localChecked, value);\n\n          if (checked && idx < 0) {\n            // Add value to array\n            localChecked = localChecked.concat(value);\n          } else if (!checked && idx > -1) {\n            // Remove value from array\n            localChecked = localChecked.slice(0, idx).concat(localChecked.slice(idx + 1));\n          }\n        } else {\n          localChecked = checked ? value : uncheckedValue;\n        }\n\n        this.computedLocalChecked = localChecked; // Change is only emitted on user interaction\n\n        this.$emit('change', checked ? value : uncheckedValue); // If this is a child of form-checkbox-group, we emit a change event on it as well\n\n        if (this.isGroup) {\n          this.bvGroup.$emit('change', localChecked);\n        }\n\n        this.$emit('update:indeterminate', indeterminate);\n      },\n      setIndeterminate: function setIndeterminate(state) {\n        // Indeterminate only supported in single checkbox mode\n        if (isArray(this.computedLocalChecked)) {\n          state = false;\n        }\n\n        if (this.$refs && this.$refs.input) {\n          this.$refs.input.indeterminate = state; // Emit update event to prop\n\n          this.$emit('update:indeterminate', state);\n        }\n      }\n    }\n  });\n\n  var BFormRadio =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BFormRadio',\n    mixins: [idMixin, formRadioCheckMixin, // Includes shared render function\n    formMixin, formSizeMixin, formStateMixin],\n    inject: {\n      bvGroup: {\n        from: 'bvRadioGroup',\n        default: false\n      }\n    },\n    props: {\n      checked: {\n        // v-model\n        // type: [String, Number, Boolean, Object],\n        default: null\n      }\n    },\n    computed: {\n      // Radio Groups can only have a single value, so determining if checked is simple\n      isChecked: function isChecked() {\n        return looseEqual(this.value, this.computedLocalChecked);\n      },\n      // Flags for form-radio-check mixin\n      isRadio: function isRadio() {\n        return true;\n      },\n      isCheck: function isCheck() {\n        return false;\n      }\n    },\n    watch: {\n      // Radio Groups can only have a single value, so our watchers are simple\n      computedLocalChecked: function computedLocalChecked() {\n        this.$emit('input', this.computedLocalChecked);\n      }\n    },\n    methods: {\n      handleChange: function handleChange(_ref) {\n        var checked = _ref.target.checked;\n        var value = this.value;\n        this.computedLocalChecked = value; // Change is only emitted on user interaction\n\n        this.$emit('change', checked ? value : null); // If this is a child of form-radio-group, we emit a change event on it as well\n\n        if (this.isGroup) {\n          this.bvGroup.$emit('change', checked ? value : null);\n        }\n      }\n    }\n  });\n\n  var formRadioCheckGroupMixin = {\n    mixins: [normalizeSlotMixin],\n    model: {\n      prop: 'checked',\n      event: 'input'\n    },\n    props: {\n      validated: {\n        type: Boolean,\n        default: false\n      },\n      ariaInvalid: {\n        type: [Boolean, String],\n        default: false\n      },\n      stacked: {\n        type: Boolean,\n        default: false\n      },\n      plain: {\n        type: Boolean,\n        default: false\n      },\n      buttons: {\n        // Render as button style\n        type: Boolean,\n        default: false\n      },\n      buttonVariant: {\n        // Only applicable when rendered with button style\n        type: String,\n        default: 'secondary'\n      }\n    },\n    computed: {\n      inline: function inline() {\n        return !this.stacked;\n      },\n      groupName: function groupName() {\n        // Checks/Radios tied to the same model must have the same name,\n        // especially for ARIA accessibility.\n        return this.name || this.safeId();\n      },\n      groupClasses: function groupClasses() {\n        if (this.buttons) {\n          return ['btn-group-toggle', this.inline ? 'btn-group' : 'btn-group-vertical', this.size ? \"btn-group-\".concat(this.size) : '', this.validated ? \"was-validated\" : ''];\n        }\n\n        return [this.validated ? \"was-validated\" : ''];\n      },\n      computedAriaInvalid: function computedAriaInvalid() {\n        var ariaInvalid = this.ariaInvalid;\n\n        if (ariaInvalid === true || ariaInvalid === 'true' || ariaInvalid === '') {\n          return 'true';\n        }\n\n        return this.computedState === false ? 'true' : null;\n      }\n    },\n    watch: {\n      checked: function checked(newVal) {\n        this.localChecked = newVal;\n      },\n      localChecked: function localChecked(newVal) {\n        this.$emit('input', newVal);\n      }\n    },\n    render: function render(h) {\n      var _this = this;\n\n      var inputs = this.formOptions.map(function (option, idx) {\n        var uid = \"_BV_option_\".concat(idx, \"_\");\n        return h(_this.isRadioGroup ? BFormRadio : BFormCheckbox, {\n          key: uid,\n          props: {\n            id: _this.safeId(uid),\n            value: option.value,\n            // Individual radios or checks can be disabled in a group\n            disabled: option.disabled || false // We don't need to include these, since the input's will know they are inside here\n            // name: this.groupName,\n            // form: this.form || null,\n            // required: Boolean(this.name && this.required)\n\n          }\n        }, [h('span', {\n          domProps: htmlOrText(option.html, option.text)\n        })]);\n      });\n      return h('div', {\n        class: [this.groupClasses, 'bv-no-focus-ring'],\n        attrs: {\n          id: this.safeId(),\n          role: this.isRadioGroup ? 'radiogroup' : 'group',\n          // Tabindex to allow group to be focused\n          // if needed by screen readers\n          tabindex: '-1',\n          'aria-required': this.required ? 'true' : null,\n          'aria-invalid': this.computedAriaInvalid\n        }\n      }, [this.normalizeSlot('first'), inputs, this.normalizeSlot('default')]);\n    }\n  };\n\n  var props$v = {\n    switches: {\n      // Custom switch styling\n      type: Boolean,\n      default: false\n    },\n    checked: {\n      type: Array,\n      default: null\n    }\n  }; // @vue/component\n\n  var BFormCheckboxGroup =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BFormCheckboxGroup',\n    mixins: [idMixin, formMixin, formRadioCheckGroupMixin, // Includes render function\n    formOptionsMixin, formSizeMixin, formStateMixin],\n    provide: function provide() {\n      return {\n        bvCheckGroup: this\n      };\n    },\n    props: props$v,\n    data: function data() {\n      return {\n        localChecked: this.checked || []\n      };\n    },\n    computed: {\n      isRadioGroup: function isRadioGroup() {\n        return false;\n      }\n    }\n  });\n\n  var FormCheckboxPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BFormCheckbox: BFormCheckbox,\n      BCheckbox: BFormCheckbox,\n      BCheck: BFormCheckbox,\n      BFormCheckboxGroup: BFormCheckboxGroup,\n      BCheckboxGroup: BFormCheckboxGroup,\n      BCheckGroup: BFormCheckboxGroup\n    }\n  });\n\n  // v-b-hover directive\n\n  var PROP = '__BV_hover_handler__';\n  var MOUSEENTER = 'mouseenter';\n  var MOUSELEAVE = 'mouseleave'; // --- Utility methods ---\n\n  var createListener = function createListener(handler) {\n    var listener = function listener(evt) {\n      handler(evt.type === MOUSEENTER, evt);\n    };\n\n    listener.fn = handler;\n    return listener;\n  };\n\n  var updateListeners = function updateListeners(on, el, listener) {\n    eventOnOff(on, el, MOUSEENTER, listener, EVENT_OPTIONS_NO_CAPTURE);\n    eventOnOff(on, el, MOUSELEAVE, listener, EVENT_OPTIONS_NO_CAPTURE);\n  }; // --- Directive bind/unbind/update handler ---\n\n\n  var directive = function directive(el, _ref) {\n    var _ref$value = _ref.value,\n        handler = _ref$value === void 0 ? null : _ref$value;\n\n    if (isBrowser) {\n      var listener = el[PROP];\n      var hasListener = isFunction(listener);\n      var handlerChanged = !(hasListener && listener.fn === handler);\n\n      if (hasListener && handlerChanged) {\n        updateListeners(false, el, listener);\n        delete el[PROP];\n      }\n\n      if (isFunction(handler) && handlerChanged) {\n        el[PROP] = createListener(handler);\n        updateListeners(true, el, el[PROP]);\n      }\n    }\n  }; // VBHover directive\n\n\n  var VBHover = {\n    bind: directive,\n    componentUpdated: directive,\n    unbind: function unbind(el) {\n      directive(el, {\n        value: null\n      });\n    }\n  };\n\n  var NAME$d = 'BFormDatepicker'; // Fallback to BCalendar prop if no value found\n\n  var getConfigFallback = function getConfigFallback(prop) {\n    return getComponentConfig(NAME$d, prop) || getComponentConfig('BCalendar', prop);\n  }; // We create our props as a mixin so that we can control\n  // where they appear in the props listing reference section\n\n\n  var propsMixin = {\n    props: {\n      value: {\n        type: [String, Date],\n        default: null\n      },\n      valueAsDate: {\n        type: Boolean,\n        default: false\n      },\n      resetValue: {\n        type: [String, Date],\n        default: ''\n      },\n      placeholder: {\n        type: String,\n        // Defaults to `labelNoDateSelected` from calendar context\n        default: null\n      },\n      size: {\n        type: String,\n        default: null\n      },\n      min: {\n        type: [String, Date],\n        default: null\n      },\n      max: {\n        type: [String, Date],\n        default: null\n      },\n      disabled: {\n        type: Boolean,\n        default: false\n      },\n      readonly: {\n        type: Boolean,\n        default: false\n      },\n      required: {\n        // If true adds the `aria-required` attribute\n        type: Boolean,\n        default: false\n      },\n      name: {\n        type: String,\n        default: null\n      },\n      form: {\n        type: String,\n        default: null\n      },\n      state: {\n        // Tri-state prop: `true`, `false` or `null`\n        type: Boolean,\n        default: null\n      },\n      dateDisabledFn: {\n        type: Function,\n        default: null\n      },\n      noCloseOnSelect: {\n        type: Boolean,\n        default: false\n      },\n      hideHeader: {\n        type: Boolean,\n        default: false\n      },\n      locale: {\n        type: [String, Array],\n        default: null\n      },\n      startWeekday: {\n        // `0` (Sunday), `1` (Monday), ... `6` (Saturday)\n        // Day of week to start calendar on\n        type: [Number, String],\n        default: 0\n      },\n      direction: {\n        type: String,\n        default: null\n      },\n      selectedVariant: {\n        // Variant color to use for the selected date\n        type: String,\n        default: 'primary'\n      },\n      todayVariant: {\n        // Variant color to use for today's date (defaults to `variant`)\n        type: String,\n        default: null\n      },\n      noHighlightToday: {\n        // Disable highlighting today's date\n        type: Boolean,\n        default: false\n      },\n      todayButton: {\n        type: Boolean,\n        default: false\n      },\n      labelTodayButton: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$d, 'labelTodayButton');\n        }\n      },\n      todayButtonVariant: {\n        type: String,\n        default: 'outline-primary'\n      },\n      resetButton: {\n        type: Boolean,\n        default: false\n      },\n      labelResetButton: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$d, 'labelResetButton');\n        }\n      },\n      resetButtonVariant: {\n        type: String,\n        default: 'outline-danger'\n      },\n      closeButton: {\n        type: Boolean,\n        default: false\n      },\n      labelCloseButton: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$d, 'labelCloseButton');\n        }\n      },\n      closeButtonVariant: {\n        type: String,\n        default: 'outline-secondary'\n      },\n      // Labels for buttons and keyboard shortcuts\n      // These pick BCalendar global config if no BFormDate global config\n      labelPrevYear: {\n        type: String,\n        default: function _default() {\n          return getConfigFallback('labelPrevYear');\n        }\n      },\n      labelPrevMonth: {\n        type: String,\n        default: function _default() {\n          return getConfigFallback('labelPrevMonth');\n        }\n      },\n      labelCurrentMonth: {\n        type: String,\n        default: function _default() {\n          return getConfigFallback('labelCurrentMonth');\n        }\n      },\n      labelNextMonth: {\n        type: String,\n        default: function _default() {\n          return getConfigFallback('labelNextMonth');\n        }\n      },\n      labelNextYear: {\n        type: String,\n        default: function _default() {\n          return getConfigFallback('labelNextYear');\n        }\n      },\n      labelToday: {\n        type: String,\n        default: function _default() {\n          return getConfigFallback('labelToday');\n        }\n      },\n      labelSelected: {\n        type: String,\n        default: function _default() {\n          return getConfigFallback('labelSelected');\n        }\n      },\n      labelNoDateSelected: {\n        type: String,\n        default: function _default() {\n          return getConfigFallback('labelNoDateSelected');\n        }\n      },\n      labelCalendar: {\n        type: String,\n        default: function _default() {\n          return getConfigFallback('labelCalendar');\n        }\n      },\n      labelNav: {\n        type: String,\n        default: function _default() {\n          return getConfigFallback('labelNav');\n        }\n      },\n      labelHelp: {\n        type: String,\n        default: function _default() {\n          return getConfigFallback('labelHelp');\n        }\n      },\n      // Dark mode\n      dark: {\n        type: Boolean,\n        default: false\n      }\n    }\n  }; // --- BFormDate component ---\n  // @vue/component\n\n  var BFormDatepicker =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$d,\n    directives: {\n      BHover: VBHover\n    },\n    // The mixins order determines the order of appearance in the props reference section\n    mixins: [idMixin, propsMixin, dropdownMixin],\n    model: {\n      prop: 'value',\n      event: 'input'\n    },\n    data: function data() {\n      return {\n        // We always use `YYYY-MM-DD` value internally\n        localYMD: formatYMD(this.value) || '',\n        // Context data from BCalendar\n        localLocale: null,\n        isRTL: false,\n        formatedValue: '',\n        activeYMD: '',\n        // Flag to add focus ring to outer wrapper\n        hasFocus: false,\n        // If the control is hovered\n        isHovered: false\n      };\n    },\n    computed: {\n      calendarYM: function calendarYM() {\n        // Returns the calendar year/month\n        // Returns the `YYYY-MM` portion of the active calendar date\n        return this.activeYMD.slice(0, -3);\n      },\n      calendarProps: function calendarProps() {\n        // TODO: Make the ID's computed props\n        var idLabel = this.safeId('_value_');\n        var idWrapper = this.safeId('_b-form-date_');\n        return {\n          // id: this.safeId('_picker_'),\n          ariaControls: [idLabel, idWrapper].filter(identity).join(' ') || null,\n          value: this.localYMD,\n          hidden: !this.visible,\n          min: this.min,\n          max: this.max,\n          readonly: this.readonly,\n          disabled: this.disabled,\n          locale: this.locale,\n          startWeekday: this.startWeekday,\n          direction: this.direction,\n          dateDisabledFn: this.dateDisabledFn,\n          selectedVariant: this.selectedVariant,\n          todayVariant: this.todayVariant,\n          hideHeader: this.hideHeader,\n          labelPrevYear: this.labelPrevYear,\n          labelPrevMonth: this.labelPrevMonth,\n          labelCurrentMonth: this.labelCurrentMonth,\n          labelNextMonth: this.labelNextMonth,\n          labelNextYear: this.labelNextYear,\n          labelToday: this.labelToday,\n          labelSelected: this.labelSelected,\n          labelNoDateSelected: this.labelNoDateSelected,\n          labelCalendar: this.labelCalendar,\n          labelNav: this.labelNav,\n          labelHelp: this.labelHelp\n        };\n      },\n      computedResetValue: function computedResetValue() {\n        return parseYMD(this.resetValue) || '';\n      }\n    },\n    watch: {\n      value: function value(newVal) {\n        this.localYMD = formatYMD(newVal) || '';\n      },\n      localYMD: function localYMD(newVal) {\n        this.$emit('input', this.valueAsDate ? parseYMD(newVal) || null : newVal || '');\n      },\n      calendarYM: function calendarYM(newVal, oldVal)\n      /* istanbul ignore next */\n      {\n        // Displayed calendar month has changed\n        // So possibly the calendar height has changed...\n        // We need to update popper computed position\n        if (newVal !== oldVal && oldVal) {\n          this.updatePopper();\n        }\n      }\n    },\n    mounted: function mounted() {\n      var _this = this;\n\n      this.$on('shown', function () {\n        // May want to make an option to focus\n        // the entire calendar (dropdown-menu) or just the date\n        try {\n          _this.$refs.calendar.focus();\n        } catch (_unused) {}\n      });\n    },\n    methods: {\n      // Public methods\n      focus: function focus() {\n        if (!this.disabled) {\n          try {\n            // This assumes the toggle is an element and not a component\n            this.$refs.toggle.focus();\n          } catch (_unused2) {}\n        }\n      },\n      blur: function blur() {\n        if (!this.disabled) {\n          try {\n            // This assumes the toggle is an element and not a component\n            this.$refs.toggle.blur();\n          } catch (_unused3) {}\n        }\n      },\n      // Private methods\n      setAndClose: function setAndClose(ymd) {\n        var _this2 = this;\n\n        this.localYMD = ymd; // Close calendar popup, unless `noCloseOnSelect`\n\n        if (!this.noCloseOnSelect) {\n          this.$nextTick(function () {\n            _this2.hide(true);\n          });\n        }\n      },\n      onSelected: function onSelected(ymd) {\n        var _this3 = this;\n\n        this.$nextTick(function () {\n          _this3.setAndClose(ymd);\n        });\n      },\n      onInput: function onInput(ymd) {\n        if (this.localYMD !== ymd) {\n          this.localYMD = ymd;\n        }\n      },\n      onContext: function onContext(ctx) {\n        var activeYMD = ctx.activeYMD,\n            isRTL = ctx.isRTL,\n            locale = ctx.locale,\n            selectedYMD = ctx.selectedYMD,\n            selectedFormatted = ctx.selectedFormatted;\n        this.isRTL = isRTL;\n        this.localLocale = locale;\n        this.formattedValue = selectedFormatted;\n        this.localYMD = selectedYMD;\n        this.activeYMD = activeYMD; // Re-emit the context event\n\n        this.$emit('context', ctx);\n      },\n      onTodayButton: function onTodayButton() {\n        this.setAndClose(formatYMD(createDate()));\n      },\n      onResetButton: function onResetButton() {\n        this.setAndClose(this.computedResetValue);\n      },\n      onCloseButton: function onCloseButton() {\n        this.hide(true);\n      },\n      setFocus: function setFocus(evt) {\n        this.hasFocus = evt.type === 'focus';\n      },\n      handleHover: function handleHover(hovered) {\n        this.isHovered = hovered;\n      }\n    },\n    render: function render(h) {\n      var _class2, _ref;\n\n      var size = this.size;\n      var state = this.state;\n      var localYMD = this.localYMD;\n      var disabled = this.disabled;\n      var readonly = this.readonly;\n      var idButton = this.safeId();\n      var idLabel = this.safeId('_value_');\n      var idMenu = this.safeId('_dialog_');\n      var idWrapper = this.safeId('_b-form-date_');\n      var $button = h('div', {\n        attrs: {\n          'aria-hidden': 'true'\n        }\n      }, [this.isHovered || this.hasFocus ? h(BIconCalendarFill, {\n        props: {\n          scale: 1.25\n        }\n      }) : h(BIconCalendar, {\n        props: {\n          scale: 1.25\n        }\n      })]);\n      $button = h('button', {\n        ref: 'toggle',\n        staticClass: 'btn border-0 h-auto py-0',\n        class: _defineProperty({}, \"btn-\".concat(size), !!size),\n        attrs: {\n          id: idButton,\n          type: 'button',\n          disabled: disabled,\n          'aria-haspopup': 'dialog',\n          'aria-expanded': this.visible ? 'true' : 'false',\n          'aria-invalid': state === false ? 'true' : null,\n          'aria-required': this.required ? 'true' : null\n        },\n        on: {\n          mousedown: this.onMousedown,\n          click: this.toggle,\n          keydown: this.toggle,\n          // Handle ENTER, SPACE and DOWN\n          '!focus': this.setFocus,\n          '!blur': this.setFocus\n        }\n      }, [$button]); // Label as a \"fake\" input\n      // This label will be read by screen readers when the button is focused\n\n      var $input = h('label', {\n        staticClass: 'form-control text-break text-wrap border-0 bg-transparent h-auto pl-1 m-0',\n        class: (_class2 = {\n          // Mute the text if showing the placeholder\n          'text-muted': !localYMD\n        }, _defineProperty(_class2, \"form-control-\".concat(size), !!size), _defineProperty(_class2, 'is-invalid', state === false), _defineProperty(_class2, 'is-valid', state === true), _class2),\n        attrs: {\n          id: idLabel,\n          for: idButton,\n          dir: this.isRTL ? 'rtl' : 'ltr',\n          lang: this.localLocale || null,\n          'aria-invalid': state === false ? 'true' : null,\n          'aria-required': this.required ? 'true' : null\n        },\n        on: {\n          // Disable bubbling of the click event to\n          // prevent menu from closing and re-opening\n          click: function click(evt)\n          /* istanbul ignore next */\n          {\n            evt.stopPropagation();\n          }\n        }\n      }, [// Add the formatted value or placeholder\n      localYMD ? this.formattedValue : this.placeholder || this.labelNoDateSelected, // Add an sr-only 'selected date' label if a date is selected\n      localYMD ? h('span', {\n        staticClass: 'sr-only'\n      }, \" (\".concat(this.labelSelected, \") \")) : h()]); // Optional footer buttons\n\n      var $controls = [];\n\n      if (this.todayButton) {\n        var label = this.labelTodayButton;\n        $controls.push(h(BButton, {\n          props: {\n            size: 'sm',\n            disabled: disabled || readonly,\n            variant: this.todayButtonVariant\n          },\n          attrs: {\n            'aria-label': label || null\n          },\n          on: {\n            click: this.onTodayButton\n          }\n        }, label));\n      }\n\n      if (this.resetButton) {\n        var _label = this.labelResetButton;\n        $controls.push(h(BButton, {\n          props: {\n            size: 'sm',\n            disabled: disabled || readonly,\n            variant: this.resetButtonVariant\n          },\n          attrs: {\n            'aria-label': _label || null\n          },\n          on: {\n            click: this.onResetButton\n          }\n        }, _label));\n      }\n\n      if (this.closeButton) {\n        var _label2 = this.labelCloseButton;\n        $controls.push(h(BButton, {\n          props: {\n            size: 'sm',\n            disabled: this.disabled,\n            variant: this.closeButtonVariant\n          },\n          attrs: {\n            'aria-label': _label2 || null\n          },\n          on: {\n            click: this.onCloseButton\n          }\n        }, _label2));\n      }\n\n      if ($controls.length > 0) {\n        $controls = [h('div', {\n          staticClass: 'b-form-date-controls d-flex flex-wrap',\n          class: {\n            'justify-content-between': $controls.length > 1,\n            'justify-content-end': $controls.length < 2\n          }\n        }, $controls)];\n      }\n\n      var $calendar = h(BCalendar, {\n        key: 'calendar',\n        ref: 'calendar',\n        staticClass: 'b-form-date-calendar',\n        props: this.calendarProps,\n        on: {\n          selected: this.onSelected,\n          input: this.onInput,\n          context: this.onContext\n        }\n      }, $controls);\n      var $menu = h('div', {\n        ref: 'menu',\n        staticClass: 'dropdown-menu p-2',\n        class: {\n          show: this.visible,\n          'dropdown-menu-right': this.right,\n          'bg-dark': this.dark,\n          'text-light': this.dark\n        },\n        attrs: {\n          id: idMenu,\n          role: 'dialog',\n          'aria-modal': 'false',\n          'aria-labelledby': idLabel\n        },\n        on: {\n          keydown: this.onKeydown // Handle ESC\n\n        }\n      }, [$calendar]);\n      var $hidden = h();\n\n      if (this.name && !disabled) {\n        $hidden = h('input', {\n          attrs: {\n            type: 'hidden',\n            name: this.name,\n            form: this.form,\n            value: localYMD || ''\n          }\n        });\n      }\n\n      return h('div', {\n        staticClass: 'b-form-datepicker form-control dropdown h-auto p-0 d-flex',\n        class: [this.directionClass, (_ref = {\n          show: this.visible,\n          focus: this.hasFocus\n        }, _defineProperty(_ref, \"form-control-\".concat(size), !!size), _defineProperty(_ref, 'is-invalid', state === false), _defineProperty(_ref, 'is-valid', state === true), _ref)],\n        attrs: {\n          id: idWrapper,\n          role: 'group',\n          'aria-disabled': disabled,\n          'aria-readonly': readonly && !disabled,\n          'aria-labelledby': idLabel,\n          'aria-invalid': state === false ? 'true' : null,\n          'aria-required': this.required ? 'true' : null,\n          // We don't want the flex order to change here\n          // So we always use 'ltr'\n          dir: 'ltr'\n        },\n        directives: [{\n          name: 'b-hover',\n          value: this.handleHover\n        }]\n      }, [$button, $hidden, $menu, $input]);\n    }\n  });\n\n  var FormDatepickerPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BFormDatepicker: BFormDatepicker,\n      BDatepicker: BFormDatepicker\n    }\n  });\n\n  // @vue/component\n  var formCustomMixin = {\n    props: {\n      plain: {\n        type: Boolean,\n        default: false\n      }\n    },\n    computed: {\n      custom: function custom() {\n        return !this.plain;\n      }\n    }\n  };\n\n  var NAME$e = 'BFormFile';\n  var VALUE_EMPTY_DEPRECATED_MSG = 'Setting \"value\"/\"v-model\" to an empty string for reset is deprecated. Set to \"null\" instead.'; // @vue/component\n\n  var BFormFile =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$e,\n    mixins: [idMixin, formMixin, formStateMixin, formCustomMixin, normalizeSlotMixin],\n    inheritAttrs: false,\n    model: {\n      prop: 'value',\n      event: 'input'\n    },\n    props: {\n      size: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig('BFormControl', 'size');\n        }\n      },\n      value: {\n        type: [File, Array],\n        default: null,\n        validator: function validator(val) {\n          /* istanbul ignore next */\n          if (val === '') {\n            warn(VALUE_EMPTY_DEPRECATED_MSG, NAME$e);\n            return true;\n          }\n\n          return isUndefinedOrNull(val) || isFile(val) || isArray(val) && (val.length === 0 || val.every(isFile));\n        }\n      },\n      accept: {\n        type: String,\n        default: ''\n      },\n      // Instruct input to capture from camera\n      capture: {\n        type: Boolean,\n        default: false\n      },\n      placeholder: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$e, 'placeholder');\n        }\n      },\n      browseText: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$e, 'browseText');\n        }\n      },\n      dropPlaceholder: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$e, 'dropPlaceholder');\n        }\n      },\n      multiple: {\n        type: Boolean,\n        default: false\n      },\n      directory: {\n        type: Boolean,\n        default: false\n      },\n      noTraverse: {\n        type: Boolean,\n        default: false\n      },\n      noDrop: {\n        type: Boolean,\n        default: false\n      },\n      fileNameFormatter: {\n        type: Function,\n        default: null\n      }\n    },\n    data: function data() {\n      return {\n        selectedFile: null,\n        dragging: false,\n        hasFocus: false\n      };\n    },\n    computed: {\n      selectLabel: function selectLabel() {\n        // Draging active\n        if (this.dragging && this.dropPlaceholder) {\n          return this.dropPlaceholder;\n        } // No file chosen\n\n\n        if (!this.selectedFile || this.selectedFile.length === 0) {\n          return this.placeholder;\n        } // Convert selectedFile to an array (if not already one)\n\n\n        var files = concat(this.selectedFile).filter(identity);\n\n        if (this.hasNormalizedSlot('file-name')) {\n          // There is a slot for formatting the files/names\n          return [this.normalizeSlot('file-name', {\n            files: files,\n            names: files.map(function (f) {\n              return f.name;\n            })\n          })];\n        } else {\n          // Use the user supplied formatter, or the built in one.\n          return isFunction(this.fileNameFormatter) ? toString$1(this.fileNameFormatter(files)) : files.map(function (file) {\n            return file.name;\n          }).join(', ');\n        }\n      }\n    },\n    watch: {\n      selectedFile: function selectedFile(newVal, oldVal) {\n        // The following test is needed when the file input is \"reset\" or the\n        // exact same file(s) are selected to prevent an infinite loop.\n        // When in `multiple` mode we need to check for two empty arrays or\n        // two arrays with identical files\n        if (newVal === oldVal || isArray(newVal) && isArray(oldVal) && newVal.length === oldVal.length && newVal.every(function (v, i) {\n          return v === oldVal[i];\n        })) {\n          return;\n        }\n\n        if (!newVal && this.multiple) {\n          this.$emit('input', []);\n        } else {\n          this.$emit('input', newVal);\n        }\n      },\n      value: function value(newVal) {\n        if (!newVal || isArray(newVal) && newVal.length === 0) {\n          this.reset();\n        }\n      }\n    },\n    methods: {\n      focusHandler: function focusHandler(evt) {\n        // Bootstrap v4 doesn't have focus styling for custom file input\n        // Firefox has a '[type=file]:focus ~ sibling' selector issue,\n        // so we add a 'focus' class to get around these bugs\n        if (this.plain || evt.type === 'focusout') {\n          this.hasFocus = false;\n        } else {\n          // Add focus styling for custom file input\n          this.hasFocus = true;\n        }\n      },\n      reset: function reset() {\n        try {\n          // Wrapped in try in case IE 11 craps out\n          this.$refs.input.value = '';\n        } catch (e) {} // IE 11 doesn't support setting `input.value` to '' or null\n        // So we use this little extra hack to reset the value, just in case.\n        // This also appears to work on modern browsers as well.\n\n\n        this.$refs.input.type = '';\n        this.$refs.input.type = 'file';\n        this.selectedFile = this.multiple ? [] : null;\n      },\n      onFileChange: function onFileChange(evt) {\n        var _this = this;\n\n        // Always emit original event\n        this.$emit('change', evt); // Check if special `items` prop is available on event (drop mode)\n        // Can be disabled by setting no-traverse\n\n        var items = evt.dataTransfer && evt.dataTransfer.items;\n        /* istanbul ignore next: not supported in JSDOM */\n\n        if (items && !this.noTraverse) {\n          var queue = [];\n\n          for (var i = 0; i < items.length; i++) {\n            var item = items[i].webkitGetAsEntry();\n\n            if (item) {\n              queue.push(this.traverseFileTree(item));\n            }\n          }\n\n          Promise.all(queue).then(function (filesArr) {\n            _this.setFiles(from(filesArr));\n          });\n          return;\n        } // Normal handling\n\n\n        this.setFiles(evt.target.files || evt.dataTransfer.files);\n      },\n      setFiles: function setFiles() {\n        var files = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n        if (!files) {\n          /* istanbul ignore next: this will probably not happen */\n          this.selectedFile = null;\n        } else if (this.multiple) {\n          // Convert files to array\n          var filesArray = [];\n\n          for (var i = 0; i < files.length; i++) {\n            filesArray.push(files[i]);\n          } // Return file(s) as array\n\n\n          this.selectedFile = filesArray;\n        } else {\n          // Return single file object\n          this.selectedFile = files[0] || null;\n        }\n      },\n      onReset: function onReset() {\n        // Triggered when the parent form (if any) is reset\n        this.selectedFile = this.multiple ? [] : null;\n      },\n      onDragover: function onDragover(evt)\n      /* istanbul ignore next: difficult to test in JSDOM */\n      {\n        evt.preventDefault();\n        evt.stopPropagation();\n\n        if (this.noDrop || !this.custom) {\n          return;\n        }\n\n        this.dragging = true;\n        evt.dataTransfer.dropEffect = 'copy';\n      },\n      onDragleave: function onDragleave(evt)\n      /* istanbul ignore next: difficult to test in JSDOM */\n      {\n        evt.preventDefault();\n        evt.stopPropagation();\n        this.dragging = false;\n      },\n      onDrop: function onDrop(evt)\n      /* istanbul ignore next: difficult to test in JSDOM */\n      {\n        evt.preventDefault();\n        evt.stopPropagation();\n\n        if (this.noDrop) {\n          return;\n        }\n\n        this.dragging = false;\n\n        if (evt.dataTransfer.files && evt.dataTransfer.files.length > 0) {\n          this.onFileChange(evt);\n        }\n      },\n      traverseFileTree: function traverseFileTree(item, path)\n      /* istanbul ignore next: not supported in JSDOM */\n      {\n        var _this2 = this;\n\n        // Based on http://stackoverflow.com/questions/3590058\n        return new Promise(function (resolve) {\n          path = path || '';\n\n          if (item.isFile) {\n            // Get file\n            item.file(function (file) {\n              file.$path = path; // Inject $path to file obj\n\n              resolve(file);\n            });\n          } else if (item.isDirectory) {\n            // Get folder contents\n            item.createReader().readEntries(function (entries) {\n              var queue = [];\n\n              for (var i = 0; i < entries.length; i++) {\n                queue.push(_this2.traverseFileTree(entries[i], path + item.name + '/'));\n              }\n\n              Promise.all(queue).then(function (filesArr) {\n                resolve(from(filesArr));\n              });\n            });\n          }\n        });\n      }\n    },\n    render: function render(h) {\n      // Form Input\n      var input = h('input', {\n        ref: 'input',\n        class: [{\n          'form-control-file': this.plain,\n          'custom-file-input': this.custom,\n          focus: this.custom && this.hasFocus\n        }, this.stateClass],\n        attrs: _objectSpread2({}, this.$attrs, {\n          type: 'file',\n          id: this.safeId(),\n          name: this.name,\n          disabled: this.disabled,\n          required: this.required,\n          form: this.form || null,\n          capture: this.capture || null,\n          accept: this.accept || null,\n          multiple: this.multiple,\n          webkitdirectory: this.directory,\n          'aria-required': this.required ? 'true' : null\n        }),\n        on: {\n          change: this.onFileChange,\n          focusin: this.focusHandler,\n          focusout: this.focusHandler,\n          reset: this.onReset\n        }\n      });\n\n      if (this.plain) {\n        return input;\n      } // Overlay Labels\n\n\n      var label = h('label', {\n        staticClass: 'custom-file-label',\n        class: [this.dragging ? 'dragging' : null],\n        attrs: {\n          for: this.safeId(),\n          'data-browse': this.browseText || null\n        }\n      }, this.selectLabel); // Return rendered custom file input\n\n      return h('div', {\n        staticClass: 'custom-file b-form-file',\n        class: [this.stateClass, _defineProperty({}, \"b-custom-control-\".concat(this.size), this.size)],\n        attrs: {\n          id: this.safeId('_BV_file_outer_')\n        },\n        on: {\n          dragover: this.onDragover,\n          dragleave: this.onDragleave,\n          drop: this.onDrop\n        }\n      }, [input, label]);\n    }\n  });\n\n  var FormFilePlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BFormFile: BFormFile,\n      BFile: BFormFile\n    }\n  });\n\n  /**\n   * Suffix can be a falsey value so nothing is appended to string.\n   * (helps when looping over props & some shouldn't change)\n   * Use data last parameters to allow for currying.\n   * @param {string} suffix\n   * @param {string} str\n   */\n\n  var suffixPropName = function suffixPropName(suffix, str) {\n    return str + (suffix ? upperFirst(suffix) : '');\n  };\n\n  var RX_COL_CLASS = /^col-/; // Generates a prop object with a type of `[Boolean, String, Number]`\n\n  var boolStrNum = function boolStrNum() {\n    return {\n      type: [Boolean, String, Number],\n      default: false\n    };\n  }; // Generates a prop object with a type of `[String, Number]`\n\n\n  var strNum = function strNum() {\n    return {\n      type: [String, Number],\n      default: null\n    };\n  }; // Compute a breakpoint class name\n\n\n  var computeBreakpoint = function computeBreakpoint(type, breakpoint, val) {\n    var className = type;\n\n    if (isUndefinedOrNull(val) || val === false) {\n      return undefined;\n    }\n\n    if (breakpoint) {\n      className += \"-\".concat(breakpoint);\n    } // Handling the boolean style prop when accepting [Boolean, String, Number]\n    // means Vue will not convert <b-col sm></b-col> to sm: true for us.\n    // Since the default is false, an empty string indicates the prop's presence.\n\n\n    if (type === 'col' && (val === '' || val === true)) {\n      // .col-md\n      return lowerCase(className);\n    } // .order-md-6\n\n\n    className += \"-\".concat(val);\n    return lowerCase(className);\n  }; // Memoized function for better performance on generating class names\n\n\n  var computeBreakpointClass = memoize(computeBreakpoint); // Cached copy of the breakpoint prop names\n\n  var breakpointPropMap = create(null); // Lazy evaled props factory for BCol\n\n  var generateProps = function generateProps() {\n    // Grab the breakpoints from the cached config (exclude the '' (xs) breakpoint)\n    var breakpoints = getBreakpointsUpCached().filter(identity); // Supports classes like: .col-sm, .col-md-6, .col-lg-auto\n\n    var breakpointCol = breakpoints.reduce(function (propMap, breakpoint) {\n      if (breakpoint) {\n        // We filter out the '' breakpoint (xs), as making a prop name ''\n        // would not work. The `cols` prop is used for `xs`\n        propMap[breakpoint] = boolStrNum();\n      }\n\n      return propMap;\n    }, create(null)); // Supports classes like: .offset-md-1, .offset-lg-12\n\n    var breakpointOffset = breakpoints.reduce(function (propMap, breakpoint) {\n      propMap[suffixPropName(breakpoint, 'offset')] = strNum();\n      return propMap;\n    }, create(null)); // Supports classes like: .order-md-1, .order-lg-12\n\n    var breakpointOrder = breakpoints.reduce(function (propMap, breakpoint) {\n      propMap[suffixPropName(breakpoint, 'order')] = strNum();\n      return propMap;\n    }, create(null)); // For loop doesn't need to check hasOwnProperty\n    // when using an object created from null\n\n    breakpointPropMap = assign(create(null), {\n      col: keys(breakpointCol),\n      offset: keys(breakpointOffset),\n      order: keys(breakpointOrder)\n    }); // Return the generated props\n\n    return _objectSpread2({\n      // Generic flexbox .col (xs)\n      col: {\n        type: Boolean,\n        default: false\n      },\n      // .col-[1-12]|auto  (xs)\n      cols: strNum()\n    }, breakpointCol, {\n      offset: strNum()\n    }, breakpointOffset, {\n      order: strNum()\n    }, breakpointOrder, {\n      // Flex alignment\n      alignSelf: {\n        type: String,\n        default: null,\n        validator: function validator(str) {\n          return arrayIncludes(['auto', 'start', 'end', 'center', 'baseline', 'stretch'], str);\n        }\n      },\n      tag: {\n        type: String,\n        default: 'div'\n      }\n    });\n  }; // We do not use Vue.extend here as that would evaluate the props\n  // immediately, which we do not want to happen\n  // @vue/component\n\n\n  var BCol = {\n    name: 'BCol',\n    functional: true,\n\n    get props() {\n      // Allow props to be lazy evaled on first access and\n      // then they become a non-getter afterwards.\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get#Smart_self-overwriting_lazy_getters\n      delete this.props; // eslint-disable-next-line no-return-assign\n\n      return this.props = generateProps();\n    },\n\n    render: function render(h, _ref) {\n      var _classList$push;\n\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      var classList = []; // Loop through `col`, `offset`, `order` breakpoint props\n\n      for (var type in breakpointPropMap) {\n        // Returns colSm, offset, offsetSm, orderMd, etc.\n        var _keys = breakpointPropMap[type];\n\n        for (var i = 0; i < _keys.length; i++) {\n          // computeBreakpoint(col, colSm => Sm, value=[String, Number, Boolean])\n          var c = computeBreakpointClass(type, _keys[i].replace(type, ''), props[_keys[i]]); // If a class is returned, push it onto the array.\n\n          if (c) {\n            classList.push(c);\n          }\n        }\n      }\n\n      var hasColClasses = classList.some(function (className) {\n        return RX_COL_CLASS.test(className);\n      });\n      classList.push((_classList$push = {\n        // Default to .col if no other col-{bp}-* classes generated nor `cols` specified.\n        col: props.col || !hasColClasses && !props.cols\n      }, _defineProperty(_classList$push, \"col-\".concat(props.cols), props.cols), _defineProperty(_classList$push, \"offset-\".concat(props.offset), props.offset), _defineProperty(_classList$push, \"order-\".concat(props.order), props.order), _defineProperty(_classList$push, \"align-self-\".concat(props.alignSelf), props.alignSelf), _classList$push));\n      return h(props.tag, a(data, {\n        class: classList\n      }), children);\n    }\n  };\n\n  var NAME$f = 'BFormGroup'; // Selector for finding first input in the form-group\n\n  var SELECTOR$1 = 'input:not([disabled]),textarea:not([disabled]),select:not([disabled])'; // Render helper functions (here rather than polluting the instance with more methods)\n\n  var renderInvalidFeedback = function renderInvalidFeedback(h, ctx) {\n    var content = ctx.normalizeSlot('invalid-feedback') || ctx.invalidFeedback;\n    var invalidFeedback = h();\n\n    if (content) {\n      invalidFeedback = h(BFormInvalidFeedback, {\n        props: {\n          id: ctx.invalidFeedbackId,\n          // If state is explicitly false, always show the feedback\n          state: ctx.computedState,\n          tooltip: ctx.tooltip,\n          ariaLive: ctx.feedbackAriaLive,\n          role: ctx.feedbackAriaLive ? 'alert' : null\n        },\n        attrs: {\n          tabindex: content ? '-1' : null\n        }\n      }, [content]);\n    }\n\n    return invalidFeedback;\n  };\n\n  var renderValidFeedback = function renderValidFeedback(h, ctx) {\n    var content = ctx.normalizeSlot('valid-feedback') || ctx.validFeedback;\n    var validFeedback = h();\n\n    if (content) {\n      validFeedback = h(BFormValidFeedback, {\n        props: {\n          id: ctx.validFeedbackId,\n          // If state is explicitly true, always show the feedback\n          state: ctx.computedState,\n          tooltip: ctx.tooltip,\n          ariaLive: ctx.feedbackAriaLive,\n          role: ctx.feedbackAriaLive ? 'alert' : null\n        },\n        attrs: {\n          tabindex: content ? '-1' : null\n        }\n      }, [content]);\n    }\n\n    return validFeedback;\n  };\n\n  var renderHelpText = function renderHelpText(h, ctx) {\n    // Form help text (description)\n    var content = ctx.normalizeSlot('description') || ctx.description;\n    var description = h();\n\n    if (content) {\n      description = h(BFormText, {\n        attrs: {\n          id: ctx.descriptionId,\n          tabindex: content ? '-1' : null\n        }\n      }, [content]);\n    }\n\n    return description;\n  };\n\n  var renderLabel = function renderLabel(h, ctx) {\n    // Render label/legend inside b-col if necessary\n    var content = ctx.normalizeSlot('label') || ctx.label;\n    var labelFor = ctx.labelFor;\n    var isLegend = !labelFor;\n    var isHorizontal = ctx.isHorizontal;\n    var labelTag = isLegend ? 'legend' : 'label';\n\n    if (!content && !isHorizontal) {\n      return h();\n    } else if (ctx.labelSrOnly) {\n      var label = h();\n\n      if (content) {\n        label = h(labelTag, {\n          class: 'sr-only',\n          attrs: {\n            id: ctx.labelId,\n            for: labelFor || null\n          }\n        }, [content]);\n      }\n\n      return h(isHorizontal ? BCol : 'div', {\n        props: isHorizontal ? ctx.labelColProps : {}\n      }, [label]);\n    } else {\n      return h(isHorizontal ? BCol : labelTag, {\n        on: isLegend ? {\n          click: ctx.legendClick\n        } : {},\n        props: isHorizontal ? _objectSpread2({\n          tag: labelTag\n        }, ctx.labelColProps) : {},\n        attrs: {\n          id: ctx.labelId,\n          for: labelFor || null,\n          // We add a tab index to legend so that screen readers\n          // will properly read the aria-labelledby in IE.\n          tabindex: isLegend ? '-1' : null\n        },\n        class: [// Hide the focus ring on the legend\n        isLegend ? 'bv-no-focus-ring' : '', // When horizontal or if a legend is rendered, add col-form-label\n        // for correct sizing as Bootstrap has inconsistent font styling\n        // for legend in non-horizontal form-groups.\n        // See: https://github.com/twbs/bootstrap/issues/27805\n        isHorizontal || isLegend ? 'col-form-label' : '', // Emulate label padding top of 0 on legend when not horizontal\n        !isHorizontal && isLegend ? 'pt-0' : '', // If not horizontal and not a legend, we add d-block to label\n        // so that label-align works\n        !isHorizontal && !isLegend ? 'd-block' : '', ctx.labelSize ? \"col-form-label-\".concat(ctx.labelSize) : '', ctx.labelAlignClasses, ctx.labelClass]\n      }, [content]);\n    }\n  }; // -- BFormGroup Prop factory -- used for lazy generation of props\n  // Memoize this function to return cached values to\n  // save time in computed functions\n\n\n  var makePropName = memoize(function () {\n    var breakpoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var prefix = arguments.length > 1 ? arguments[1] : undefined;\n    return \"\".concat(prefix).concat(upperFirst(breakpoint));\n  }); // BFormGroup prop generator for lazy generation of props\n\n  var generateProps$1 = function generateProps() {\n    var BREAKPOINTS = getBreakpointsUpCached(); // Generate the labelCol breakpoint props\n\n    var bpLabelColProps = BREAKPOINTS.reduce(function (props, breakpoint) {\n      // i.e. label-cols, label-cols-sm, label-cols-md, ...\n      props[makePropName(breakpoint, 'labelCols')] = {\n        type: [Number, String, Boolean],\n        default: breakpoint ? false : null\n      };\n      return props;\n    }, create(null)); // Generate the labelAlign breakpoint props\n\n    var bpLabelAlignProps = BREAKPOINTS.reduce(function (props, breakpoint) {\n      // label-align, label-align-sm, label-align-md, ...\n      props[makePropName(breakpoint, 'labelAlign')] = {\n        type: String,\n        // left, right, center\n        default: null\n      };\n      return props;\n    }, create(null));\n    return _objectSpread2({\n      label: {\n        type: String,\n        default: null\n      },\n      labelFor: {\n        type: String,\n        default: null\n      },\n      labelSize: {\n        type: String,\n        default: null\n      },\n      labelSrOnly: {\n        type: Boolean,\n        default: false\n      }\n    }, bpLabelColProps, {}, bpLabelAlignProps, {\n      labelClass: {\n        type: [String, Array, Object],\n        default: null\n      },\n      description: {\n        type: String,\n        default: null\n      },\n      invalidFeedback: {\n        type: String,\n        default: null\n      },\n      validFeedback: {\n        type: String,\n        default: null\n      },\n      tooltip: {\n        // Enable tooltip style feedback\n        type: Boolean,\n        default: false\n      },\n      feedbackAriaLive: {\n        type: String,\n        default: 'assertive'\n      },\n      validated: {\n        type: Boolean,\n        default: false\n      },\n      disabled: {\n        type: Boolean,\n        default: false\n      }\n    });\n  }; // We do not use Vue.extend here as that would evaluate the props\n  // immediately, which we do not want to happen\n  // @vue/component\n\n\n  var BFormGroup = {\n    name: NAME$f,\n    mixins: [idMixin, formStateMixin, normalizeSlotMixin],\n\n    get props() {\n      // Allow props to be lazy evaled on first access and\n      // then they become a non-getter afterwards.\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get#Smart_self-overwriting_lazy_getters\n      delete this.props; // eslint-disable-next-line no-return-assign\n\n      return this.props = generateProps$1();\n    },\n\n    computed: {\n      labelColProps: function labelColProps() {\n        var _this = this;\n\n        var props = {};\n        getBreakpointsUpCached().forEach(function (breakpoint) {\n          // Grab the value if the label column breakpoint prop\n          var propVal = _this[makePropName(breakpoint, 'labelCols')]; // Handle case where the prop's value is an empty string,\n          // which represents true\n\n\n          propVal = propVal === '' ? true : propVal || false;\n\n          if (!isBoolean(propVal) && propVal !== 'auto') {\n            // Convert to column size to number\n            propVal = parseInt(propVal, 10) || 0; // Ensure column size is greater than 0\n\n            propVal = propVal > 0 ? propVal : false;\n          }\n\n          if (propVal) {\n            // Add the prop to the list of props to give to b-col\n            // If breakpoint is '' (labelCols=true), then we use the\n            // col prop to make equal width at xs\n            var bColPropName = breakpoint || (isBoolean(propVal) ? 'col' : 'cols'); // Add it to the props\n\n            props[bColPropName] = propVal;\n          }\n        });\n        return props;\n      },\n      labelAlignClasses: function labelAlignClasses() {\n        var _this2 = this;\n\n        var classes = [];\n        getBreakpointsUpCached().forEach(function (breakpoint) {\n          // Assemble the label column breakpoint align classes\n          var propVal = _this2[makePropName(breakpoint, 'labelAlign')] || null;\n\n          if (propVal) {\n            var className = breakpoint ? \"text-\".concat(breakpoint, \"-\").concat(propVal) : \"text-\".concat(propVal);\n            classes.push(className);\n          }\n        });\n        return classes;\n      },\n      isHorizontal: function isHorizontal() {\n        // Determine if the resultant form-group will be rendered\n        // horizontal (meaning it has label-col breakpoints)\n        return keys(this.labelColProps).length > 0;\n      },\n      labelId: function labelId() {\n        return this.hasNormalizedSlot('label') || this.label ? this.safeId('_BV_label_') : null;\n      },\n      descriptionId: function descriptionId() {\n        return this.hasNormalizedSlot('description') || this.description ? this.safeId('_BV_description_') : null;\n      },\n      hasInvalidFeedback: function hasInvalidFeedback() {\n        // Used for computing aria-describedby\n        return this.computedState === false && (this.hasNormalizedSlot('invalid-feedback') || this.invalidFeedback);\n      },\n      invalidFeedbackId: function invalidFeedbackId() {\n        return this.hasInvalidFeedback ? this.safeId('_BV_feedback_invalid_') : null;\n      },\n      hasValidFeedback: function hasValidFeedback() {\n        // Used for computing aria-describedby\n        return this.computedState === true && (this.hasNormalizedSlot('valid-feedback') || this.validFeedback);\n      },\n      validFeedbackId: function validFeedbackId() {\n        return this.hasValidFeedback ? this.safeId('_BV_feedback_valid_') : null;\n      },\n      describedByIds: function describedByIds() {\n        // Screen readers will read out any content linked to by aria-describedby\n        // even if the content is hidden with `display: none;`, hence we only include\n        // feedback IDs if the form-group's state is explicitly valid or invalid.\n        return [this.descriptionId, this.invalidFeedbackId, this.validFeedbackId].filter(Boolean).join(' ') || null;\n      }\n    },\n    watch: {\n      describedByIds: function describedByIds(add, remove) {\n        if (add !== remove) {\n          this.setInputDescribedBy(add, remove);\n        }\n      }\n    },\n    mounted: function mounted() {\n      var _this3 = this;\n\n      this.$nextTick(function () {\n        // Set the aria-describedby IDs on the input specified by label-for\n        // We do this in a nextTick to ensure the children have finished rendering\n        _this3.setInputDescribedBy(_this3.describedByIds);\n      });\n    },\n    methods: {\n      legendClick: function legendClick(evt) {\n        if (this.labelFor) {\n          // Don't do anything if labelFor is set\n\n          /* istanbul ignore next: clicking a label will focus the input, so no need to test */\n          return;\n        }\n\n        var tagName = evt.target ? evt.target.tagName : '';\n\n        if (/^(input|select|textarea|label|button|a)$/i.test(tagName)) {\n          // If clicked an interactive element inside legend,\n          // we just let the default happen\n\n          /* istanbul ignore next */\n          return;\n        }\n\n        var inputs = selectAll(SELECTOR$1, this.$refs.content).filter(isVisible);\n\n        if (inputs && inputs.length === 1 && inputs[0].focus) {\n          // if only a single input, focus it, emulating label behaviour\n          try {\n            inputs[0].focus();\n          } catch (_unused) {}\n        }\n      },\n      setInputDescribedBy: function setInputDescribedBy(add, remove) {\n        // Sets the `aria-describedby` attribute on the input if label-for is set.\n        // Optionally accepts a string of IDs to remove as the second parameter.\n        // Preserves any aria-describedby value(s) user may have on input.\n        if (this.labelFor && isBrowser) {\n          var input = select(\"#\".concat(this.labelFor), this.$refs.content);\n\n          if (input) {\n            var adb = 'aria-describedby';\n            var ids = (getAttr(input, adb) || '').split(/\\s+/);\n            add = (add || '').split(/\\s+/);\n            remove = (remove || '').split(/\\s+/); // Update ID list, preserving any original IDs\n            // and ensuring the ID's are unique\n\n            ids = ids.filter(function (id) {\n              return !arrayIncludes(remove, id);\n            }).concat(add).filter(Boolean);\n            ids = keys(ids.reduce(function (memo, id) {\n              return _objectSpread2({}, memo, _defineProperty({}, id, true));\n            }, {})).join(' ').trim();\n\n            if (ids) {\n              setAttr(input, adb, ids);\n            } else {\n              // No IDs, so remove the attribute\n              removeAttr(input, adb);\n            }\n          }\n        }\n      }\n    },\n    render: function render(h) {\n      var isFieldset = !this.labelFor;\n      var isHorizontal = this.isHorizontal; // Generate the label\n\n      var label = renderLabel(h, this); // Generate the content\n\n      var content = h(isHorizontal ? BCol : 'div', {\n        ref: 'content',\n        // Hide focus ring\n        staticClass: 'bv-no-focus-ring',\n        attrs: {\n          tabindex: isFieldset ? '-1' : null,\n          role: isFieldset ? 'group' : null\n        }\n      }, [this.normalizeSlot('default') || h(), renderInvalidFeedback(h, this), renderValidFeedback(h, this), renderHelpText(h, this)]); // Create the form-group\n\n      var data = {\n        staticClass: 'form-group',\n        class: [this.validated ? 'was-validated' : null, this.stateClass],\n        attrs: {\n          id: this.safeId(),\n          disabled: isFieldset ? this.disabled : null,\n          role: isFieldset ? null : 'group',\n          'aria-invalid': this.computedState === false ? 'true' : null,\n          // Only apply aria-labelledby if we are a horizontal fieldset\n          // as the legend is no longer a direct child of fieldset\n          'aria-labelledby': isFieldset && isHorizontal ? this.labelId : null,\n          // Only apply aria-describedby IDs if we are a fieldset\n          // as the input will have the IDs when not a fieldset\n          'aria-describedby': isFieldset ? this.describedByIds : null\n        }\n      }; // Return it wrapped in a form-group\n      // Note: Fieldsets do not support adding `row` or `form-row` directly\n      // to them due to browser specific render issues, so we move the `form-row`\n      // to an inner wrapper div when horizontal and using a fieldset\n\n      return h(isFieldset ? 'fieldset' : isHorizontal ? BFormRow : 'div', data, isHorizontal && isFieldset ? [h(BFormRow, [label, content])] : [label, content]);\n    }\n  };\n\n  var FormGroupPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BFormGroup: BFormGroup,\n      BFormFieldset: BFormGroup\n    }\n  });\n\n  var formTextMixin = {\n    model: {\n      prop: 'value',\n      event: 'update'\n    },\n    props: {\n      value: {\n        type: [String, Number],\n        default: ''\n      },\n      ariaInvalid: {\n        type: [Boolean, String],\n        default: false\n      },\n      readonly: {\n        type: Boolean,\n        default: false\n      },\n      plaintext: {\n        type: Boolean,\n        default: false\n      },\n      autocomplete: {\n        type: String,\n        default: null\n      },\n      placeholder: {\n        type: String,\n        default: null\n      },\n      formatter: {\n        type: Function,\n        default: null\n      },\n      lazyFormatter: {\n        type: Boolean,\n        default: false\n      },\n      trim: {\n        type: Boolean,\n        default: false\n      },\n      number: {\n        type: Boolean,\n        default: false\n      },\n      lazy: {\n        // Only update the `v-model` on blur/change events\n        type: Boolean,\n        default: false\n      },\n      debounce: {\n        // Debounce timout (in ms). Not applicable with `lazy` prop\n        type: [Number, String],\n        default: 0\n      }\n    },\n    data: function data() {\n      return {\n        localValue: toString$1(this.value),\n        vModelValue: this.value\n      };\n    },\n    computed: {\n      computedClass: function computedClass() {\n        return [{\n          // Range input needs class `custom-range`\n          'custom-range': this.type === 'range',\n          // `plaintext` not supported by `type=\"range\"` or `type=\"color\"`\n          'form-control-plaintext': this.plaintext && this.type !== 'range' && this.type !== 'color',\n          // `form-control` not used by `type=\"range\"` or `plaintext`\n          // Always used by `type=\"color\"`\n          'form-control': !this.plaintext && this.type !== 'range' || this.type === 'color'\n        }, this.sizeFormClass, this.stateClass];\n      },\n      computedAriaInvalid: function computedAriaInvalid() {\n        if (!this.ariaInvalid || this.ariaInvalid === 'false') {\n          // `this.ariaInvalid` is `null` or `false` or 'false'\n          return this.computedState === false ? 'true' : null;\n        }\n\n        if (this.ariaInvalid === true) {\n          // User wants explicit `:aria-invalid=\"true\"`\n          return 'true';\n        } // Most likely a string value (which could be the string 'true')\n\n\n        return this.ariaInvalid;\n      },\n      computedDebounce: function computedDebounce() {\n        // Ensure we have a positive number equal to or greater than 0\n        return Math.max(toInteger(this.debounce) || 0, 0);\n      },\n      hasFormatter: function hasFormatter() {\n        return isFunction(this.formatter);\n      }\n    },\n    watch: {\n      value: function value(newVal) {\n        var stringifyValue = toString$1(newVal);\n\n        if (stringifyValue !== this.localValue && newVal !== this.vModelValue) {\n          // Clear any pending debounce timeout, as we are overwriting the user input\n          this.clearDebounce(); // Update the local values\n\n          this.localValue = stringifyValue;\n          this.vModelValue = newVal;\n        }\n      }\n    },\n    mounted: function mounted() {\n      // Create non-reactive property and set up destroy handler\n      this.$_inputDebounceTimer = null;\n      this.$on('hook:beforeDestroy', this.clearDebounce); // Preset the internal state\n\n      var value = this.value;\n      var stringifyValue = toString$1(value);\n      /* istanbul ignore next */\n\n      if (stringifyValue !== this.localValue && value !== this.vModelValue) {\n        this.localValue = stringifyValue;\n        this.vModelValue = value;\n      }\n    },\n    methods: {\n      clearDebounce: function clearDebounce() {\n        clearTimeout(this.$_inputDebounceTimer);\n        this.$_inputDebounceTimer = null;\n      },\n      formatValue: function formatValue(value, evt) {\n        var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        value = toString$1(value);\n\n        if (this.hasFormatter && (!this.lazyFormatter || force)) {\n          value = this.formatter(value, evt);\n        }\n\n        return value;\n      },\n      modifyValue: function modifyValue(value) {\n        // Emulate `.trim` modifier behaviour\n        if (this.trim) {\n          value = value.trim();\n        } // Emulate `.number` modifier behaviour\n\n\n        if (this.number) {\n          var number = toFloat(value);\n          value = isNaN(number) ? value : number;\n        }\n\n        return value;\n      },\n      updateValue: function updateValue(value) {\n        var _this = this;\n\n        var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var lazy = this.lazy;\n\n        if (lazy && !force) {\n          return;\n        }\n\n        value = this.modifyValue(value);\n\n        if (value !== this.vModelValue) {\n          this.clearDebounce();\n\n          var doUpdate = function doUpdate() {\n            _this.vModelValue = value;\n\n            _this.$emit('update', value);\n          };\n\n          var debounce = this.computedDebounce; // Only debounce the value update when a value greater than `0`\n          // is set and we are not in lazy mode or this is a forced update\n\n          if (debounce > 0 && !lazy && !force) {\n            this.$_inputDebounceTimer = setTimeout(doUpdate, debounce);\n          } else {\n            // Immediately update the v-model\n            doUpdate();\n          }\n        } else if (this.hasFormatter) {\n          // When the `vModelValue` hasn't changed but the actual input value\n          // is out of sync, make sure to change it to the given one\n          // Usually caused by browser autocomplete and how it triggers the\n          // change or input event, or depending on the formatter function\n          // https://github.com/bootstrap-vue/bootstrap-vue/issues/2657\n          // https://github.com/bootstrap-vue/bootstrap-vue/issues/3498\n\n          /* istanbul ignore next: hard to test */\n          var $input = this.$refs.input;\n          /* istanbul ignore if: hard to test out of sync value */\n\n          if ($input && value !== $input.value) {\n            $input.value = value;\n          }\n        }\n      },\n      onInput: function onInput(evt) {\n        // `evt.target.composing` is set by Vue\n        // https://github.com/vuejs/vue/blob/dev/src/platforms/web/runtime/directives/model.js\n        // TODO: Is this needed now with the latest Vue?\n\n        /* istanbul ignore if: hard to test composition events */\n        if (evt.target.composing) {\n          return;\n        }\n\n        var value = evt.target.value;\n        var formattedValue = this.formatValue(value, evt); // Exit when the `formatter` function strictly returned `false`\n        // or prevented the input event\n\n        /* istanbul ignore next */\n\n        if (formattedValue === false || evt.defaultPrevented) {\n          evt.preventDefault();\n          return;\n        }\n\n        this.localValue = formattedValue;\n        this.updateValue(formattedValue);\n        this.$emit('input', formattedValue);\n      },\n      onChange: function onChange(evt) {\n        var value = evt.target.value;\n        var formattedValue = this.formatValue(value, evt); // Exit when the `formatter` function strictly returned `false`\n        // or prevented the input event\n\n        /* istanbul ignore next */\n\n        if (formattedValue === false || evt.defaultPrevented) {\n          evt.preventDefault();\n          return;\n        }\n\n        this.localValue = formattedValue;\n        this.updateValue(formattedValue, true);\n        this.$emit('change', formattedValue);\n      },\n      onBlur: function onBlur(evt) {\n        // Apply the `localValue` on blur to prevent cursor jumps\n        // on mobile browsers (e.g. caused by autocomplete)\n        var value = evt.target.value;\n        var formattedValue = this.formatValue(value, evt, true);\n\n        if (formattedValue !== false) {\n          // We need to use the modified value here to apply the\n          // `.trim` and `.number` modifiers properly\n          this.localValue = toString$1(this.modifyValue(formattedValue)); // We pass the formatted value here since the `updateValue` method\n          // handles the modifiers itself\n\n          this.updateValue(formattedValue, true);\n        } // Emit native blur event\n\n\n        this.$emit('blur', evt);\n      },\n      focus: function focus() {\n        // For external handler that may want a focus method\n        if (!this.disabled) {\n          this.$el.focus();\n        }\n      },\n      blur: function blur() {\n        // For external handler that may want a blur method\n        if (!this.disabled) {\n          this.$el.blur();\n        }\n      }\n    }\n  };\n\n  // @vue/component\n  var formSelectionMixin = {\n    computed: {\n      selectionStart: {\n        // Expose selectionStart for formatters, etc\n        cache: false,\n        get: function get()\n        /* istanbul ignore next */\n        {\n          return this.$refs.input.selectionStart;\n        },\n        set: function set(val)\n        /* istanbul ignore next */\n        {\n          this.$refs.input.selectionStart = val;\n        }\n      },\n      selectionEnd: {\n        // Expose selectionEnd for formatters, etc\n        cache: false,\n        get: function get()\n        /* istanbul ignore next */\n        {\n          return this.$refs.input.selectionEnd;\n        },\n        set: function set(val)\n        /* istanbul ignore next */\n        {\n          this.$refs.input.selectionEnd = val;\n        }\n      },\n      selectionDirection: {\n        // Expose selectionDirection for formatters, etc\n        cache: false,\n        get: function get()\n        /* istanbul ignore next */\n        {\n          return this.$refs.input.selectionDirection;\n        },\n        set: function set(val)\n        /* istanbul ignore next */\n        {\n          this.$refs.input.selectionDirection = val;\n        }\n      }\n    },\n    methods: {\n      select: function select()\n      /* istanbul ignore next */\n      {\n        var _this$$refs$input;\n\n        // For external handler that may want a select() method\n        (_this$$refs$input = this.$refs.input).select.apply(_this$$refs$input, arguments);\n      },\n      setSelectionRange: function setSelectionRange()\n      /* istanbul ignore next */\n      {\n        var _this$$refs$input2;\n\n        // For external handler that may want a setSelectionRange(a,b,c) method\n        (_this$$refs$input2 = this.$refs.input).setSelectionRange.apply(_this$$refs$input2, arguments);\n      },\n      setRangeText: function setRangeText()\n      /* istanbul ignore next */\n      {\n        var _this$$refs$input3;\n\n        // For external handler that may want a setRangeText(a,b,c) method\n        (_this$$refs$input3 = this.$refs.input).setRangeText.apply(_this$$refs$input3, arguments);\n      }\n    }\n  };\n\n  // @vue/component\n  var formValidityMixin = {\n    computed: {\n      validity: {\n        // Expose validity property\n        cache: false,\n        get: function get()\n        /* istanbul ignore next */\n        {\n          return this.$refs.input.validity;\n        }\n      },\n      validationMessage: {\n        // Expose validationMessage property\n        cache: false,\n        get: function get()\n        /* istanbul ignore next */\n        {\n          return this.$refs.input.validationMessage;\n        }\n      },\n      willValidate: {\n        // Expose willValidate property\n        cache: false,\n        get: function get()\n        /* istanbul ignore next */\n        {\n          return this.$refs.input.willValidate;\n        }\n      }\n    },\n    methods: {\n      setCustomValidity: function setCustomValidity()\n      /* istanbul ignore next */\n      {\n        var _this$$refs$input;\n\n        // For external handler that may want a setCustomValidity(...) method\n        return (_this$$refs$input = this.$refs.input).setCustomValidity.apply(_this$$refs$input, arguments);\n      },\n      checkValidity: function checkValidity()\n      /* istanbul ignore next */\n      {\n        var _this$$refs$input2;\n\n        // For external handler that may want a checkValidity(...) method\n        return (_this$$refs$input2 = this.$refs.input).checkValidity.apply(_this$$refs$input2, arguments);\n      },\n      reportValidity: function reportValidity()\n      /* istanbul ignore next */\n      {\n        var _this$$refs$input3;\n\n        // For external handler that may want a reportValidity(...) method\n        return (_this$$refs$input3 = this.$refs.input).reportValidity.apply(_this$$refs$input3, arguments);\n      }\n    }\n  };\n\n  var TYPES = ['text', 'password', 'email', 'number', 'url', 'tel', 'search', 'range', 'color', 'date', 'time', 'datetime', 'datetime-local', 'month', 'week']; // @vue/component\n\n  var BFormInput =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BFormInput',\n    mixins: [idMixin, formMixin, formSizeMixin, formStateMixin, formTextMixin, formSelectionMixin, formValidityMixin],\n    props: {\n      // value prop defined in form-text mixin\n      // value: { },\n      type: {\n        type: String,\n        default: 'text',\n        validator: function validator(type) {\n          return arrayIncludes(TYPES, type);\n        }\n      },\n      noWheel: {\n        // Disable mousewheel to prevent wheel from changing values (i.e. number/date).\n        type: Boolean,\n        default: false\n      },\n      min: {\n        type: [String, Number],\n        default: null\n      },\n      max: {\n        type: [String, Number],\n        default: null\n      },\n      step: {\n        type: [String, Number],\n        default: null\n      },\n      list: {\n        type: String,\n        default: null\n      }\n    },\n    computed: {\n      localType: function localType() {\n        // We only allow certain types\n        return arrayIncludes(TYPES, this.type) ? this.type : 'text';\n      }\n    },\n    watch: {\n      noWheel: function noWheel(newVal) {\n        this.setWheelStopper(newVal);\n      }\n    },\n    mounted: function mounted() {\n      this.setWheelStopper(this.noWheel);\n    },\n    deactivated: function deactivated() {\n      // Turn off listeners when keep-alive component deactivated\n\n      /* istanbul ignore next */\n      this.setWheelStopper(false);\n    },\n    activated: function activated() {\n      // Turn on listeners (if no-wheel) when keep-alive component activated\n\n      /* istanbul ignore next */\n      this.setWheelStopper(this.noWheel);\n    },\n    beforeDestroy: function beforeDestroy() {\n      /* istanbul ignore next */\n      this.setWheelStopper(false);\n    },\n    methods: {\n      setWheelStopper: function setWheelStopper(on) {\n        var input = this.$el; // We use native events, so that we don't interfere with propagation\n\n        eventOnOff(on, input, 'focus', this.onWheelFocus);\n        eventOnOff(on, input, 'blur', this.onWheelBlur);\n\n        if (!on) {\n          eventOff(document, 'wheel', this.stopWheel);\n        }\n      },\n      onWheelFocus: function onWheelFocus() {\n        eventOn(document, 'wheel', this.stopWheel);\n      },\n      onWheelBlur: function onWheelBlur() {\n        eventOff(document, 'wheel', this.stopWheel);\n      },\n      stopWheel: function stopWheel(evt) {\n        evt.preventDefault();\n        this.$el.blur();\n      }\n    },\n    render: function render(h) {\n      var self = this;\n      return h('input', {\n        ref: 'input',\n        class: self.computedClass,\n        directives: [{\n          name: 'model',\n          rawName: 'v-model',\n          value: self.localValue,\n          expression: 'localValue'\n        }],\n        attrs: {\n          id: self.safeId(),\n          name: self.name,\n          form: self.form || null,\n          type: self.localType,\n          disabled: self.disabled,\n          placeholder: self.placeholder,\n          required: self.required,\n          autocomplete: self.autocomplete || null,\n          readonly: self.readonly || self.plaintext,\n          min: self.min,\n          max: self.max,\n          step: self.step,\n          list: self.localType !== 'password' ? self.list : null,\n          'aria-required': self.required ? 'true' : null,\n          'aria-invalid': self.computedAriaInvalid\n        },\n        domProps: {\n          value: self.localValue\n        },\n        on: _objectSpread2({}, self.$listeners, {\n          input: self.onInput,\n          change: self.onChange,\n          blur: self.onBlur\n        })\n      });\n    }\n  });\n\n  var FormInputPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BFormInput: BFormInput,\n      BInput: BFormInput\n    }\n  });\n\n  var props$w = {\n    checked: {\n      // type: [String, Number, Boolean, Object],\n      default: null\n    }\n  }; // @vue/component\n\n  var BFormRadioGroup =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BFormRadioGroup',\n    mixins: [idMixin, formMixin, formRadioCheckGroupMixin, // Includes render function\n    formOptionsMixin, formSizeMixin, formStateMixin],\n    provide: function provide() {\n      return {\n        bvRadioGroup: this\n      };\n    },\n    props: props$w,\n    data: function data() {\n      return {\n        localChecked: this.checked\n      };\n    },\n    computed: {\n      isRadioGroup: function isRadioGroup() {\n        return true;\n      }\n    }\n  });\n\n  var FormRadioPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BFormRadio: BFormRadio,\n      BRadio: BFormRadio,\n      BFormRadioGroup: BFormRadioGroup,\n      BRadioGroup: BFormRadioGroup\n    }\n  });\n\n  var optionsMixin = {\n    mixins: [formOptionsMixin],\n    props: {\n      labelField: {\n        type: String,\n        default: 'label'\n      },\n      optionsField: {\n        type: String,\n        default: 'options'\n      }\n    },\n    methods: {\n      normalizeOption: function normalizeOption(option) {\n        var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        // When the option is an object, normalize it\n        if (isPlainObject(option)) {\n          var value = get(option, this.valueField);\n          var text = get(option, this.textField);\n          var options = get(option, this.optionsField); // When it has options, create an `<optgroup>` object\n\n          if (isArray(options)) {\n            return {\n              label: String(get(option, this.labelField) || text),\n              options: options\n            };\n          } // Otherwise create an `<option>` object\n\n\n          return {\n            value: isUndefined(value) ? key || text : value,\n            text: String(isUndefined(text) ? key : text),\n            html: get(option, this.htmlField),\n            disabled: Boolean(get(option, this.disabledField))\n          };\n        } // Otherwise create an `<option>` object from the given value\n\n\n        return {\n          value: key || option,\n          text: String(option),\n          disabled: false\n        };\n      }\n    }\n  };\n\n  var NAME$g = 'BFormSelectOption';\n  var props$x = {\n    value: {\n      // type: [String, Number, Boolean, Object],\n      required: true\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  }; // @vue/component\n\n  var BFormSelectOption =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$g,\n    functional: true,\n    props: props$x,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      var value = props.value,\n          disabled = props.disabled;\n      return h('option', a(data, {\n        attrs: {\n          disabled: disabled\n        },\n        domProps: {\n          value: value\n        }\n      }), children);\n    }\n  });\n\n  var BFormSelectOptionGroup =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BFormSelectOptionGroup',\n    mixins: [normalizeSlotMixin, formOptionsMixin],\n    props: {\n      label: {\n        type: String,\n        required: true\n      }\n    },\n    render: function render(h) {\n      return h('optgroup', {\n        attrs: {\n          label: this.label\n        }\n      }, [this.normalizeSlot('first'), this.formOptions.map(function (option, index) {\n        return h(BFormSelectOption, {\n          props: {\n            value: option.value,\n            disabled: option.disabled\n          },\n          domProps: htmlOrText(option.html, option.text),\n          key: \"option_\".concat(index, \"_opt\")\n        });\n      }), this.normalizeSlot('default')]);\n    }\n  });\n\n  var BFormSelect =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BFormSelect',\n    mixins: [idMixin, normalizeSlotMixin, formMixin, formSizeMixin, formStateMixin, formCustomMixin, optionsMixin],\n    model: {\n      prop: 'value',\n      event: 'input'\n    },\n    props: {\n      value: {// type: [Object, Array, String, Number, Boolean],\n        // default: undefined\n      },\n      multiple: {\n        type: Boolean,\n        default: false\n      },\n      selectSize: {\n        // Browsers default size to 0, which shows 4 rows in most browsers in multiple mode\n        // Size of 1 can bork out Firefox\n        type: Number,\n        default: 0\n      },\n      ariaInvalid: {\n        type: [Boolean, String],\n        default: false\n      }\n    },\n    data: function data() {\n      return {\n        localValue: this.value\n      };\n    },\n    computed: {\n      computedSelectSize: function computedSelectSize() {\n        // Custom selects with a size of zero causes the arrows to be hidden,\n        // so dont render the size attribute in this case\n        return !this.plain && this.selectSize === 0 ? null : this.selectSize;\n      },\n      inputClass: function inputClass() {\n        return [this.plain ? 'form-control' : 'custom-select', this.size && this.plain ? \"form-control-\".concat(this.size) : null, this.size && !this.plain ? \"custom-select-\".concat(this.size) : null, this.stateClass];\n      },\n      computedAriaInvalid: function computedAriaInvalid() {\n        if (this.ariaInvalid === true || this.ariaInvalid === 'true') {\n          return 'true';\n        }\n\n        return this.stateClass === 'is-invalid' ? 'true' : null;\n      }\n    },\n    watch: {\n      value: function value(newVal) {\n        this.localValue = newVal;\n      },\n      localValue: function localValue() {\n        this.$emit('input', this.localValue);\n      }\n    },\n    methods: {\n      focus: function focus() {\n        this.$refs.input.focus();\n      },\n      blur: function blur() {\n        this.$refs.input.blur();\n      }\n    },\n    render: function render(h) {\n      var _this = this;\n\n      return h('select', {\n        ref: 'input',\n        class: this.inputClass,\n        directives: [{\n          name: 'model',\n          rawName: 'v-model',\n          value: this.localValue,\n          expression: 'localValue'\n        }],\n        attrs: {\n          id: this.safeId(),\n          name: this.name,\n          form: this.form || null,\n          multiple: this.multiple || null,\n          size: this.computedSelectSize,\n          disabled: this.disabled,\n          required: this.required,\n          'aria-required': this.required ? 'true' : null,\n          'aria-invalid': this.computedAriaInvalid\n        },\n        on: {\n          change: function change(evt) {\n            var target = evt.target;\n            var selectedVal = from(target.options).filter(function (o) {\n              return o.selected;\n            }).map(function (o) {\n              return '_value' in o ? o._value : o.value;\n            });\n            _this.localValue = target.multiple ? selectedVal : selectedVal[0];\n\n            _this.$nextTick(function () {\n              _this.$emit('change', _this.localValue);\n            });\n          }\n        }\n      }, [this.normalizeSlot('first'), this.formOptions.map(function (option, index) {\n        var key = \"option_\".concat(index, \"_opt\");\n        var options = option.options;\n        return isArray(options) ? h(BFormSelectOptionGroup, {\n          props: {\n            label: option.label,\n            options: options\n          },\n          key: key\n        }) : h(BFormSelectOption, {\n          props: {\n            value: option.value,\n            disabled: option.disabled\n          },\n          domProps: htmlOrText(option.html, option.text),\n          key: key\n        });\n      }), this.normalizeSlot('default')]);\n    }\n  });\n\n  var FormSelectPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BFormSelect: BFormSelect,\n      BFormSelectOption: BFormSelectOption,\n      BFormSelectOptionGroup: BFormSelectOptionGroup,\n      BSelect: BFormSelect,\n      BSelectOption: BFormSelectOption,\n      BSelectOptionGroup: BFormSelectOptionGroup\n    }\n  });\n\n  var NAME$h = 'BFormSpinbutton';\n  var UP$1 = KEY_CODES.UP,\n      DOWN$1 = KEY_CODES.DOWN,\n      HOME$1 = KEY_CODES.HOME,\n      END$1 = KEY_CODES.END,\n      PAGEUP$1 = KEY_CODES.PAGEUP,\n      PAGEDOWN$1 = KEY_CODES.PAGEDOWN; // Default for spin button range and step\n\n  var DEFAULT_MIN = 1;\n  var DEFAULT_MAX = 100;\n  var DEFAULT_STEP = 1; // Delay before auto-repeat in ms\n\n  var DEFAULT_REPEAT_DELAY = 500; // Repeat interval in ms\n\n  var DEFAULT_REPEAT_INTERVAL = 100; // Repeat rate increased after number of repeats\n\n  var DEFAULT_REPEAT_THRESHOLD = 10; // Repeat speed multiplier (step multiplier, must be an integer)\n\n  var DEFAULT_REPEAT_MULTIPLIER = 4; // --- Helper functions ---\n\n  var defaultNumber = function defaultNumber(value) {\n    var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    value = toFloat(value);\n    return isNaN(value) ? defaultValue : value;\n  };\n\n  var defaultInteger = function defaultInteger(value) {\n    var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    value = toInteger(value);\n    return isNaN(value) ? Math.abs(defaultValue) : value;\n  }; // --- BFormSpinbutton ---\n  // @vue/component\n\n\n  var BFormSpinbutton =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$h,\n    mixins: [idMixin],\n    inheritAttrs: false,\n    props: {\n      value: {\n        // Should this really be String, to match native number inputs?\n        type: Number,\n        default: null\n      },\n      min: {\n        type: [Number, String],\n        default: DEFAULT_MIN\n      },\n      max: {\n        type: [Number, String],\n        default: DEFAULT_MAX\n      },\n      step: {\n        type: [Number, String],\n        default: DEFAULT_STEP\n      },\n      wrap: {\n        type: Boolean,\n        default: false\n      },\n      formatterFn: {\n        type: Function // default: null\n\n      },\n      size: {\n        type: String // default: null\n\n      },\n      placeholder: {\n        type: String,\n        default: null\n      },\n      disabled: {\n        type: Boolean,\n        default: false\n      },\n      readonly: {\n        type: Boolean,\n        default: false\n      },\n      required: {\n        // Only affects the `aria-invalid` attribute\n        type: Boolean,\n        default: false\n      },\n      name: {\n        type: String // default: null\n\n      },\n      form: {\n        type: String // default: null\n\n      },\n      state: {\n        // Tri-state prop: `true`, `false`, or `null`\n        type: Boolean,\n        default: null\n      },\n      inline: {\n        type: Boolean,\n        default: false\n      },\n      vertical: {\n        type: Boolean,\n        default: false\n      },\n      ariaLabel: {\n        type: String,\n        default: null\n      },\n      ariaControls: {\n        type: String,\n        default: null\n      },\n      labelDecrement: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$h, 'labelDecrement');\n        }\n      },\n      labelIncrement: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$h, 'labelIncrement');\n        }\n      },\n      locale: {\n        type: [String, Array],\n        default: null\n      },\n      repeatDelay: {\n        type: [Number, String],\n        default: DEFAULT_REPEAT_DELAY\n      },\n      repeatInterval: {\n        type: [Number, String],\n        default: DEFAULT_REPEAT_INTERVAL\n      },\n      repeatThreshold: {\n        type: [Number, String],\n        default: DEFAULT_REPEAT_THRESHOLD\n      },\n      repeatStepMultiplier: {\n        type: [Number, String],\n        default: DEFAULT_REPEAT_MULTIPLIER\n      }\n    },\n    data: function data() {\n      return {\n        localValue: defaultNumber(this.value),\n        hasFocus: false\n      };\n    },\n    computed: {\n      computedStep: function computedStep() {\n        return defaultNumber(this.step, DEFAULT_STEP);\n      },\n      computedMin: function computedMin() {\n        return defaultNumber(this.min, DEFAULT_MIN);\n      },\n      computedMax: function computedMax() {\n        return defaultNumber(this.max, DEFAULT_MAX);\n      },\n      computedDelay: function computedDelay() {\n        return defaultInteger(this.repeatDelay, DEFAULT_REPEAT_DELAY) || DEFAULT_REPEAT_DELAY;\n      },\n      computedInterval: function computedInterval() {\n        return defaultInteger(this.repeatInterval, DEFAULT_REPEAT_INTERVAL) || DEFAULT_REPEAT_INTERVAL;\n      },\n      computedThreshold: function computedThreshold() {\n        return defaultInteger(this.repeatThreshold, DEFAULT_REPEAT_THRESHOLD) || 1;\n      },\n      computedStepMultiplier: function computedStepMultiplier() {\n        return defaultInteger(this.repeatStepMultiplier, DEFAULT_REPEAT_MULTIPLIER) || 1;\n      },\n      computedPrecision: function computedPrecision() {\n        // Quick and dirty way to get the number of decimals\n        var step = this.computedStep;\n        return Math.floor(step) === step ? 0 : (step.toString().split('.')[1] || '').length;\n      },\n      computedMultiplier: function computedMultiplier() {\n        return Math.pow(10, this.computedPrecision || 0);\n      },\n      valueAsFixed: function valueAsFixed() {\n        var value = this.localValue;\n        return isNull(value) ? '' : value.toFixed(this.computedPrecision);\n      },\n      computedLocale: function computedLocale() {\n        var locales = concat(this.locale).filter(identity);\n        var nf = new Intl.NumberFormat(locales);\n        return nf.resolvedOptions().locale;\n      },\n      defaultFormatter: function defaultFormatter() {\n        // Returns and `Intl.NumberFormat` formatter method reference\n        var precision = this.computedPrecision;\n        var nf = new Intl.NumberFormat(this.computedLocale, {\n          style: 'decimal',\n          useGrouping: false,\n          minimumIntegerDigits: 1,\n          minimumFractionDigits: precision,\n          maximumFractionDigits: precision,\n          notation: 'standard'\n        }); // Return the format method reference\n\n        return nf.format;\n      }\n    },\n    watch: {\n      value: function value(_value) {\n        _value = toFloat(_value); // Will be `NaN` if `value` is `null`\n\n        this.localValue = isNaN(_value) ? null : _value;\n      },\n      localValue: function localValue(value) {\n        this.$emit('input', value);\n      },\n      disabled: function disabled(_disabled) {\n        if (_disabled) {\n          this.clearRepeat();\n        }\n      },\n      readonly: function readonly(_readonly) {\n        if (_readonly) {\n          this.clearRepeat();\n        }\n      }\n    },\n    created: function created() {\n      // Create non reactive properties\n      this.$_autoDelayTimer = null;\n      this.$_autoRepeatTimer = null;\n      this.$_keyIsDown = false;\n    },\n    beforeDestroy: function beforeDestroy() {\n      this.clearRepeat();\n    },\n    deactivated: function deactivated()\n    /* istanbul ignore next */\n    {\n      this.clearRepeat();\n    },\n    methods: {\n      // --- Public methods ---\n      focus: function focus() {\n        if (!this.disabled) {\n          try {\n            this.$refs.spinner.focus();\n          } catch (_unused) {}\n        }\n      },\n      blur: function blur() {\n        if (!this.disabled) {\n          try {\n            this.$refs.spinner.blur();\n          } catch (_unused2) {}\n        }\n      },\n      // --- Private methods ---\n      emitChange: function emitChange() {\n        this.$emit('change', this.localValue);\n      },\n      stepValue: function stepValue(direction) {\n        // Sets a new incremented or decremented value, supporting optional wrapping\n        // Direction is either +1 or -1 (or a multiple thereof)\n        var value = this.localValue;\n\n        if (!this.disabled && !isNull(value)) {\n          var step = this.computedStep * direction;\n          var min = this.computedMin;\n          var max = this.computedMax;\n          var multiplier = this.computedMultiplier;\n          var wrap = this.wrap; // We ensure that the value steps like a native input\n\n          value = Math.round((value - min) / step) * step + min + step; // We ensure that precision is maintained (decimals)\n\n          value = Math.round(value * multiplier) / multiplier; // Handle if wrapping is enabled\n\n          this.localValue = value > max ? wrap ? min : max : value < min ? wrap ? max : min : value;\n        }\n      },\n      onFocusBlur: function onFocusBlur(evt) {\n        if (!this.disabled) {\n          this.hasFocus = evt.type === 'focus';\n        } else {\n          this.hasFocus = false;\n        }\n      },\n      stepUp: function stepUp() {\n        var multiplier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        var value = this.localValue;\n\n        if (isNull(value)) {\n          this.localValue = this.computedMin;\n        } else {\n          this.stepValue(+1 * multiplier);\n        }\n      },\n      stepDown: function stepDown() {\n        var multiplier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        var value = this.localValue;\n\n        if (isNull(value)) {\n          this.localValue = this.wrap ? this.computedMax : this.computedMin;\n        } else {\n          this.stepValue(-1 * multiplier);\n        }\n      },\n      onKeydown: function onKeydown(evt) {\n        var keyCode = evt.keyCode,\n            altKey = evt.altKey,\n            ctrlKey = evt.ctrlKey,\n            metaKey = evt.metaKey;\n        /* istanbul ignore if */\n\n        if (this.disabled || this.readonly || altKey || ctrlKey || metaKey) {\n          return;\n        }\n\n        if (arrayIncludes([UP$1, DOWN$1, HOME$1, END$1, PAGEUP$1, PAGEDOWN$1], keyCode)) {\n          // https://w3c.github.io/aria-practices/#spinbutton\n          evt.preventDefault();\n          /* istanbul ignore if */\n\n          if (this.$_keyIsDown) {\n            // Keypress is already in progress\n            return;\n          }\n\n          this.resetTimers();\n\n          if (arrayIncludes([UP$1, DOWN$1], keyCode)) {\n            // The following use the custom auto-repeat handling\n            this.$_keyIsDown = true;\n\n            if (keyCode === UP$1) {\n              this.handleStepRepeat(evt, this.stepUp);\n            } else if (keyCode === DOWN$1) {\n              this.handleStepRepeat(evt, this.stepDown);\n            }\n          } else {\n            // These use native OS key repeating\n            if (keyCode === PAGEUP$1) {\n              this.stepUp(this.computedStepMultiplier);\n            } else if (keyCode === PAGEDOWN$1) {\n              this.stepDown(this.computedStepMultiplier);\n            } else if (keyCode === HOME$1) {\n              this.localValue = this.computedMin;\n            } else if (keyCode === END$1) {\n              this.localValue = this.computedMax;\n            }\n          }\n        }\n      },\n      onKeyup: function onKeyup(evt) {\n        // Emit a change event when the keyup happens\n        var keyCode = evt.keyCode,\n            altKey = evt.altKey,\n            ctrlKey = evt.ctrlKey,\n            metaKey = evt.metaKey;\n        /* istanbul ignore if */\n\n        if (this.disabled || this.readonly || altKey || ctrlKey || metaKey) {\n          return;\n        }\n\n        if (arrayIncludes([UP$1, DOWN$1, HOME$1, END$1, PAGEUP$1, PAGEDOWN$1], keyCode)) {\n          this.resetTimers();\n          this.$_keyIsDown = false;\n          evt.preventDefault();\n          this.emitChange();\n        }\n      },\n      handleStepRepeat: function handleStepRepeat(evt, stepper) {\n        var _this = this;\n\n        var _ref = evt || {},\n            type = _ref.type,\n            button = _ref.button;\n\n        if (!this.disabled && !this.readonly) {\n          /* istanbul ignore if */\n          if (type === 'mousedown' && button) {\n            // We only respond to left (main === 0) button clicks\n            return;\n          }\n\n          this.resetTimers(); // Enable body mouseup event handler\n\n          this.setMouseup(true); // Step the counter initially\n\n          stepper(1);\n          var threshold = this.computedThreshold;\n          var multiplier = this.computedStepMultiplier;\n          var delay = this.computedDelay;\n          var interval = this.computedInterval; // Initiate the delay/repeat interval\n\n          this.$_autoDelayTimer = setTimeout(function () {\n            var count = 0;\n            _this.$_autoRepeatTimer = setInterval(function () {\n              // After N initial repeats, we increase the incrementing step amount\n              // We do this to minimize screen reader announcements of the value\n              // (values are announced every change, which can be chatty for SR users)\n              // And to make it easer to select a value when the range is large\n              stepper(count < threshold ? 1 : multiplier);\n              count++;\n            }, interval);\n          }, delay);\n        }\n      },\n      onMouseup: function onMouseup(evt) {\n        // `<body>` listener, only enabled when mousedown starts\n        var _ref2 = evt || {},\n            type = _ref2.type,\n            button = _ref2.button;\n        /* istanbul ignore if */\n\n\n        if (type === 'mouseup' && button) {\n          // we only care about left (main === 0) mouse button click\n          return;\n        }\n\n        this.resetTimers();\n        this.setMouseup(false); // Trigger the change event\n\n        this.emitChange();\n      },\n      setMouseup: function setMouseup(on) {\n        // Enable or disabled the body mouseup/touchend handlers\n        // Use try/catch to handle case when called server side\n        try {\n          eventOnOff(on, document.body, 'mouseup', this.onMouseup, EVENT_OPTIONS_PASSIVE);\n          eventOnOff(on, document.body, 'touchend', this.onMouseup, EVENT_OPTIONS_PASSIVE);\n        } catch (_unused3) {}\n      },\n      resetTimers: function resetTimers() {\n        clearTimeout(this.$_autoDelayTimer);\n        clearInterval(this.$_autoRepeatTimer);\n      },\n      clearRepeat: function clearRepeat() {\n        this.resetTimers();\n        this.setMouseup(false);\n        this.$_keyIsDown = false;\n      }\n    },\n    render: function render(h) {\n      var _this2 = this,\n          _class;\n\n      var spinId = this.safeId();\n      var value = this.localValue;\n      var isVertical = this.vertical;\n      var isInline = this.inline && !isVertical;\n      var isDisabled = this.disabled;\n      var isReadonly = this.readonly && !isDisabled;\n      var isRequired = this.required && !isReadonly && !isDisabled;\n      var state = this.state;\n      var size = this.size;\n      var hasValue = !isNull(value);\n      var formatter = isFunction(this.formatterFn) ? this.formatterFn : this.defaultFormatter;\n\n      var makeButton = function makeButton(stepper, label, IconCmp, keyRef, shortcut, btnDisabled) {\n        var $icon = h(IconCmp, {\n          props: {\n            scale: _this2.hasFocus ? 1.5 : 1.25\n          },\n          attrs: {\n            'aria-hidden': 'true'\n          }\n        });\n\n        var handler = function handler(evt)\n        /* istanbul ignore next: until tests written */\n        {\n          if (!isDisabled && !isReadonly) {\n            _this2.handleStepRepeat(evt, stepper);\n          }\n        };\n\n        return h('button', {\n          key: keyRef || null,\n          ref: keyRef,\n          staticClass: 'btn btn-sm border-0 rounded-0',\n          class: {\n            'py-0': !isVertical\n          },\n          attrs: {\n            tabindex: '-1',\n            type: 'button',\n            disabled: isDisabled || isReadonly || btnDisabled,\n            'aria-disabled': isDisabled || isReadonly || btnDisabled ? 'true' : null,\n            'aria-controls': spinId,\n            'aria-label': label || null,\n            'aria-keyshortcuts': shortcut || null\n          },\n          on: {\n            mousedown: handler,\n            touchstart: handler\n          }\n        }, [h('div', {}, [$icon])]);\n      }; // TODO: Add button disabled state when `wrap` is `false` and at value max/min\n\n\n      var $increment = makeButton(this.stepUp, this.labelIncrement, BIconPlus, 'inc', 'ArrowUp');\n      var $decrement = makeButton(this.stepDown, this.labelDecrement, BIconDash, 'dec', 'ArrowDown');\n      var $hidden = h();\n\n      if (this.name && !isDisabled) {\n        $hidden = h('input', {\n          key: 'hidden',\n          attrs: {\n            type: 'hidden',\n            name: this.name,\n            form: this.form || null,\n            // TODO: Should this be set to '' if value is out of range?\n            value: this.valueAsFixed\n          }\n        });\n      }\n\n      var $spin = h( // We use 'output' element to make this accept a `<label for=\"id\">` (Except IE)\n      'output', {\n        ref: 'spinner',\n        key: 'output',\n        staticClass: 'flex-grow-1',\n        class: {\n          'w-100': !isVertical && !isInline,\n          'd-flex': isVertical,\n          'align-self-center': !isVertical,\n          'align-items-center': isVertical,\n          'py-1': isVertical,\n          'px-1': !isVertical,\n          'mx-1': isVertical,\n          'border-top': isVertical,\n          'border-bottom': isVertical,\n          'border-left': !isVertical,\n          'border-right': !isVertical\n        },\n        attrs: {\n          id: spinId,\n          role: 'spinbutton',\n          tabindex: isDisabled ? null : '0',\n          'aria-live': 'off',\n          'aria-label': this.ariaLabel || null,\n          'aria-controls': this.ariaControls || null,\n          // TODO: May want to check if the value is in range\n          'aria-invalid': state === false || !hasValue && isRequired ? 'true' : null,\n          'aria-required': isRequired ? 'true' : null,\n          // These attrs are required for role spinbutton\n          'aria-valuemin': toString$1(this.computedMin),\n          'aria-valuemax': toString$1(this.computedMax),\n          // These should be `null` if the value is out of range\n          // They must also be non-existent attrs if the value is out of range or `null`\n          'aria-valuenow': hasValue ? value : null,\n          'aria-valuetext': hasValue ? formatter(value) : null\n        }\n      }, [h('div', {\n        staticClass: 'w-100'\n      }, hasValue ? formatter(value) : this.placeholder || '')]);\n      return h('div', {\n        staticClass: 'b-form-spinbutton form-control p-0',\n        class: (_class = {\n          disabled: isDisabled,\n          readonly: isReadonly,\n          focus: this.hasFocus\n        }, _defineProperty(_class, \"form-control-\".concat(size), !!size), _defineProperty(_class, 'd-inline-flex', isInline || isVertical), _defineProperty(_class, 'd-flex', !isInline && !isVertical), _defineProperty(_class, 'align-items-stretch', !isVertical), _defineProperty(_class, 'flex-column', isVertical), _defineProperty(_class, 'is-valid', state === true), _defineProperty(_class, 'is-invalid', state === false), _class),\n        attrs: _objectSpread2({}, this.$attrs, {\n          role: 'group',\n          lang: this.computedLocale,\n          tabindex: isDisabled ? null : '-1',\n          // We want to keep the order of the buttons regardless\n          // of locale (flex will re-order based on rtl/ltr)\n          dir: 'ltr'\n        }),\n        on: {\n          keydown: this.onKeydown,\n          keyup: this.onKeyup,\n          // We use capture phase (`!` prefix) since focus and blur do not bubble\n          '!focus': this.onFocusBlur,\n          '!blur': this.onFocusBlur\n        }\n      }, isVertical ? [$increment, $hidden, $spin, $decrement] : [$decrement, $hidden, $spin, $increment]);\n    }\n  });\n\n  var FormSpinbuttonPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BFormSpinbutton: BFormSpinbutton,\n      BSpinbutton: BFormSpinbutton\n    }\n  });\n\n  var NAME$i = 'BFormTag';\n  var BFormTag =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$i,\n    mixins: [idMixin, normalizeSlotMixin],\n    props: {\n      variant: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$i, 'variant');\n        }\n      },\n      disabled: {\n        type: Boolean,\n        default: false\n      },\n      title: {\n        type: String,\n        default: null\n      },\n      pill: {\n        type: Boolean,\n        default: false\n      },\n      removeLabel: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$i, 'removeLabel');\n        }\n      },\n      tag: {\n        type: String,\n        default: 'span'\n      }\n    },\n    methods: {\n      onDelete: function onDelete(evt) {\n        var type = evt.type,\n            keyCode = evt.keyCode;\n\n        if (!this.disabled && (type === 'click' || type === 'keydown' && keyCode === KEY_CODES.DELETE)) {\n          this.$emit('remove');\n        }\n      }\n    },\n    render: function render(h) {\n      var tagId = this.safeId();\n      var tagLabelId = this.safeId('_taglabel_');\n      var $remove = h();\n\n      if (!this.disabled) {\n        $remove = h(BButtonClose, {\n          staticClass: 'b-form-tag-remove ml-1',\n          props: {\n            ariaLabel: this.removeLabel\n          },\n          attrs: {\n            'aria-controls': tagId,\n            'aria-describedby': tagLabelId,\n            'aria-keyshortcuts': 'Delete'\n          },\n          on: {\n            click: this.onDelete,\n            keydown: this.onDelete\n          }\n        });\n      }\n\n      var $tag = h('span', {\n        staticClass: 'b-form-tag-content flex-grow-1 text-truncate',\n        attrs: {\n          id: tagLabelId\n        }\n      }, this.normalizeSlot('default') || this.title || [h()]);\n      return h(BBadge, {\n        staticClass: 'b-form-tag d-inline-flex align-items-baseline mw-100',\n        class: {\n          disabled: this.disabled\n        },\n        attrs: {\n          id: tagId,\n          title: this.title || null,\n          'aria-labelledby': tagLabelId\n        },\n        props: {\n          tag: this.tag,\n          variant: this.variant,\n          pill: this.pill\n        }\n      }, [$tag, $remove]);\n    }\n  });\n\n  var NAME$j = 'BFormTags'; // Supported input types (for built in input)\n\n  var TYPES$1 = ['text', 'email', 'tel', 'url', 'number']; // Pre-compiled regular expressions for performance reasons\n\n  var RX_SPACES = /[\\s\\uFEFF\\xA0]+/g; // KeyCode constants\n\n  var ENTER$1 = KEY_CODES.ENTER,\n      BACKSPACE = KEY_CODES.BACKSPACE,\n      DELETE = KEY_CODES.DELETE; // --- Utility methods ---\n  // Escape special chars in string and replace\n  // contiguous spaces with a whitespace match\n\n  var escapeRegExpChars = function escapeRegExpChars(str) {\n    return escapeRegExp(str).replace(RX_SPACES, '\\\\s');\n  }; // Remove leading/trailing spaces from array of tags and remove duplicates\n\n\n  var cleanTags = function cleanTags(tags) {\n    return concat(tags).map(function (tag) {\n      return trim(toString$1(tag));\n    }).filter(function (tag, index, arr) {\n      return tag.length > 0 && arr.indexOf(tag) === index;\n    });\n  }; // Processes an input/change event, normalizing string or event argument\n\n\n  var processEventValue = function processEventValue(evt) {\n    return isString(evt) ? evt : isEvent(evt) ? evt.target.value || '' : '';\n  }; // Returns a fresh empty `tagsState` object\n\n\n  var cleanTagsState = function cleanTagsState() {\n    return {\n      all: [],\n      valid: [],\n      invalid: [],\n      duplicate: []\n    };\n  }; // @vue/component\n\n\n  var BFormTags =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$j,\n    mixins: [idMixin, normalizeSlotMixin],\n    model: {\n      // Even though this is the default that Vue assumes, we need\n      // to add it for the docs to reflect that this is the model\n      prop: 'value',\n      event: 'input'\n    },\n    props: {\n      inputId: {\n        type: String,\n        default: null\n      },\n      placeholder: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$j, 'placeholder');\n        }\n      },\n      disabled: {\n        type: Boolean,\n        default: false\n      },\n      name: {\n        type: String,\n        default: null\n      },\n      form: {\n        type: String,\n        default: null\n      },\n      autofocus: {\n        type: Boolean,\n        default: false\n      },\n      state: {\n        // Tri-state: `true`, `false`, `null`\n        type: Boolean,\n        default: null\n      },\n      size: {\n        type: String,\n        default: null\n      },\n      inputType: {\n        type: String,\n        default: 'text',\n        validator: function validator(type) {\n          return arrayIncludes(TYPES$1, type);\n        }\n      },\n      inputClass: {\n        type: [String, Array, Object],\n        default: null\n      },\n      inputAttrs: {\n        // Additional attributes to add to the input element\n        type: Object,\n        default: function _default() {\n          return {};\n        }\n      },\n      addButtonText: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$j, 'addButtonText');\n        }\n      },\n      addButtonVariant: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$j, 'addButtonVariant');\n        }\n      },\n      tagVariant: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$j, 'tagVariant');\n        }\n      },\n      tagClass: {\n        type: [String, Array, Object],\n        default: null\n      },\n      tagPills: {\n        type: Boolean,\n        default: false\n      },\n      tagRemoveLabel: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$j, 'tagRemoveLabel');\n        }\n      },\n      tagRemovedLabel: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$j, 'tagRemovedLabel');\n        }\n      },\n      tagValidator: {\n        type: Function,\n        default: null\n      },\n      duplicateTagText: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$j, 'duplicateTagText');\n        }\n      },\n      invalidTagText: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$j, 'invalidTagText');\n        }\n      },\n      separator: {\n        // Character (or characters) that trigger adding tags\n        type: [String, Array],\n        default: null\n      },\n      removeOnDelete: {\n        // Enable deleting last tag in list when BACKSPACE is\n        // pressed and input is empty\n        type: Boolean,\n        default: false\n      },\n      addOnChange: {\n        // Enable change event triggering tag addition\n        // Handy if using <select> as the input\n        type: Boolean,\n        default: false\n      },\n      noAddOnEnter: {\n        // Disable ENTER key from triggering tag addition\n        type: Boolean,\n        default: false\n      },\n      noOuterFocus: {\n        // Disable the focus ring on the root element\n        type: Boolean,\n        default: false\n      },\n      value: {\n        // The v-model prop\n        type: Array,\n        default: function _default() {\n          return [];\n        }\n      }\n    },\n    data: function data() {\n      return {\n        hasFocus: false,\n        newTag: '',\n        tags: [],\n        // Tags that were removed\n        removedTags: [],\n        // Populated when tags are parsed\n        tagsState: cleanTagsState()\n      };\n    },\n    computed: {\n      computedInputId: function computedInputId() {\n        return this.inputId || this.safeId('__input__');\n      },\n      computedInputType: function computedInputType() {\n        // We only allow certain types\n        return arrayIncludes(TYPES$1, this.inputType) ? this.inputType : 'text';\n      },\n      computedInputAttrs: function computedInputAttrs() {\n        return _objectSpread2({}, this.inputAttrs, {\n          // Must have attributes\n          id: this.computedInputId,\n          value: this.newTag,\n          disabled: this.disabled || null,\n          form: this.form || null\n        });\n      },\n      computedInputHandlers: function computedInputHandlers() {\n        return {\n          input: this.onInputInput,\n          change: this.onInputChange,\n          keydown: this.onInputKeydown\n        };\n      },\n      computedSeparator: function computedSeparator() {\n        // Merge the array into a string\n        return concat(this.separator).filter(isString).filter(identity).join('');\n      },\n      computedSeparatorRegExp: function computedSeparatorRegExp() {\n        // We use a computed prop here to precompile the RegExp\n        // The RegExp is a character class RE in the form of `/[abc]+/`\n        // where a, b, and c are the valid separator characters\n        // -> `tags = str.split(/[abc]+/).filter(t => t)`\n        var separator = this.computedSeparator;\n        return separator ? new RegExp(\"[\".concat(escapeRegExpChars(separator), \"]+\")) : null;\n      },\n      computedJoiner: function computedJoiner() {\n        // When tag(s) are invalid or duplicate, we leave them\n        // in the input so that the user can see them\n        // If there are more than one tag in the input, we use the\n        // first separator character as the separator in the input\n        // We append a space if the first separator is not a space\n        var joiner = this.computedSeparator.charAt(0);\n        return joiner !== ' ' ? \"\".concat(joiner, \" \") : joiner;\n      },\n      disableAddButton: function disableAddButton() {\n        var _this = this;\n\n        // If 'Add' button should be disabled\n        // If the input contains at least one tag that can\n        // be added, then the 'Add' button should be enabled\n        var newTag = trim(this.newTag);\n        return newTag === '' || !this.splitTags(newTag).some(function (t) {\n          return !arrayIncludes(_this.tags, t) && _this.validateTag(t);\n        });\n      },\n      duplicateTags: function duplicateTags() {\n        return this.tagsState.duplicate;\n      },\n      hasDuplicateTags: function hasDuplicateTags() {\n        return this.duplicateTags.length > 0;\n      },\n      invalidTags: function invalidTags() {\n        return this.tagsState.invalid;\n      },\n      hasInvalidTags: function hasInvalidTags() {\n        return this.invalidTags.length > 0;\n      }\n    },\n    watch: {\n      value: function value(newVal) {\n        this.tags = cleanTags(newVal);\n      },\n      tags: function tags(newVal, oldVal) {\n        // Update the `v-model` (if it differs from the value prop)\n        if (!looseEqual(newVal, this.value)) {\n          this.$emit('input', newVal);\n        }\n\n        if (!looseEqual(newVal, oldVal)) {\n          newVal = concat(newVal).filter(identity);\n          oldVal = concat(oldVal).filter(identity);\n          this.removedTags = oldVal.filter(function (old) {\n            return !arrayIncludes(newVal, old);\n          });\n        }\n      },\n      tagsState: function tagsState(newVal, oldVal) {\n        // Emit a tag-state event when the `tagsState` object changes\n        if (!looseEqual(newVal, oldVal)) {\n          this.$emit('tag-state', newVal.valid, newVal.invalid, newVal.duplicate);\n        }\n      }\n    },\n    created: function created() {\n      // We do this in created to make sure an input event emits\n      // if the cleaned tags are not equal to the value prop\n      this.tags = cleanTags(this.value);\n    },\n    mounted: function mounted() {\n      this.handleAutofocus();\n    },\n    activated: function activated()\n    /* istanbul ignore next */\n    {\n      this.handleAutofocus();\n    },\n    methods: {\n      addTag: function addTag(newTag) {\n        newTag = isString(newTag) ? newTag : this.newTag;\n        /* istanbul ignore next */\n\n        if (this.disabled || trim(newTag) === '') {\n          // Early exit\n          return;\n        }\n\n        var parsed = this.parseTags(newTag); // Add any new tags to the `tags` array, or if the\n        // array of `allTags` is empty, we clear the input\n\n        if (parsed.valid.length > 0 || parsed.all.length === 0) {\n          // Clear the user input element (and leave in any invalid/duplicate tag(s)\n\n          /* istanbul ignore if: full testing to be added later */\n          if (matches(this.getInput(), 'select')) {\n            // The following is needed to properly\n            // work with `<select>` elements\n            this.newTag = '';\n          } else {\n            var invalidAndDuplicates = [].concat(_toConsumableArray(parsed.invalid), _toConsumableArray(parsed.duplicate));\n            this.newTag = parsed.all.filter(function (tag) {\n              return arrayIncludes(invalidAndDuplicates, tag);\n            }).join(this.computedJoiner).concat(invalidAndDuplicates.length > 0 ? this.computedJoiner.charAt(0) : '');\n          }\n        }\n\n        if (parsed.valid.length > 0) {\n          // We add the new tags in one atomic operation\n          // to trigger reactivity once (instead of once per tag)\n          // We do this after we update the new tag input value\n          // `concat()` can be faster than array spread, when both args are arrays\n          this.tags = concat(this.tags, parsed.valid);\n        }\n\n        this.tagsState = parsed; // Attempt to re-focus the input (specifically for when using the Add\n        // button, as the button disappears after successfully adding a tag\n\n        this.focus();\n      },\n      removeTag: function removeTag(tag) {\n        var _this2 = this;\n\n        /* istanbul ignore next */\n        if (this.disabled) {\n          return;\n        } // TODO:\n        //   Add `onRemoveTag(tag)` user method, which if returns `false`\n        //   will prevent the tag from being removed (i.e. confirmation)\n        //   Or emit cancelable `BvEvent`\n\n\n        this.tags = this.tags.filter(function (t) {\n          return t !== tag;\n        }); // Return focus to the input (if possible)\n\n        this.$nextTick(function () {\n          _this2.focus();\n        });\n      },\n      // --- Input element event handlers ---\n      onInputInput: function onInputInput(evt) {\n        /* istanbul ignore next: hard to test composition events */\n        if (this.disabled || isEvent(evt) && evt.target.composing) {\n          // `evt.target.composing` is set by Vue (`v-model` directive)\n          // https://github.com/vuejs/vue/blob/dev/src/platforms/web/runtime/directives/model.js\n          return;\n        }\n\n        var newTag = processEventValue(evt);\n        var separatorRe = this.computedSeparatorRegExp;\n\n        if (this.newTag !== newTag) {\n          this.newTag = newTag;\n        } // We ignore leading whitespace for the following\n\n\n        newTag = trimLeft(newTag);\n\n        if (separatorRe && separatorRe.test(newTag.slice(-1))) {\n          // A trailing separator character was entered, so add the tag(s)\n          // Note: More than one tag on input event is possible via copy/paste\n          this.addTag();\n        } else {\n          // Validate (parse tags) on input event\n          this.tagsState = newTag === '' ? cleanTagsState() : this.parseTags(newTag);\n        }\n      },\n      onInputChange: function onInputChange(evt) {\n        // Change is triggered on `<input>` blur, or `<select>` selected\n        // This event is opt-in\n        if (!this.disabled && this.addOnChange) {\n          var newTag = processEventValue(evt);\n          /* istanbul ignore next */\n\n          if (this.newTag !== newTag) {\n            this.newTag = newTag;\n          }\n\n          this.addTag();\n        }\n      },\n      onInputKeydown: function onInputKeydown(evt) {\n        // Early exit\n\n        /* istanbul ignore next */\n        if (this.disabled || !isEvent(evt)) {\n          return;\n        }\n\n        var keyCode = evt.keyCode;\n        var value = evt.target.value || '';\n        /* istanbul ignore else: testing to be added later */\n\n        if (!this.noAddOnEnter && keyCode === ENTER$1) {\n          // Attempt to add the tag when user presses enter\n          evt.preventDefault();\n          this.addTag();\n        } else if (this.removeOnDelete && (keyCode === BACKSPACE || keyCode === DELETE) && value === '') {\n          // Remove the last tag if the user pressed backspace/delete and the input is empty\n          evt.preventDefault();\n          this.tags = this.tags.slice(0, -1);\n        }\n      },\n      // --- Wrapper event handlers ---\n      onClick: function onClick(evt) {\n        var _this3 = this;\n\n        if (!this.disabled && isEvent(evt) && evt.target === evt.currentTarget) {\n          this.$nextTick(function () {\n            _this3.focus();\n          });\n        }\n      },\n      onFocusin: function onFocusin() {\n        this.hasFocus = true;\n      },\n      onFocusout: function onFocusout() {\n        this.hasFocus = false;\n      },\n      handleAutofocus: function handleAutofocus() {\n        var _this4 = this;\n\n        this.$nextTick(function () {\n          requestAF(function () {\n            if (_this4.autofocus && !_this4.disabled) {\n              _this4.focus();\n            }\n          });\n        });\n      },\n      // --- Public methods ---\n      focus: function focus() {\n        if (!this.disabled) {\n          try {\n            this.getInput().focus();\n          } catch (_unused) {}\n        }\n      },\n      blur: function blur() {\n        try {\n          this.getInput().blur();\n        } catch (_unused2) {}\n      },\n      // --- Private methods ---\n      splitTags: function splitTags(newTag) {\n        // Split the input into an array of raw tags\n        newTag = toString$1(newTag);\n        var separatorRe = this.computedSeparatorRegExp; // Split the tag(s) via the optional separator\n        // Normally only a single tag is provided, but copy/paste\n        // can enter multiple tags in a single operation\n\n        return (separatorRe ? newTag.split(separatorRe) : [newTag]).map(trim).filter(identity);\n      },\n      parseTags: function parseTags(newTag) {\n        var _this5 = this;\n\n        // Takes `newTag` value and parses it into `validTags`,\n        // `invalidTags`, and duplicate tags as an object\n        // Split the input into raw tags\n        var tags = this.splitTags(newTag); // Base results\n\n        var parsed = {\n          all: tags,\n          valid: [],\n          invalid: [],\n          duplicate: []\n        }; // Parse the unique tags\n\n        tags.forEach(function (tag) {\n          if (arrayIncludes(_this5.tags, tag) || arrayIncludes(parsed.valid, tag)) {\n            // Unique duplicate tags\n            if (!arrayIncludes(parsed.duplicate, tag)) {\n              parsed.duplicate.push(tag);\n            }\n          } else if (_this5.validateTag(tag)) {\n            // We only add unique/valid tags\n            parsed.valid.push(tag);\n          } else {\n            // Unique invalid tags\n            if (!arrayIncludes(parsed.invalid, tag)) {\n              parsed.invalid.push(tag);\n            }\n          }\n        });\n        return parsed;\n      },\n      validateTag: function validateTag(tag) {\n        // Call the user supplied tag validator\n        var validator = this.tagValidator;\n        return isFunction(validator) ? validator(tag) : true;\n      },\n      getInput: function getInput() {\n        // Returns the input element reference (or null if not found)\n        return select(\"#\".concat(this.computedInputId), this.$el);\n      },\n      // Default User Interface render\n      defaultRender: function defaultRender(_ref) {\n        var tags = _ref.tags,\n            addTag = _ref.addTag,\n            removeTag = _ref.removeTag,\n            inputType = _ref.inputType,\n            inputAttrs = _ref.inputAttrs,\n            inputHandlers = _ref.inputHandlers,\n            inputClass = _ref.inputClass,\n            tagClass = _ref.tagClass,\n            tagVariant = _ref.tagVariant,\n            tagPills = _ref.tagPills,\n            tagRemoveLabel = _ref.tagRemoveLabel,\n            invalidTagText = _ref.invalidTagText,\n            duplicateTagText = _ref.duplicateTagText,\n            isInvalid = _ref.isInvalid,\n            isDuplicate = _ref.isDuplicate,\n            disabled = _ref.disabled,\n            placeholder = _ref.placeholder,\n            addButtonText = _ref.addButtonText,\n            addButtonVariant = _ref.addButtonVariant,\n            disableAddButton = _ref.disableAddButton;\n        var h = this.$createElement; // Make the list of tags\n\n        var $tags = tags.map(function (tag) {\n          tag = toString$1(tag);\n          return h(BFormTag, {\n            key: \"li-tag__\".concat(tag),\n            staticClass: 'mt-1 mr-1',\n            class: tagClass,\n            props: {\n              // `BFormTag` will auto generate an ID\n              // so we do not need to set the ID prop\n              tag: 'li',\n              title: tag,\n              disabled: disabled,\n              variant: tagVariant,\n              pill: tagPills,\n              removeLabel: tagRemoveLabel\n            },\n            on: {\n              remove: function remove() {\n                return removeTag(tag);\n              }\n            }\n          }, tag);\n        }); // Feedback IDs if needed\n\n        var invalidFeedbackId = invalidTagText && isInvalid ? this.safeId('__invalid_feedback__') : null;\n        var duplicateFeedbackId = duplicateTagText && isDuplicate ? this.safeId('__duplicate_feedback__') : null; // Compute the `aria-describedby` attribute value\n\n        var ariaDescribedby = [inputAttrs['aria-describedby'], invalidFeedbackId, duplicateFeedbackId].filter(identity).join(' '); // Input\n\n        var $input = h('input', {\n          ref: 'input',\n          // Directive needed to get `evt.target.composing` set (if needed)\n          directives: [{\n            name: 'model',\n            value: inputAttrs.value\n          }],\n          staticClass: 'b-form-tags-input w-100 flex-grow-1 p-0 m-0 bg-transparent border-0',\n          class: inputClass,\n          style: {\n            outline: 0,\n            minWidth: '5rem'\n          },\n          attrs: _objectSpread2({}, inputAttrs, {\n            'aria-describedby': ariaDescribedby || null,\n            type: inputType,\n            placeholder: placeholder || null\n          }),\n          domProps: {\n            value: inputAttrs.value\n          },\n          on: inputHandlers\n        }); // Add button\n\n        var $button = h(BButton, {\n          ref: 'button',\n          staticClass: 'b-form-tags-button py-0',\n          class: {\n            // Only show the button if the tag can be added\n            // We use the `invisible` class instead of not rendering\n            // the button, so that we maintain layout to prevent\n            // the user input from jumping around\n            invisible: disableAddButton\n          },\n          style: {\n            fontSize: '90%'\n          },\n          props: {\n            variant: addButtonVariant,\n            disabled: disableAddButton\n          },\n          on: {\n            click: function click() {\n              return addTag();\n            }\n          }\n        }, [this.normalizeSlot('add-button-text') || addButtonText]); // ID of the tags+input `<ul>` list\n        // Note we could concatenate inputAttrs.id with `__TAG__LIST__`\n        // But note that the inputID may be null until after mount\n        // `safeId` returns `null`, if no user provided ID, until after\n        // mount when a unique ID is generated\n\n        var tagListId = this.safeId('__TAG__LIST__');\n        var $field = h('li', {\n          key: '__li-input__',\n          staticClass: 'flex-grow-1 mt-1',\n          attrs: {\n            role: 'none',\n            'aria-live': 'off',\n            'aria-controls': tagListId\n          }\n        }, [h('div', {\n          staticClass: 'd-flex',\n          attrs: {\n            role: 'group'\n          }\n        }, [$input, $button])]); // Wrap in an unordered list element (we use a list for accessibility)\n\n        var $ul = h('ul', {\n          key: '_tags_list_',\n          staticClass: 'list-unstyled mt-n1 mb-0 d-flex flex-wrap align-items-center',\n          attrs: {\n            id: tagListId\n          }\n        }, // `concat()` is faster than array spread when args are known to be arrays\n        concat($tags, $field)); // Assemble the feedback\n\n        var $feedback = h();\n\n        if (invalidTagText || duplicateTagText) {\n          // Add an aria live region for the invalid/duplicate tag\n          // messages if the user has not disabled the messages\n          var joiner = this.computedJoiner; // Invalid tag feedback if needed (error)\n\n          var $invalid = h();\n\n          if (invalidFeedbackId) {\n            $invalid = h(BFormInvalidFeedback, {\n              key: '_tags_invalid_feedback_',\n              props: {\n                id: invalidFeedbackId,\n                forceShow: true\n              }\n            }, [this.invalidTagText, ': ', this.invalidTags.join(joiner)]);\n          } // Duplicate tag feedback if needed (warning, not error)\n\n\n          var $duplicate = h();\n\n          if (duplicateFeedbackId) {\n            $duplicate = h(BFormText, {\n              key: '_tags_duplicate_feedback_',\n              props: {\n                id: duplicateFeedbackId\n              }\n            }, [this.duplicateTagText, ': ', this.duplicateTags.join(joiner)]);\n          }\n\n          $feedback = h('div', {\n            key: '_tags_feedback_',\n            attrs: {\n              'aria-live': 'polite',\n              'aria-atomic': 'true'\n            }\n          }, [$invalid, $duplicate]);\n        } // Return the content\n\n\n        return [$ul, $feedback];\n      }\n    },\n    render: function render(h) {\n      var _this6 = this;\n\n      // Scoped slot properties\n      var scope = {\n        // Array of tags (shallow copy to prevent mutations)\n        tags: this.tags.slice(),\n        // Methods\n        removeTag: this.removeTag,\n        addTag: this.addTag,\n        // We don't include this in the attrs, as users may want to override this\n        inputType: this.computedInputType,\n        // <input> v-bind:inputAttrs\n        inputAttrs: this.computedInputAttrs,\n        // <input> v-on:inputHandlers\n        inputHandlers: this.computedInputHandlers,\n        // <input> :id=\"inputId\"\n        inputId: this.computedInputId,\n        // Invalid/Duplicate state information\n        invalidTags: this.invalidTags.slice(),\n        isInvalid: this.hasInvalidTags,\n        duplicateTags: this.duplicateTags.slice(),\n        isDuplicate: this.hasDuplicateTags,\n        // If the 'Add' button should be disabled\n        disableAddButton: this.disableAddButton,\n        // Pass-though values\n        state: this.state,\n        separator: this.separator,\n        disabled: this.disabled,\n        size: this.size,\n        placeholder: this.placeholder,\n        inputClass: this.inputClass,\n        tagRemoveLabel: this.tagRemoveLabel,\n        tagVariant: this.tagVariant,\n        tagPills: this.tagPills,\n        tagClass: this.tagClass,\n        addButtonText: this.addButtonText,\n        addButtonVariant: this.addButtonVariant,\n        invalidTagText: this.invalidTagText,\n        duplicateTagText: this.duplicateTagText\n      }; // Generate the user interface\n\n      var $content = this.normalizeSlot('default', scope) || this.defaultRender(scope); // Generate the `aria-live` region for the current value(s)\n\n      var $output = h('output', {\n        staticClass: 'sr-only',\n        attrs: {\n          id: this.safeId('_selected-tags_'),\n          role: 'status',\n          for: this.computedInputId,\n          'aria-live': this.hasFocus ? 'polite' : 'off',\n          'aria-atomic': 'true',\n          'aria-relevant': 'additions text'\n        }\n      }, this.tags.join(', ')); // Removed tag live region\n\n      var $removed = h('div', {\n        staticClass: 'sr-only',\n        attrs: {\n          id: this.safeId('_removed-tags_'),\n          role: 'status',\n          'aria-live': this.hasFocus ? 'assertive' : 'off',\n          'aria-atomic': 'true'\n        }\n      }, this.removedTags.length > 0 ? \"(\".concat(this.tagRemovedLabel, \") \").concat(this.removedTags.join(', ')) : ''); // Add hidden inputs for form submission\n\n      var $hidden = h();\n\n      if (this.name && !this.disabled) {\n        // We add hidden inputs for each tag if a name is provided\n        // for native submission of forms\n        $hidden = this.tags.map(function (tag) {\n          return h('input', {\n            key: tag,\n            attrs: {\n              type: 'hidden',\n              value: tag,\n              name: _this6.name,\n              form: _this6.form || null\n            }\n          });\n        });\n      } // Return the rendered output\n\n\n      return h('div', {\n        staticClass: 'b-form-tags form-control h-auto',\n        class: _defineProperty({\n          focus: this.hasFocus && !this.noOuterFocus && !this.disabled,\n          disabled: this.disabled,\n          'is-valid': this.state === true,\n          'is-invalid': this.state === false\n        }, \"form-control-\".concat(this.size), this.size),\n        attrs: {\n          id: this.safeId(),\n          role: 'group',\n          tabindex: this.disabled || this.noOuterFocus ? null : '-1',\n          'aria-describedby': this.safeId('_selected_')\n        },\n        on: {\n          focusin: this.onFocusin,\n          focusout: this.onFocusout,\n          click: this.onClick\n        }\n      }, concat($output, $removed, $content, $hidden));\n    }\n  });\n\n  var FormTagsPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BFormTags: BFormTags,\n      BTags: BFormTags,\n      BFormTag: BFormTag,\n      BTag: BFormTag\n    }\n  });\n\n  var BFormTextarea =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BFormTextarea',\n    directives: {\n      'b-visible': VBVisible\n    },\n    mixins: [idMixin, listenOnRootMixin, formMixin, formSizeMixin, formStateMixin, formTextMixin, formSelectionMixin, formValidityMixin],\n    props: {\n      rows: {\n        type: [Number, String],\n        default: 2\n      },\n      maxRows: {\n        type: [Number, String],\n        default: null\n      },\n      wrap: {\n        // 'soft', 'hard' or 'off'. Browser default is 'soft'\n        type: String,\n        default: 'soft'\n      },\n      noResize: {\n        // Disable the resize handle of textarea\n        type: Boolean,\n        default: false\n      },\n      noAutoShrink: {\n        // When in auto resize mode, disable shrinking to content height\n        type: Boolean,\n        default: false\n      }\n    },\n    data: function data() {\n      return {\n        heightInPx: null\n      };\n    },\n    computed: {\n      computedStyle: function computedStyle() {\n        var styles = {\n          // Setting `noResize` to true will disable the ability for the user to\n          // manually resize the textarea. We also disable when in auto height mode\n          resize: !this.computedRows || this.noResize ? 'none' : null\n        };\n\n        if (!this.computedRows) {\n          // Conditionally set the computed CSS height when auto rows/height is enabled\n          // We avoid setting the style to `null`, which can override user manual resize handle\n          styles.height = this.heightInPx; // We always add a vertical scrollbar to the textarea when auto-height is\n          // enabled so that the computed height calculation returns a stable value\n\n          styles.overflowY = 'scroll';\n        }\n\n        return styles;\n      },\n      computedMinRows: function computedMinRows() {\n        // Ensure rows is at least 2 and positive (2 is the native textarea value)\n        // A value of 1 can cause issues in some browsers, and most browsers\n        // only support 2 as the smallest value\n        return Math.max(parseInt(this.rows, 10) || 2, 2);\n      },\n      computedMaxRows: function computedMaxRows() {\n        return Math.max(this.computedMinRows, parseInt(this.maxRows, 10) || 0);\n      },\n      computedRows: function computedRows() {\n        // This is used to set the attribute 'rows' on the textarea\n        // If auto-height is enabled, then we return `null` as we use CSS to control height\n        return this.computedMinRows === this.computedMaxRows ? this.computedMinRows : null;\n      }\n    },\n    watch: {\n      localValue: function localValue() {\n        this.setHeight();\n      }\n    },\n    mounted: function mounted() {\n      this.setHeight();\n    },\n    methods: {\n      // Called by intersection observer directive\n      visibleCallback: function visibleCallback(visible)\n      /* istanbul ignore next */\n      {\n        if (visible) {\n          // We use a `$nextTick()` here just to make sure any\n          // transitions or portalling have completed\n          this.$nextTick(this.setHeight);\n        }\n      },\n      setHeight: function setHeight() {\n        var _this = this;\n\n        this.$nextTick(function () {\n          requestAF(function () {\n            _this.heightInPx = _this.computeHeight();\n          });\n        });\n      },\n      computeHeight: function computeHeight()\n      /* istanbul ignore next: can't test getComputedStyle in JSDOM */\n      {\n        if (this.$isServer || !isNull(this.computedRows)) {\n          return null;\n        }\n\n        var el = this.$el; // Element must be visible (not hidden) and in document\n        // Must be checked after above checks\n\n        if (!isVisible(el)) {\n          return null;\n        } // Get current computed styles\n\n\n        var computedStyle = getCS(el); // Height of one line of text in px\n\n        var lineHeight = parseFloat(computedStyle.lineHeight); // Calculate height of border and padding\n\n        var border = (parseFloat(computedStyle.borderTopWidth) || 0) + (parseFloat(computedStyle.borderBottomWidth) || 0);\n        var padding = (parseFloat(computedStyle.paddingTop) || 0) + (parseFloat(computedStyle.paddingBottom) || 0); // Calculate offset\n\n        var offset = border + padding; // Minimum height for min rows (which must be 2 rows or greater for cross-browser support)\n\n        var minHeight = lineHeight * this.computedMinRows + offset; // Get the current style height (with `px` units)\n\n        var oldHeight = el.style.height || computedStyle.height; // Probe scrollHeight by temporarily changing the height to `auto`\n\n        el.style.height = 'auto';\n        var scrollHeight = el.scrollHeight; // Place the original old height back on the element, just in case `computedProp`\n        // returns the same value as before\n\n        el.style.height = oldHeight; // Calculate content height in 'rows' (scrollHeight includes padding but not border)\n\n        var contentRows = Math.max((scrollHeight - padding) / lineHeight, 2); // Calculate number of rows to display (limited within min/max rows)\n\n        var rows = Math.min(Math.max(contentRows, this.computedMinRows), this.computedMaxRows); // Calculate the required height of the textarea including border and padding (in pixels)\n\n        var height = Math.max(Math.ceil(rows * lineHeight + offset), minHeight); // Computed height remains the larger of `oldHeight` and new `height`,\n        // when height is in `sticky` mode (prop `no-auto-shrink` is true)\n\n        if (this.noAutoShrink && (parseFloat(oldHeight) || 0) > height) {\n          return oldHeight;\n        } // Return the new computed CSS height in px units\n\n\n        return \"\".concat(height, \"px\");\n      }\n    },\n    render: function render(h) {\n      // Using self instead of this helps reduce code size during minification\n      var self = this;\n      return h('textarea', {\n        ref: 'input',\n        class: self.computedClass,\n        style: self.computedStyle,\n        directives: [{\n          name: 'model',\n          value: self.localValue\n        }, {\n          name: 'b-visible',\n          value: this.visibleCallback,\n          // If textarea is within 640px of viewport, consider it visible\n          modifiers: {\n            '640': true\n          }\n        }],\n        attrs: {\n          id: self.safeId(),\n          name: self.name,\n          form: self.form || null,\n          disabled: self.disabled,\n          placeholder: self.placeholder,\n          required: self.required,\n          autocomplete: self.autocomplete || null,\n          readonly: self.readonly || self.plaintext,\n          rows: self.computedRows,\n          wrap: self.wrap || null,\n          'aria-required': self.required ? 'true' : null,\n          'aria-invalid': self.computedAriaInvalid\n        },\n        domProps: {\n          value: self.localValue\n        },\n        on: _objectSpread2({}, self.$listeners, {\n          input: self.onInput,\n          change: self.onChange,\n          blur: self.onBlur\n        })\n      });\n    }\n  });\n\n  var FormTextareaPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BFormTextarea: BFormTextarea,\n      BTextarea: BFormTextarea\n    }\n  });\n\n  var ImagePlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BImg: BImg,\n      BImgLazy: BImgLazy\n    }\n  });\n\n  var props$y = {\n    tag: {\n      type: String,\n      default: 'div'\n    }\n  }; // @vue/component\n\n  var BInputGroupText =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BInputGroupText',\n    functional: true,\n    props: props$y,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      return h(props.tag, a(data, {\n        staticClass: 'input-group-text'\n      }), children);\n    }\n  });\n\n  var commonProps = {\n    id: {\n      type: String,\n      default: null\n    },\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    isText: {\n      type: Boolean,\n      default: false\n    }\n  }; // @vue/component\n\n  var BInputGroupAddon =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BInputGroupAddon',\n    functional: true,\n    props: _objectSpread2({}, commonProps, {\n      append: {\n        type: Boolean,\n        default: false\n      }\n    }),\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      return h(props.tag, a(data, {\n        class: {\n          'input-group-append': props.append,\n          'input-group-prepend': !props.append\n        },\n        attrs: {\n          id: props.id\n        }\n      }), props.isText ? [h(BInputGroupText, children)] : children);\n    }\n  });\n\n  var BInputGroupPrepend =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BInputGroupPrepend',\n    functional: true,\n    props: commonProps,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      // pass all our props/attrs down to child, and set`append` to false\n      return h(BInputGroupAddon, a(data, {\n        props: _objectSpread2({}, props, {\n          append: false\n        })\n      }), children);\n    }\n  });\n\n  var BInputGroupAppend =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BInputGroupAppend',\n    functional: true,\n    props: commonProps,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      // pass all our props/attrs down to child, and set`append` to true\n      return h(BInputGroupAddon, a(data, {\n        props: _objectSpread2({}, props, {\n          append: true\n        })\n      }), children);\n    }\n  });\n\n  var NAME$k = 'BInputGroup';\n  var props$z = {\n    id: {\n      type: String\n    },\n    size: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$k, 'size');\n      }\n    },\n    prepend: {\n      type: String\n    },\n    prependHtml: {\n      type: String\n    },\n    append: {\n      type: String\n    },\n    appendHtml: {\n      type: String\n    },\n    tag: {\n      type: String,\n      default: 'div'\n    }\n  }; // @vue/component\n\n  var BInputGroup =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$k,\n    functional: true,\n    props: props$z,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          slots = _ref.slots,\n          scopedSlots = _ref.scopedSlots;\n      var $slots = slots();\n      var $scopedSlots = scopedSlots || {};\n      var childNodes = []; // Prepend prop/slot\n\n      if (props.prepend || props.prependHtml || hasNormalizedSlot('prepend', $scopedSlots, $slots)) {\n        childNodes.push(h(BInputGroupPrepend, [// Prop\n        props.prepend || props.prependHtml ? h(BInputGroupText, {\n          domProps: htmlOrText(props.prependHtml, props.prepend)\n        }) : h(), // Slot\n        normalizeSlot('prepend', {}, $scopedSlots, $slots) || h()]));\n      } else {\n        childNodes.push(h());\n      } // Default slot\n\n\n      if (hasNormalizedSlot('default', $scopedSlots, $slots)) {\n        childNodes.push.apply(childNodes, _toConsumableArray(normalizeSlot('default', {}, $scopedSlots, $slots)));\n      } else {\n        childNodes.push(h());\n      } // Append prop\n\n\n      if (props.append || props.appendHtml || hasNormalizedSlot('append', $scopedSlots, $slots)) {\n        childNodes.push(h(BInputGroupAppend, [// prop\n        props.append || props.appendHtml ? h(BInputGroupText, {\n          domProps: htmlOrText(props.appendHtml, props.append)\n        }) : h(), // Slot\n        normalizeSlot('append', {}, $scopedSlots, $slots) || h()]));\n      } else {\n        childNodes.push(h());\n      }\n\n      return h(props.tag, a(data, {\n        staticClass: 'input-group',\n        class: _defineProperty({}, \"input-group-\".concat(props.size), props.size),\n        attrs: {\n          id: props.id || null,\n          role: 'group'\n        }\n      }), childNodes);\n    }\n  });\n\n  var InputGroupPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BInputGroup: BInputGroup,\n      BInputGroupAddon: BInputGroupAddon,\n      BInputGroupPrepend: BInputGroupPrepend,\n      BInputGroupAppend: BInputGroupAppend,\n      BInputGroupText: BInputGroupText\n    }\n  });\n\n  var props$A = {\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    fluid: {\n      // String breakpoint name new in Bootstrap v4.4.x\n      type: [Boolean, String],\n      default: false\n    }\n  }; // @vue/component\n\n  var BContainer =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BContainer',\n    functional: true,\n    props: props$A,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      return h(props.tag, a(data, {\n        class: _defineProperty({\n          container: !(props.fluid || props.fluid === ''),\n          'container-fluid': props.fluid === true || props.fluid === ''\n        }, \"container-\".concat(props.fluid), props.fluid && props.fluid !== true)\n      }), children);\n    }\n  });\n\n  var NAME$l = 'BJumbotron';\n  var props$B = {\n    fluid: {\n      type: Boolean,\n      default: false\n    },\n    containerFluid: {\n      type: [Boolean, String],\n      default: false\n    },\n    header: {\n      type: String,\n      default: null\n    },\n    headerHtml: {\n      type: String,\n      default: null\n    },\n    headerTag: {\n      type: String,\n      default: 'h1'\n    },\n    headerLevel: {\n      type: [Number, String],\n      default: '3'\n    },\n    lead: {\n      type: String,\n      default: null\n    },\n    leadHtml: {\n      type: String,\n      default: null\n    },\n    leadTag: {\n      type: String,\n      default: 'p'\n    },\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    bgVariant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$l, 'bgVariant');\n      }\n    },\n    borderVariant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$l, 'borderVariant');\n      }\n    },\n    textVariant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$l, 'textVariant');\n      }\n    }\n  }; // @vue/component\n\n  var BJumbotron =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$l,\n    functional: true,\n    props: props$B,\n    render: function render(h, _ref) {\n      var _class2;\n\n      var props = _ref.props,\n          data = _ref.data,\n          slots = _ref.slots,\n          scopedSlots = _ref.scopedSlots;\n      // The order of the conditionals matter.\n      // We are building the component markup in order.\n      var childNodes = [];\n      var $slots = slots();\n      var $scopedSlots = scopedSlots || {}; // Header\n\n      if (props.header || hasNormalizedSlot('header', $scopedSlots, $slots) || props.headerHtml) {\n        childNodes.push(h(props.headerTag, {\n          class: _defineProperty({}, \"display-\".concat(props.headerLevel), props.headerLevel)\n        }, normalizeSlot('header', {}, $scopedSlots, $slots) || props.headerHtml || stripTags(props.header)));\n      } // Lead\n\n\n      if (props.lead || hasNormalizedSlot('lead', $scopedSlots, $slots) || props.leadHtml) {\n        childNodes.push(h(props.leadTag, {\n          staticClass: 'lead'\n        }, normalizeSlot('lead', {}, $scopedSlots, $slots) || props.leadHtml || stripTags(props.lead)));\n      } // Default slot\n\n\n      if (hasNormalizedSlot('default', $scopedSlots, $slots)) {\n        childNodes.push(normalizeSlot('default', {}, $scopedSlots, $slots));\n      } // If fluid, wrap content in a container/container-fluid\n\n\n      if (props.fluid) {\n        // Children become a child of a container\n        childNodes = [h(BContainer, {\n          props: {\n            fluid: props.containerFluid\n          }\n        }, childNodes)];\n      } // Return the jumbotron\n\n\n      return h(props.tag, a(data, {\n        staticClass: 'jumbotron',\n        class: (_class2 = {\n          'jumbotron-fluid': props.fluid\n        }, _defineProperty(_class2, \"text-\".concat(props.textVariant), props.textVariant), _defineProperty(_class2, \"bg-\".concat(props.bgVariant), props.bgVariant), _defineProperty(_class2, \"border-\".concat(props.borderVariant), props.borderVariant), _defineProperty(_class2, \"border\", props.borderVariant), _class2)\n      }), childNodes);\n    }\n  });\n\n  var JumbotronPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BJumbotron: BJumbotron\n    }\n  });\n\n  var COMMON_ALIGNMENT = ['start', 'end', 'center']; // Generates a prop object with a type of `[String, Number]`\n\n  var strNum$1 = function strNum() {\n    return {\n      type: [String, Number],\n      default: null\n    };\n  }; // Compute a `row-cols-{breakpoint}-{cols}` class name\n  // Memoized function for better performance on generating class names\n\n\n  var computeRowColsClass = memoize(function (breakpoint, cols) {\n    cols = trim(toString$1(cols));\n    return cols ? lowerCase(['row-cols', breakpoint, cols].filter(identity).join('-')) : null;\n  }); // Get the breakpoint name from the `rowCols` prop name\n  // Memoized function for better performance on extracting breakpoint names\n\n  var computeRowColsBreakpoint = memoize(function (prop) {\n    return lowerCase(prop.replace('cols', ''));\n  }); // Cached copy of the `row-cols` breakpoint prop names\n  // Will be populated when the props are generated\n\n  var rowColsPropList = []; // Lazy evaled props factory for <b-row> (called only once,\n  // the first time the component is used)\n\n  var generateProps$2 = function generateProps() {\n    // Grab the breakpoints from the cached config (including the '' (xs) breakpoint)\n    var breakpoints = getBreakpointsUpCached(); // Supports classes like: `row-cols-2`, `row-cols-md-4`, `row-cols-xl-6`\n\n    var rowColsProps = breakpoints.reduce(function (props, breakpoint) {\n      props[suffixPropName(breakpoint, 'cols')] = strNum$1();\n      return props;\n    }, create(null)); // Cache the row-cols prop names\n\n    rowColsPropList = keys(rowColsProps); // Return the generated props\n\n    return _objectSpread2({\n      tag: {\n        type: String,\n        default: 'div'\n      },\n      noGutters: {\n        type: Boolean,\n        default: false\n      },\n      alignV: {\n        type: String,\n        default: null,\n        validator: function validator(str) {\n          return arrayIncludes(COMMON_ALIGNMENT.concat(['baseline', 'stretch']), str);\n        }\n      },\n      alignH: {\n        type: String,\n        default: null,\n        validator: function validator(str) {\n          return arrayIncludes(COMMON_ALIGNMENT.concat(['between', 'around']), str);\n        }\n      },\n      alignContent: {\n        type: String,\n        default: null,\n        validator: function validator(str) {\n          return arrayIncludes(COMMON_ALIGNMENT.concat(['between', 'around', 'stretch']), str);\n        }\n      }\n    }, rowColsProps);\n  }; // We do not use `Vue.extend()` here as that would evaluate the props\n  // immediately, which we do not want to happen\n  // @vue/component\n\n\n  var BRow = {\n    name: 'BRow',\n    functional: true,\n\n    get props() {\n      // Allow props to be lazy evaled on first access and\n      // then they become a non-getter afterwards\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get#Smart_self-overwriting_lazy_getters\n      delete this.props;\n      this.props = generateProps$2();\n      return this.props;\n    },\n\n    render: function render(h, _ref) {\n      var _classList$push;\n\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      var classList = []; // Loop through row-cols breakpoint props and generate the classes\n\n      rowColsPropList.forEach(function (prop) {\n        var c = computeRowColsClass(computeRowColsBreakpoint(prop), props[prop]); // If a class is returned, push it onto the array\n\n        if (c) {\n          classList.push(c);\n        }\n      });\n      classList.push((_classList$push = {\n        'no-gutters': props.noGutters\n      }, _defineProperty(_classList$push, \"align-items-\".concat(props.alignV), props.alignV), _defineProperty(_classList$push, \"justify-content-\".concat(props.alignH), props.alignH), _defineProperty(_classList$push, \"align-content-\".concat(props.alignContent), props.alignContent), _classList$push));\n      return h(props.tag, a(data, {\n        staticClass: 'row',\n        class: classList\n      }), children);\n    }\n  };\n\n  var LayoutPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BContainer: BContainer,\n      BRow: BRow,\n      BCol: BCol,\n      BFormRow: BFormRow\n    }\n  });\n\n  var LinkPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BLink: BLink\n    }\n  });\n\n  var props$C = {\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    flush: {\n      type: Boolean,\n      default: false\n    },\n    horizontal: {\n      type: [Boolean, String],\n      default: false\n    }\n  }; // @vue/component\n\n  var BListGroup =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BListGroup',\n    functional: true,\n    props: props$C,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      var horizontal = props.horizontal === '' ? true : props.horizontal;\n      horizontal = props.flush ? false : horizontal;\n      var componentData = {\n        staticClass: 'list-group',\n        class: _defineProperty({\n          'list-group-flush': props.flush,\n          'list-group-horizontal': horizontal === true\n        }, \"list-group-horizontal-\".concat(horizontal), isString(horizontal))\n      };\n      return h(props.tag, a(data, componentData), children);\n    }\n  });\n\n  var NAME$m = 'BListGroupItem';\n  var actionTags = ['a', 'router-link', 'button', 'b-link'];\n  var linkProps$2 = propsFactory();\n  delete linkProps$2.href.default;\n  delete linkProps$2.to.default;\n  var props$D = _objectSpread2({\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    action: {\n      type: Boolean,\n      default: null\n    },\n    button: {\n      type: Boolean,\n      default: null\n    },\n    variant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$m, 'variant');\n      }\n    }\n  }, linkProps$2); // @vue/component\n\n  var BListGroupItem =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$m,\n    functional: true,\n    props: props$D,\n    render: function render(h, _ref) {\n      var _class;\n\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      var tag = props.button ? 'button' : !props.href && !props.to ? props.tag : BLink;\n      var isAction = Boolean(props.href || props.to || props.action || props.button || arrayIncludes(actionTags, props.tag));\n      var attrs = {};\n      var itemProps = {};\n\n      if (tag === 'button') {\n        if (!data.attrs || !data.attrs.type) {\n          // Add a type for button is one not provided in passed attributes\n          attrs.type = 'button';\n        }\n\n        if (props.disabled) {\n          // Set disabled attribute if button and disabled\n          attrs.disabled = true;\n        }\n      } else {\n        itemProps = pluckProps(linkProps$2, props);\n      }\n\n      var componentData = {\n        attrs: attrs,\n        props: itemProps,\n        staticClass: 'list-group-item',\n        class: (_class = {}, _defineProperty(_class, \"list-group-item-\".concat(props.variant), props.variant), _defineProperty(_class, 'list-group-item-action', isAction), _defineProperty(_class, \"active\", props.active), _defineProperty(_class, \"disabled\", props.disabled), _class)\n      };\n      return h(tag, a(data, componentData), children);\n    }\n  });\n\n  var ListGroupPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BListGroup: BListGroup,\n      BListGroupItem: BListGroupItem\n    }\n  });\n\n  var props$E = {\n    tag: {\n      type: String,\n      default: 'div'\n    }\n  }; // @vue/component\n\n  var BMediaBody =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BMediaBody',\n    functional: true,\n    props: props$E,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      return h(props.tag, a(data, {\n        staticClass: 'media-body'\n      }), children);\n    }\n  });\n\n  var props$F = {\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    verticalAlign: {\n      type: String,\n      default: 'top'\n    }\n  }; // @vue/component\n\n  var BMediaAside =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BMediaAside',\n    functional: true,\n    props: props$F,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      var align = props.verticalAlign === 'top' ? 'start' : props.verticalAlign === 'bottom' ? 'end' : props.verticalAlign;\n      return h(props.tag, a(data, {\n        staticClass: 'd-flex',\n        class: _defineProperty({}, \"align-self-\".concat(align), align)\n      }), children);\n    }\n  });\n\n  var props$G = {\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    rightAlign: {\n      type: Boolean,\n      default: false\n    },\n    verticalAlign: {\n      type: String,\n      default: 'top'\n    },\n    noBody: {\n      type: Boolean,\n      default: false\n    }\n  }; // @vue/component\n\n  var BMedia =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BMedia',\n    functional: true,\n    props: props$G,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          slots = _ref.slots,\n          scopedSlots = _ref.scopedSlots,\n          children = _ref.children;\n      var childNodes = props.noBody ? children : [];\n\n      if (!props.noBody) {\n        var $slots = slots();\n        var $scopedSlots = scopedSlots || {};\n        var $aside = normalizeSlot('aside', {}, $scopedSlots, $slots);\n        var $default = normalizeSlot('default', {}, $scopedSlots, $slots);\n\n        if ($aside && !props.rightAlign) {\n          childNodes.push(h(BMediaAside, {\n            staticClass: 'mr-3',\n            props: {\n              verticalAlign: props.verticalAlign\n            }\n          }, $aside));\n        }\n\n        childNodes.push(h(BMediaBody, $default));\n\n        if ($aside && props.rightAlign) {\n          childNodes.push(h(BMediaAside, {\n            staticClass: 'ml-3',\n            props: {\n              verticalAlign: props.verticalAlign\n            }\n          }, $aside));\n        }\n      }\n\n      return h(props.tag, a(data, {\n        staticClass: 'media'\n      }), childNodes);\n    }\n  });\n\n  var MediaPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BMedia: BMedia,\n      BMediaAside: BMediaAside,\n      BMediaBody: BMediaBody\n    }\n  });\n\n  //\n  // Single root node portaling of content, which retains parent/child hierarchy\n  // Unlike Portal-Vue where portaled content is no longer a descendent of its\n  // intended parent components\n  //\n  // Private components for use by Tooltips, Popovers and Modals\n  //\n  // Based on vue-simple-portal\n  // https://github.com/LinusBorg/vue-simple-portal\n  // Transporter target used by BTransporterSingle\n  // Supports only a single root element\n  // @vue/component\n\n  var BTransporterTargetSingle =\n  /*#__PURE__*/\n  Vue.extend({\n    // As an abstract component, it doesn't appear in the $parent chain of\n    // components, which means the next parent of any component rendered inside\n    // of this one will be the parent from which is was portal'd\n    abstract: true,\n    name: 'BTransporterTargetSingle',\n    props: {\n      nodes: {\n        // Even though we only support a single root element,\n        // VNodes are always passed as an array\n        type: [Array, Function] // default: undefined\n\n      }\n    },\n    data: function data(vm) {\n      return {\n        updatedNodes: vm.nodes\n      };\n    },\n    destroyed: function destroyed() {\n      removeNode(this.$el);\n    },\n    render: function render(h) {\n      var nodes = isFunction(this.updatedNodes) ? this.updatedNodes({}) : this.updatedNodes;\n      nodes = concat(nodes).filter(Boolean);\n      /* istanbul ignore else */\n\n      if (nodes && nodes.length > 0 && !nodes[0].text) {\n        return nodes[0];\n      } else {\n        /* istanbul ignore next */\n        return h();\n      }\n    }\n  }); // This component has no root element, so only a single VNode is allowed\n  // @vue/component\n\n  var BTransporterSingle =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BTransporterSingle',\n    mixins: [normalizeSlotMixin],\n    props: {\n      disabled: {\n        type: Boolean,\n        default: false\n      },\n      container: {\n        // String: CSS selector,\n        // HTMLElement: Element reference\n        // Mainly needed for tooltips/popovers inside modals\n        type: [String, HTMLElement],\n        default: 'body'\n      },\n      tag: {\n        // This should be set to match the root element type\n        type: String,\n        default: 'div'\n      }\n    },\n    watch: {\n      disabled: {\n        immediate: true,\n        handler: function handler(disabled) {\n          disabled ? this.unmountTarget() : this.$nextTick(this.mountTarget);\n        }\n      }\n    },\n    created: function created() {\n      this._bv_defaultFn = null;\n      this._bv_target = null;\n    },\n    beforeMount: function beforeMount() {\n      this.mountTarget();\n    },\n    updated: function updated() {\n      // We need to make sure that all children have completed updating\n      // before rendering in the target\n      // `vue-simple-portal` has the this in a `$nextTick()`,\n      // while `portal-vue` doesn't\n      // Just trying to see if the `$nextTick()` delay is required or not\n      // Since all slots in Vue 2.6.x are always functions\n      this.updateTarget();\n    },\n    beforeDestroy: function beforeDestroy() {\n      this.unmountTarget();\n      this._bv_defaultFn = null;\n    },\n    methods: {\n      // Get the element which the target should be appended to\n      getContainer: function getContainer() {\n        /* istanbul ignore else */\n        if (isBrowser) {\n          var container = this.container;\n          return isString(container) ? select(container) : container;\n        } else {\n          return null;\n        }\n      },\n      // Mount the target\n      mountTarget: function mountTarget() {\n        if (!this._bv_target) {\n          var container = this.getContainer();\n\n          if (container) {\n            var el = document.createElement('div');\n            container.appendChild(el);\n            this._bv_target = new BTransporterTargetSingle({\n              el: el,\n              parent: this,\n              propsData: {\n                // Initial nodes to be rendered\n                nodes: concat(this.normalizeSlot('default'))\n              }\n            });\n          }\n        }\n      },\n      // Update the content of the target\n      updateTarget: function updateTarget() {\n        if (isBrowser && this._bv_target) {\n          var defaultFn = this.$scopedSlots.default;\n\n          if (!this.disabled) {\n            /* istanbul ignore else: only applicable in Vue 2.5.x */\n            if (defaultFn && this._bv_defaultFn !== defaultFn) {\n              // We only update the target component if the scoped slot\n              // function is a fresh one. The new slot syntax (since Vue 2.6)\n              // can cache unchanged slot functions and we want to respect that here\n              this._bv_target.updatedNodes = defaultFn;\n            } else if (!defaultFn) {\n              // We also need to be back compatible with non-scoped default slot (i.e. 2.5.x)\n              this._bv_target.updatedNodes = this.$slots.default;\n            }\n          } // Update the scoped slot function cache\n\n\n          this._bv_defaultFn = defaultFn;\n        }\n      },\n      // Unmount the target\n      unmountTarget: function unmountTarget() {\n        if (this._bv_target) {\n          this._bv_target.$destroy();\n\n          this._bv_target = null;\n        }\n      }\n    },\n    render: function render(h) {\n      if (this.disabled) {\n        var nodes = concat(this.normalizeSlot('default')).filter(identity);\n\n        if (nodes.length > 0 && !nodes[0].text) {\n          return nodes[0];\n        }\n      }\n\n      return h();\n    }\n  });\n\n  var PROP$1 = '$_bv_documentHandlers_'; // @vue/component\n\n  var listenOnDocumentMixin = {\n    created: function created() {\n      var _this = this;\n\n      /* istanbul ignore next */\n      if (!isBrowser) {\n        return;\n      } // Declare non-reactive property\n      // Object of arrays, keyed by event name,\n      // where value is an array of handlers\n      // Prop will be defined on client only\n\n\n      this[PROP$1] = {}; // Set up our beforeDestroy handler (client only)\n\n      this.$once('hook:beforeDestroy', function () {\n        var items = _this[PROP$1] || {}; // Immediately delete this[PROP] to prevent the\n        // listenOn/Off methods from running (which may occur\n        // due to requestAnimationFrame/transition delays)\n\n        delete _this[PROP$1]; // Remove all registered event handlers\n\n        keys(items).forEach(function (evtName) {\n          var handlers = items[evtName] || [];\n          handlers.forEach(function (handler) {\n            return eventOff(document, evtName, handler, EVENT_OPTIONS_NO_CAPTURE);\n          });\n        });\n      });\n    },\n    methods: {\n      listenDocument: function listenDocument(on, evtName, handler) {\n        on ? this.listenOnDocument(evtName, handler) : this.listenOffDocument(evtName, handler);\n      },\n      listenOnDocument: function listenOnDocument(evtName, handler) {\n        if (this[PROP$1] && isString(evtName) && isFunction(handler)) {\n          this[PROP$1][evtName] = this[PROP$1][evtName] || [];\n\n          if (!arrayIncludes(this[PROP$1][evtName], handler)) {\n            this[PROP$1][evtName].push(handler);\n            eventOn(document, evtName, handler, EVENT_OPTIONS_NO_CAPTURE);\n          }\n        }\n      },\n      listenOffDocument: function listenOffDocument(evtName, handler) {\n        if (this[PROP$1] && isString(evtName) && isFunction(handler)) {\n          eventOff(document, evtName, handler, EVENT_OPTIONS_NO_CAPTURE);\n          this[PROP$1][evtName] = (this[PROP$1][evtName] || []).filter(function (h) {\n            return h !== handler;\n          });\n        }\n      }\n    }\n  };\n\n  var PROP$2 = '$_bv_windowHandlers_'; // @vue/component\n\n  var listenOnWindowMixin = {\n    beforeCreate: function beforeCreate() {\n      // Declare non-reactive property\n      // Object of arrays, keyed by event name,\n      // where value is an array of handlers\n      this[PROP$2] = {};\n    },\n    beforeDestroy: function beforeDestroy() {\n      if (isBrowser) {\n        var items = this[PROP$2]; // Immediately delete this[PROP] to prevent the\n        // listenOn/Off methods from running (which may occur\n        // due to requestAnimationFrame delays)\n\n        delete this[PROP$2]; // Remove all registered event handlers\n\n        keys(items).forEach(function (evtName) {\n          var handlers = items[evtName] || [];\n          handlers.forEach(function (handler) {\n            return eventOff(window, evtName, handler, EVENT_OPTIONS_NO_CAPTURE);\n          });\n        });\n      }\n    },\n    methods: {\n      listenWindow: function listenWindow(on, evtName, handler) {\n        on ? this.listenOnWindow(evtName, handler) : this.listenOffWindow(evtName, handler);\n      },\n      listenOnWindow: function listenOnWindow(evtName, handler) {\n        if (isBrowser && this[PROP$2] && isString(evtName) && isFunction(handler)) {\n          this[PROP$2][evtName] = this[PROP$2][evtName] || [];\n\n          if (!arrayIncludes(this[PROP$2][evtName], handler)) {\n            this[PROP$2][evtName].push(handler);\n            eventOn(window, evtName, handler, EVENT_OPTIONS_NO_CAPTURE);\n          }\n        }\n      },\n      listenOffWindow: function listenOffWindow(evtName, handler) {\n        if (isBrowser && this[PROP$2] && isString(evtName) && isFunction(handler)) {\n          eventOff(window, evtName, handler, EVENT_OPTIONS_NO_CAPTURE);\n          this[PROP$2][evtName] = (this[PROP$2][evtName] || []).filter(function (h) {\n            return h !== handler;\n          });\n        }\n      }\n    }\n  };\n\n  // This method returns a component's scoped style attribute name: `data-v-xxxxxxx`\n  // The `_scopeId` options property is added by vue-loader when using scoped styles\n  // and will be `undefined` if no scoped styles are in use\n  var getScopeId = function getScopeId(vm) {\n    var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return vm ? vm.$options._scopeId || defaultValue : defaultValue;\n  };\n\n  var scopedStyleAttrsMixin = {\n    computed: {\n      scopedStyleAttrs: function scopedStyleAttrs() {\n        var scopeId = getScopeId(this.$parent);\n        return scopeId ? _defineProperty({}, scopeId, '') : {};\n      }\n    }\n  };\n\n  /**\n   * Private ModalManager helper\n   * Handles controlling modal stacking zIndexes and body adjustments/classes\n   */\n  // Default modal backdrop z-index\n\n  var DEFAULT_ZINDEX = 1040; // Selectors for padding/margin adjustments\n\n  var Selector$1 = {\n    FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',\n    STICKY_CONTENT: '.sticky-top',\n    NAVBAR_TOGGLER: '.navbar-toggler'\n  }; // @vue/component\n\n  var ModalManager =\n  /*#__PURE__*/\n  Vue.extend({\n    data: function data() {\n      return {\n        modals: [],\n        baseZIndex: null,\n        scrollbarWidth: null,\n        isBodyOverflowing: false\n      };\n    },\n    computed: {\n      modalCount: function modalCount() {\n        return this.modals.length;\n      },\n      modalsAreOpen: function modalsAreOpen() {\n        return this.modalCount > 0;\n      }\n    },\n    watch: {\n      modalCount: function modalCount(newCount, oldCount) {\n        if (isBrowser) {\n          this.getScrollbarWidth();\n\n          if (newCount > 0 && oldCount === 0) {\n            // Transitioning to modal(s) open\n            this.checkScrollbar();\n            this.setScrollbar();\n            addClass(document.body, 'modal-open');\n          } else if (newCount === 0 && oldCount > 0) {\n            // Transitioning to modal(s) closed\n            this.resetScrollbar();\n            removeClass(document.body, 'modal-open');\n          }\n\n          setAttr(document.body, 'data-modal-open-count', String(newCount));\n        }\n      },\n      modals: function modals(newVal) {\n        var _this = this;\n\n        this.checkScrollbar();\n        requestAF(function () {\n          _this.updateModals(newVal || []);\n        });\n      }\n    },\n    methods: {\n      // Public methods\n      registerModal: function registerModal(modal) {\n        var _this2 = this;\n\n        // Register the modal if not already registered\n        if (modal && this.modals.indexOf(modal) === -1) {\n          // Add modal to modals array\n          this.modals.push(modal);\n          modal.$once('hook:beforeDestroy', function () {\n            _this2.unregisterModal(modal);\n          });\n        }\n      },\n      unregisterModal: function unregisterModal(modal) {\n        var index = this.modals.indexOf(modal);\n\n        if (index > -1) {\n          // Remove modal from modals array\n          this.modals.splice(index, 1); // Reset the modal's data\n\n          if (!(modal._isBeingDestroyed || modal._isDestroyed)) {\n            this.resetModal(modal);\n          }\n        }\n      },\n      getBaseZIndex: function getBaseZIndex() {\n        if (isNull(this.baseZIndex) && isBrowser) {\n          // Create a temporary `div.modal-backdrop` to get computed z-index\n          var div = document.createElement('div');\n          div.className = 'modal-backdrop d-none';\n          div.style.display = 'none';\n          document.body.appendChild(div);\n          this.baseZIndex = toInteger(getCS(div).zIndex || DEFAULT_ZINDEX);\n          document.body.removeChild(div);\n        }\n\n        return this.baseZIndex || DEFAULT_ZINDEX;\n      },\n      getScrollbarWidth: function getScrollbarWidth() {\n        if (isNull(this.scrollbarWidth) && isBrowser) {\n          // Create a temporary `div.measure-scrollbar` to get computed z-index\n          var div = document.createElement('div');\n          div.className = 'modal-scrollbar-measure';\n          document.body.appendChild(div);\n          this.scrollbarWidth = getBCR(div).width - div.clientWidth;\n          document.body.removeChild(div);\n        }\n\n        return this.scrollbarWidth || 0;\n      },\n      // Private methods\n      updateModals: function updateModals(modals) {\n        var _this3 = this;\n\n        var baseZIndex = this.getBaseZIndex();\n        var scrollbarWidth = this.getScrollbarWidth();\n        modals.forEach(function (modal, index) {\n          // We update data values on each modal\n          modal.zIndex = baseZIndex + index;\n          modal.scrollbarWidth = scrollbarWidth;\n          modal.isTop = index === _this3.modals.length - 1;\n          modal.isBodyOverflowing = _this3.isBodyOverflowing;\n        });\n      },\n      resetModal: function resetModal(modal) {\n        if (modal) {\n          modal.zIndex = this.getBaseZIndex();\n          modal.isTop = true;\n          modal.isBodyOverflowing = false;\n        }\n      },\n      checkScrollbar: function checkScrollbar() {\n        // Determine if the body element is overflowing\n        var _getBCR = getBCR(document.body),\n            left = _getBCR.left,\n            right = _getBCR.right;\n\n        this.isBodyOverflowing = left + right < window.innerWidth;\n      },\n      setScrollbar: function setScrollbar() {\n        var body = document.body; // Storage place to cache changes to margins and padding\n        // Note: This assumes the following element types are not added to the\n        // document after the modal has opened.\n\n        body._paddingChangedForModal = body._paddingChangedForModal || [];\n        body._marginChangedForModal = body._marginChangedForModal || [];\n\n        if (this.isBodyOverflowing) {\n          var scrollbarWidth = this.scrollbarWidth; // Adjust fixed content padding\n\n          /* istanbul ignore next: difficult to test in JSDOM */\n\n          selectAll(Selector$1.FIXED_CONTENT).forEach(function (el) {\n            var actualPadding = el.style.paddingRight;\n            var calculatedPadding = getCS(el).paddingRight || 0;\n            setAttr(el, 'data-padding-right', actualPadding);\n            el.style.paddingRight = \"\".concat(toFloat(calculatedPadding) + scrollbarWidth, \"px\");\n\n            body._paddingChangedForModal.push(el);\n          }); // Adjust sticky content margin\n\n          /* istanbul ignore next: difficult to test in JSDOM */\n\n          selectAll(Selector$1.STICKY_CONTENT).forEach(function (el)\n          /* istanbul ignore next */\n          {\n            var actualMargin = el.style.marginRight;\n            var calculatedMargin = getCS(el).marginRight || 0;\n            setAttr(el, 'data-margin-right', actualMargin);\n            el.style.marginRight = \"\".concat(toFloat(calculatedMargin) - scrollbarWidth, \"px\");\n\n            body._marginChangedForModal.push(el);\n          }); // Adjust <b-navbar-toggler> margin\n\n          /* istanbul ignore next: difficult to test in JSDOM */\n\n          selectAll(Selector$1.NAVBAR_TOGGLER).forEach(function (el)\n          /* istanbul ignore next */\n          {\n            var actualMargin = el.style.marginRight;\n            var calculatedMargin = getCS(el).marginRight || 0;\n            setAttr(el, 'data-margin-right', actualMargin);\n            el.style.marginRight = \"\".concat(toFloat(calculatedMargin) + scrollbarWidth, \"px\");\n\n            body._marginChangedForModal.push(el);\n          }); // Adjust body padding\n\n          var actualPadding = body.style.paddingRight;\n          var calculatedPadding = getCS(body).paddingRight;\n          setAttr(body, 'data-padding-right', actualPadding);\n          body.style.paddingRight = \"\".concat(toFloat(calculatedPadding) + scrollbarWidth, \"px\");\n        }\n      },\n      resetScrollbar: function resetScrollbar() {\n        var body = document.body;\n\n        if (body._paddingChangedForModal) {\n          // Restore fixed content padding\n          body._paddingChangedForModal.forEach(function (el) {\n            /* istanbul ignore next: difficult to test in JSDOM */\n            if (hasAttr(el, 'data-padding-right')) {\n              el.style.paddingRight = getAttr(el, 'data-padding-right') || '';\n              removeAttr(el, 'data-padding-right');\n            }\n          });\n        }\n\n        if (body._marginChangedForModal) {\n          // Restore sticky content and navbar-toggler margin\n          body._marginChangedForModal.forEach(function (el) {\n            /* istanbul ignore next: difficult to test in JSDOM */\n            if (hasAttr(el, 'data-margin-right')) {\n              el.style.marginRight = getAttr(el, 'data-margin-right') || '';\n              removeAttr(el, 'data-margin-right');\n            }\n          });\n        }\n\n        body._paddingChangedForModal = null;\n        body._marginChangedForModal = null; // Restore body padding\n\n        if (hasAttr(body, 'data-padding-right')) {\n          body.style.paddingRight = getAttr(body, 'data-padding-right') || '';\n          removeAttr(body, 'data-padding-right');\n        }\n      }\n    }\n  }); // Create and export our modal manager instance\n\n  var modalManager = new ModalManager();\n\n  var BvModalEvent =\n  /*#__PURE__*/\n  function (_BvEvent) {\n    _inherits(BvModalEvent, _BvEvent);\n\n    function BvModalEvent(type) {\n      var _this;\n\n      var eventInit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _classCallCheck(this, BvModalEvent);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(BvModalEvent).call(this, type, eventInit)); // Freeze our new props as readonly, but leave them enumerable\n\n      defineProperties(_assertThisInitialized(_this), {\n        trigger: readonlyDescriptor()\n      });\n      return _this;\n    }\n\n    _createClass(BvModalEvent, null, [{\n      key: \"Defaults\",\n      get: function get() {\n        return _objectSpread2({}, _get(_getPrototypeOf(BvModalEvent), \"Defaults\", this), {\n          trigger: null\n        });\n      }\n    }]);\n\n    return BvModalEvent;\n  }(BvEvent); // Named exports\n\n  var NAME$n = 'BModal'; // ObserveDom config to detect changes in modal content\n  // so that we can adjust the modal padding if needed\n\n  var OBSERVER_CONFIG = {\n    subtree: true,\n    childList: true,\n    characterData: true,\n    attributes: true,\n    attributeFilter: ['style', 'class']\n  }; // Query selector to find all tabbable elements\n  // (includes tabindex=\"-1\", which we filter out after)\n\n  var TABABLE_SELECTOR = ['button', '[href]:not(.disabled)', 'input', 'select', 'textarea', '[tabindex]', '[contenteditable]'].map(function (s) {\n    return \"\".concat(s, \":not(:disabled):not([disabled])\");\n  }).join(', '); // --- Utility methods ---\n  // Attempt to focus an element, and return true if successful\n\n  var attemptFocus = function attemptFocus(el) {\n    if (el && isVisible(el) && el.focus) {\n      try {\n        el.focus();\n      } catch (_unused) {}\n    } // If the element has focus, then return true\n\n\n    return document.activeElement === el;\n  }; // --- Props ---\n\n\n  var props$H = {\n    size: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$n, 'size');\n      }\n    },\n    centered: {\n      type: Boolean,\n      default: false\n    },\n    scrollable: {\n      type: Boolean,\n      default: false\n    },\n    buttonSize: {\n      type: String,\n      default: ''\n    },\n    noStacking: {\n      type: Boolean,\n      default: false\n    },\n    noFade: {\n      type: Boolean,\n      default: false\n    },\n    noCloseOnBackdrop: {\n      type: Boolean,\n      default: false\n    },\n    noCloseOnEsc: {\n      type: Boolean,\n      default: false\n    },\n    noEnforceFocus: {\n      type: Boolean,\n      default: false\n    },\n    ignoreEnforceFocusSelector: {\n      type: [Array, String],\n      default: ''\n    },\n    title: {\n      type: String,\n      default: ''\n    },\n    titleHtml: {\n      type: String\n    },\n    titleTag: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$n, 'titleTag');\n      }\n    },\n    titleClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    titleSrOnly: {\n      type: Boolean,\n      default: false\n    },\n    ariaLabel: {\n      type: String,\n      default: null\n    },\n    headerBgVariant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$n, 'headerBgVariant');\n      }\n    },\n    headerBorderVariant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$n, 'headerBorderVariant');\n      }\n    },\n    headerTextVariant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$n, 'headerTextVariant');\n      }\n    },\n    headerCloseVariant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$n, 'headerCloseVariant');\n      }\n    },\n    headerClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    bodyBgVariant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$n, 'bodyBgVariant');\n      }\n    },\n    bodyTextVariant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$n, 'bodyTextVariant');\n      }\n    },\n    modalClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    dialogClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    contentClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    bodyClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    footerBgVariant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$n, 'footerBgVariant');\n      }\n    },\n    footerBorderVariant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$n, 'footerBorderVariant');\n      }\n    },\n    footerTextVariant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$n, 'footerTextVariant');\n      }\n    },\n    footerClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    hideHeader: {\n      type: Boolean,\n      default: false\n    },\n    hideFooter: {\n      type: Boolean,\n      default: false\n    },\n    hideHeaderClose: {\n      type: Boolean,\n      default: false\n    },\n    hideBackdrop: {\n      type: Boolean,\n      default: false\n    },\n    okOnly: {\n      type: Boolean,\n      default: false\n    },\n    okDisabled: {\n      type: Boolean,\n      default: false\n    },\n    cancelDisabled: {\n      type: Boolean,\n      default: false\n    },\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    returnFocus: {\n      // HTML Element, CSS selector string or Vue component instance\n      type: [HTMLElement, String, Object],\n      default: null\n    },\n    headerCloseContent: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$n, 'headerCloseContent');\n      }\n    },\n    headerCloseLabel: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$n, 'headerCloseLabel');\n      }\n    },\n    cancelTitle: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$n, 'cancelTitle');\n      }\n    },\n    cancelTitleHtml: {\n      type: String\n    },\n    okTitle: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$n, 'okTitle');\n      }\n    },\n    okTitleHtml: {\n      type: String\n    },\n    cancelVariant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$n, 'cancelVariant');\n      }\n    },\n    okVariant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$n, 'okVariant');\n      }\n    },\n    lazy: {\n      type: Boolean,\n      default: false\n    },\n    busy: {\n      type: Boolean,\n      default: false\n    },\n    static: {\n      type: Boolean,\n      default: false\n    },\n    autoFocusButton: {\n      type: String,\n      default: null,\n      validator: function validator(val) {\n        /* istanbul ignore next */\n        return isUndefinedOrNull(val) || arrayIncludes(['ok', 'cancel', 'close'], val);\n      }\n    }\n  }; // @vue/component\n\n  var BModal =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$n,\n    mixins: [idMixin, listenOnDocumentMixin, listenOnRootMixin, listenOnWindowMixin, normalizeSlotMixin, scopedStyleAttrsMixin],\n    inheritAttrs: false,\n    model: {\n      prop: 'visible',\n      event: 'change'\n    },\n    props: props$H,\n    data: function data() {\n      return {\n        isHidden: true,\n        // If modal should not be in document\n        isVisible: false,\n        // Controls modal visible state\n        isTransitioning: false,\n        // Used for style control\n        isShow: false,\n        // Used for style control\n        isBlock: false,\n        // Used for style control\n        isOpening: false,\n        // To signal that the modal is in the process of opening\n        isClosing: false,\n        // To signal that the modal is in the process of closing\n        ignoreBackdropClick: false,\n        // Used to signify if click out listener should ignore the click\n        isModalOverflowing: false,\n        return_focus: this.returnFocus || null,\n        // The following items are controlled by the modalManager instance\n        scrollbarWidth: 0,\n        zIndex: modalManager.getBaseZIndex(),\n        isTop: true,\n        isBodyOverflowing: false\n      };\n    },\n    computed: {\n      modalClasses: function modalClasses() {\n        return [{\n          fade: !this.noFade,\n          show: this.isShow\n        }, this.modalClass];\n      },\n      modalStyles: function modalStyles() {\n        var sbWidth = \"\".concat(this.scrollbarWidth, \"px\");\n        return {\n          paddingLeft: !this.isBodyOverflowing && this.isModalOverflowing ? sbWidth : '',\n          paddingRight: this.isBodyOverflowing && !this.isModalOverflowing ? sbWidth : '',\n          // Needed to fix issue https://github.com/bootstrap-vue/bootstrap-vue/issues/3457\n          // Even though we are using v-show, we must ensure 'none' is restored in the styles\n          display: this.isBlock ? 'block' : 'none'\n        };\n      },\n      dialogClasses: function dialogClasses() {\n        var _ref;\n\n        return [(_ref = {}, _defineProperty(_ref, \"modal-\".concat(this.size), this.size), _defineProperty(_ref, 'modal-dialog-centered', this.centered), _defineProperty(_ref, 'modal-dialog-scrollable', this.scrollable), _ref), this.dialogClass];\n      },\n      headerClasses: function headerClasses() {\n        var _ref2;\n\n        return [(_ref2 = {}, _defineProperty(_ref2, \"bg-\".concat(this.headerBgVariant), this.headerBgVariant), _defineProperty(_ref2, \"text-\".concat(this.headerTextVariant), this.headerTextVariant), _defineProperty(_ref2, \"border-\".concat(this.headerBorderVariant), this.headerBorderVariant), _ref2), this.headerClass];\n      },\n      titleClasses: function titleClasses() {\n        return [{\n          'sr-only': this.titleSrOnly\n        }, this.titleClass];\n      },\n      bodyClasses: function bodyClasses() {\n        var _ref3;\n\n        return [(_ref3 = {}, _defineProperty(_ref3, \"bg-\".concat(this.bodyBgVariant), this.bodyBgVariant), _defineProperty(_ref3, \"text-\".concat(this.bodyTextVariant), this.bodyTextVariant), _ref3), this.bodyClass];\n      },\n      footerClasses: function footerClasses() {\n        var _ref4;\n\n        return [(_ref4 = {}, _defineProperty(_ref4, \"bg-\".concat(this.footerBgVariant), this.footerBgVariant), _defineProperty(_ref4, \"text-\".concat(this.footerTextVariant), this.footerTextVariant), _defineProperty(_ref4, \"border-\".concat(this.footerBorderVariant), this.footerBorderVariant), _ref4), this.footerClass];\n      },\n      modalOuterStyle: function modalOuterStyle() {\n        // Styles needed for proper stacking of modals\n        return {\n          position: 'absolute',\n          zIndex: this.zIndex\n        };\n      },\n      slotScope: function slotScope() {\n        return {\n          ok: this.onOk,\n          cancel: this.onCancel,\n          close: this.onClose,\n          hide: this.hide,\n          visible: this.isVisible\n        };\n      },\n      computeIgnoreEnforceFocusSelector: function computeIgnoreEnforceFocusSelector() {\n        // Normalize to an single selector with selectors separated by `,`\n        return concat(this.ignoreEnforceFocusSelector).filter(identity).join(',').trim();\n      }\n    },\n    watch: {\n      visible: function visible(newVal, oldVal) {\n        if (newVal !== oldVal) {\n          this[newVal ? 'show' : 'hide']();\n        }\n      }\n    },\n    created: function created() {\n      // Define non-reactive properties\n      this._observer = null;\n    },\n    mounted: function mounted() {\n      // Set initial z-index as queried from the DOM\n      this.zIndex = modalManager.getBaseZIndex(); // Listen for events from others to either open or close ourselves\n      // and listen to all modals to enable/disable enforce focus\n\n      this.listenOnRoot('bv::show::modal', this.showHandler);\n      this.listenOnRoot('bv::hide::modal', this.hideHandler);\n      this.listenOnRoot('bv::toggle::modal', this.toggleHandler); // Listen for `bv:modal::show events`, and close ourselves if the\n      // opening modal not us\n\n      this.listenOnRoot('bv::modal::show', this.modalListener); // Initially show modal?\n\n      if (this.visible === true) {\n        this.$nextTick(this.show);\n      }\n    },\n    beforeDestroy: function beforeDestroy() {\n      // Ensure everything is back to normal\n      if (this._observer) {\n        this._observer.disconnect();\n\n        this._observer = null;\n      }\n\n      if (this.isVisible) {\n        this.isVisible = false;\n        this.isShow = false;\n        this.isTransitioning = false;\n      }\n    },\n    methods: {\n      // Private method to update the v-model\n      updateModel: function updateModel(val) {\n        if (val !== this.visible) {\n          this.$emit('change', val);\n        }\n      },\n      // Private method to create a BvModalEvent object\n      buildEvent: function buildEvent(type) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return new BvModalEvent(type, _objectSpread2({\n          // Default options\n          cancelable: false,\n          target: this.$refs.modal || this.$el || null,\n          relatedTarget: null,\n          trigger: null\n        }, options, {\n          // Options that can't be overridden\n          vueTarget: this,\n          componentId: this.safeId()\n        }));\n      },\n      // Public method to show modal\n      show: function show() {\n        if (this.isVisible || this.isOpening) {\n          // If already open, or in the process of opening, do nothing\n\n          /* istanbul ignore next */\n          return;\n        }\n        /* istanbul ignore next */\n\n\n        if (this.isClosing) {\n          // If we are in the process of closing, wait until hidden before re-opening\n\n          /* istanbul ignore next */\n          this.$once('hidden', this.show);\n          /* istanbul ignore next */\n\n          return;\n        }\n\n        this.isOpening = true; // Set the element to return focus to when closed\n\n        this.return_focus = this.return_focus || this.getActiveElement();\n        var showEvt = this.buildEvent('show', {\n          cancelable: true\n        });\n        this.emitEvent(showEvt); // Don't show if canceled\n\n        if (showEvt.defaultPrevented || this.isVisible) {\n          this.isOpening = false; // Ensure the v-model reflects the current state\n\n          this.updateModel(false);\n          return;\n        } // Show the modal\n\n\n        this.doShow();\n      },\n      // Public method to hide modal\n      hide: function hide() {\n        var trigger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n        if (!this.isVisible || this.isClosing) {\n          /* istanbul ignore next */\n          return;\n        }\n\n        this.isClosing = true;\n        var hideEvt = this.buildEvent('hide', {\n          cancelable: trigger !== 'FORCE',\n          trigger: trigger || null\n        }); // We emit specific event for one of the three built-in buttons\n\n        if (trigger === 'ok') {\n          this.$emit('ok', hideEvt);\n        } else if (trigger === 'cancel') {\n          this.$emit('cancel', hideEvt);\n        } else if (trigger === 'headerclose') {\n          this.$emit('close', hideEvt);\n        }\n\n        this.emitEvent(hideEvt); // Hide if not canceled\n\n        if (hideEvt.defaultPrevented || !this.isVisible) {\n          this.isClosing = false; // Ensure v-model reflects current state\n\n          this.updateModel(true);\n          return;\n        } // Stop observing for content changes\n\n\n        if (this._observer) {\n          this._observer.disconnect();\n\n          this._observer = null;\n        } // Trigger the hide transition\n\n\n        this.isVisible = false; // Update the v-model\n\n        this.updateModel(false);\n      },\n      // Public method to toggle modal visibility\n      toggle: function toggle(triggerEl) {\n        if (triggerEl) {\n          this.return_focus = triggerEl;\n        }\n\n        if (this.isVisible) {\n          this.hide('toggle');\n        } else {\n          this.show();\n        }\n      },\n      // Private method to get the current document active element\n      getActiveElement: function getActiveElement() {\n        if (isBrowser) {\n          var activeElement = document.activeElement; // Note: On IE 11, `document.activeElement` may be null.\n          // So we test it for truthiness first.\n          // https://github.com/bootstrap-vue/bootstrap-vue/issues/3206\n          // Returning focus to document.body may cause unwanted scrolls, so we\n          // exclude setting focus on body\n\n          if (activeElement && activeElement !== document.body && activeElement.focus) {\n            // Preset the fallback return focus value if it is not set\n            // `document.activeElement` should be the trigger element that was clicked or\n            // in the case of using the v-model, which ever element has current focus\n            // Will be overridden by some commands such as toggle, etc.\n            return activeElement;\n          }\n        }\n\n        return null;\n      },\n      // Private method to get a list of all tabable elements within modal content\n      getTabables: function getTabables() {\n        // Find all tabable elements in the modal content\n        // Assumes users have not used tabindex > 0 on elements!\n        return selectAll(TABABLE_SELECTOR, this.$refs.content).filter(isVisible).filter(function (i) {\n          return i.tabIndex > -1 && !i.disabled;\n        });\n      },\n      // Private method to finish showing modal\n      doShow: function doShow() {\n        var _this = this;\n\n        /* istanbul ignore next: commenting out for now until we can test stacking */\n        if (modalManager.modalsAreOpen && this.noStacking) {\n          // If another modal(s) is already open, wait for it(them) to close\n          this.listenOnRootOnce('bv::modal::hidden', this.doShow);\n          return;\n        }\n\n        modalManager.registerModal(this); // Place modal in DOM\n\n        this.isHidden = false;\n        this.$nextTick(function () {\n          // We do this in `$nextTick()` to ensure the modal is in DOM first\n          // before we show it\n          _this.isVisible = true;\n          _this.isOpening = false; // Update the v-model\n\n          _this.updateModel(true);\n\n          _this.$nextTick(function () {\n            // In a nextTick in case modal content is lazy\n            // Observe changes in modal content and adjust if necessary\n            _this._observer = observeDom(_this.$refs.content, _this.checkModalOverflow.bind(_this), OBSERVER_CONFIG);\n          });\n        });\n      },\n      // Transition handlers\n      onBeforeEnter: function onBeforeEnter() {\n        this.isTransitioning = true;\n        this.setResizeEvent(true);\n      },\n      onEnter: function onEnter() {\n        var _this2 = this;\n\n        this.isBlock = true; // We add the `show` class 1 frame later\n        // `requestAF()` runs the callback before the next repaint, so we need\n        // two calls to guarantee the next frame has been rendered\n\n        requestAF(function () {\n          requestAF(function () {\n            _this2.isShow = true;\n          });\n        });\n      },\n      onAfterEnter: function onAfterEnter() {\n        var _this3 = this;\n\n        this.checkModalOverflow();\n        this.isTransitioning = false; // We use `requestAF()` to allow transition hooks to complete\n        // before passing control over to the other handlers\n        // This will allow users to not have to use `$nextTick()` or `requestAF()`\n        // when trying to pre-focus an element\n\n        requestAF(function () {\n          _this3.emitEvent(_this3.buildEvent('shown'));\n\n          _this3.setEnforceFocus(true);\n\n          _this3.$nextTick(function () {\n            // Delayed in a `$nextTick()` to allow users time to pre-focus\n            // an element if the wish\n            _this3.focusFirst();\n          });\n        });\n      },\n      onBeforeLeave: function onBeforeLeave() {\n        this.isTransitioning = true;\n        this.setResizeEvent(false);\n        this.setEnforceFocus(false);\n      },\n      onLeave: function onLeave() {\n        // Remove the 'show' class\n        this.isShow = false;\n      },\n      onAfterLeave: function onAfterLeave() {\n        var _this4 = this;\n\n        this.isBlock = false;\n        this.isTransitioning = false;\n        this.isModalOverflowing = false;\n        this.isHidden = true;\n        this.$nextTick(function () {\n          _this4.isClosing = false;\n          modalManager.unregisterModal(_this4);\n\n          _this4.returnFocusTo(); // TODO: Need to find a way to pass the `trigger` property\n          //       to the `hidden` event, not just only the `hide` event\n\n\n          _this4.emitEvent(_this4.buildEvent('hidden'));\n        });\n      },\n      // Event emitter\n      emitEvent: function emitEvent(bvModalEvt) {\n        var type = bvModalEvt.type; // We emit on root first incase a global listener wants to cancel\n        // the event first before the instance emits its event\n\n        this.emitOnRoot(\"bv::modal::\".concat(type), bvModalEvt, bvModalEvt.componentId);\n        this.$emit(type, bvModalEvt);\n      },\n      // UI event handlers\n      onDialogMousedown: function onDialogMousedown() {\n        var _this5 = this;\n\n        // Watch to see if the matching mouseup event occurs outside the dialog\n        // And if it does, cancel the clickOut handler\n        var modal = this.$refs.modal;\n\n        var onceModalMouseup = function onceModalMouseup(evt) {\n          eventOff(modal, 'mouseup', onceModalMouseup, EVENT_OPTIONS_NO_CAPTURE);\n\n          if (evt.target === modal) {\n            _this5.ignoreBackdropClick = true;\n          }\n        };\n\n        eventOn(modal, 'mouseup', onceModalMouseup, EVENT_OPTIONS_NO_CAPTURE);\n      },\n      onClickOut: function onClickOut(evt) {\n        if (this.ignoreBackdropClick) {\n          // Click was initiated inside the modal content, but finished outside.\n          // Set by the above onDialogMousedown handler\n          this.ignoreBackdropClick = false;\n          return;\n        } // Do nothing if not visible, backdrop click disabled, or element\n        // that generated click event is no longer in document body\n\n\n        if (!this.isVisible || this.noCloseOnBackdrop || !contains(document.body, evt.target)) {\n          return;\n        } // If backdrop clicked, hide modal\n\n\n        if (!contains(this.$refs.content, evt.target)) {\n          this.hide('backdrop');\n        }\n      },\n      onOk: function onOk() {\n        this.hide('ok');\n      },\n      onCancel: function onCancel() {\n        this.hide('cancel');\n      },\n      onClose: function onClose() {\n        this.hide('headerclose');\n      },\n      onEsc: function onEsc(evt) {\n        // If ESC pressed, hide modal\n        if (evt.keyCode === KEY_CODES.ESC && this.isVisible && !this.noCloseOnEsc) {\n          this.hide('esc');\n        }\n      },\n      // Document focusin listener\n      focusHandler: function focusHandler(evt) {\n        // If focus leaves modal content, bring it back\n        var content = this.$refs.content;\n        var target = evt.target;\n\n        if (this.noEnforceFocus || !this.isTop || !this.isVisible || !content || document === target || contains(content, target) || this.computeIgnoreEnforceFocusSelector && closest(this.computeIgnoreEnforceFocusSelector, target, true)) {\n          return;\n        }\n\n        var tabables = this.getTabables();\n        var _this$$refs = this.$refs,\n            bottomTrap = _this$$refs.bottomTrap,\n            topTrap = _this$$refs.topTrap;\n\n        if (bottomTrap && target === bottomTrap) {\n          // If user pressed TAB out of modal into our bottom trab trap element\n          // Find the first tabable element in the modal content and focus it\n          if (attemptFocus(tabables[0])) {\n            // Focus was successful\n            return;\n          }\n        } else if (topTrap && target === topTrap) {\n          // If user pressed CTRL-TAB out of modal and into our top tab trap element\n          // Find the last tabable element in the modal content and focus it\n          if (attemptFocus(tabables[tabables.length - 1])) {\n            // Focus was successful\n            return;\n          }\n        } // Otherwise focus the modal content container\n\n\n        content.focus({\n          preventScroll: true\n        });\n      },\n      // Turn on/off focusin listener\n      setEnforceFocus: function setEnforceFocus(on) {\n        this.listenDocument(on, 'focusin', this.focusHandler);\n      },\n      // Resize listener\n      setResizeEvent: function setResizeEvent(on) {\n        this.listenWindow(on, 'resize', this.checkModalOverflow);\n        this.listenWindow(on, 'orientationchange', this.checkModalOverflow);\n      },\n      // Root listener handlers\n      showHandler: function showHandler(id, triggerEl) {\n        if (id === this.safeId()) {\n          this.return_focus = triggerEl || this.getActiveElement();\n          this.show();\n        }\n      },\n      hideHandler: function hideHandler(id) {\n        if (id === this.safeId()) {\n          this.hide('event');\n        }\n      },\n      toggleHandler: function toggleHandler(id, triggerEl) {\n        if (id === this.safeId()) {\n          this.toggle(triggerEl);\n        }\n      },\n      modalListener: function modalListener(bvEvt) {\n        // If another modal opens, close this one if stacking not permitted\n        if (this.noStacking && bvEvt.vueTarget !== this) {\n          this.hide();\n        }\n      },\n      // Focus control handlers\n      focusFirst: function focusFirst() {\n        var _this6 = this;\n\n        // Don't try and focus if we are SSR\n        if (isBrowser) {\n          requestAF(function () {\n            var modal = _this6.$refs.modal;\n            var content = _this6.$refs.content;\n\n            var activeElement = _this6.getActiveElement(); // If the modal contains the activeElement, we don't do anything\n\n\n            if (modal && content && !(activeElement && contains(content, activeElement))) {\n              var ok = _this6.$refs['ok-button'];\n              var cancel = _this6.$refs['cancel-button'];\n              var close = _this6.$refs['close-button']; // Focus the appropriate button or modal content wrapper\n\n              var autoFocus = _this6.autoFocusButton;\n              var el = autoFocus === 'ok' && ok ? ok.$el || ok : autoFocus === 'cancel' && cancel ? cancel.$el || cancel : autoFocus === 'close' && close ? close.$el || close : content; // Focus the element\n\n              attemptFocus(el);\n\n              if (el === content) {\n                // Make sure top of modal is showing (if longer than the viewport)\n                _this6.$nextTick(function () {\n                  modal.scrollTop = 0;\n                });\n              }\n            }\n          });\n        }\n      },\n      returnFocusTo: function returnFocusTo() {\n        // Prefer `returnFocus` prop over event specified\n        // `return_focus` value\n        var el = this.returnFocus || this.return_focus || null;\n        this.return_focus = null;\n        this.$nextTick(function () {\n          // Is el a string CSS selector?\n          el = isString(el) ? select(el) : el;\n\n          if (el) {\n            // Possibly could be a component reference\n            el = el.$el || el;\n            attemptFocus(el);\n          }\n        });\n      },\n      checkModalOverflow: function checkModalOverflow() {\n        if (this.isVisible) {\n          var modal = this.$refs.modal;\n          this.isModalOverflowing = modal.scrollHeight > document.documentElement.clientHeight;\n        }\n      },\n      makeModal: function makeModal(h) {\n        // Modal header\n        var header = h();\n\n        if (!this.hideHeader) {\n          var modalHeader = this.normalizeSlot('modal-header', this.slotScope);\n\n          if (!modalHeader) {\n            var closeButton = h();\n\n            if (!this.hideHeaderClose) {\n              closeButton = h(BButtonClose, {\n                ref: 'close-button',\n                props: {\n                  content: this.headerCloseContent,\n                  disabled: this.isTransitioning,\n                  ariaLabel: this.headerCloseLabel,\n                  textVariant: this.headerCloseVariant || this.headerTextVariant\n                },\n                on: {\n                  click: this.onClose\n                }\n              }, [this.normalizeSlot('modal-header-close')]);\n            }\n\n            var domProps = !this.hasNormalizedSlot('modal-title') && this.titleHtml ? {\n              innerHTML: this.titleHtml\n            } : {};\n            modalHeader = [h(this.titleTag, {\n              staticClass: 'modal-title',\n              class: this.titleClasses,\n              attrs: {\n                id: this.safeId('__BV_modal_title_')\n              },\n              domProps: domProps\n            }, [this.normalizeSlot('modal-title', this.slotScope) || stripTags(this.title)]), closeButton];\n          }\n\n          header = h('header', {\n            ref: 'header',\n            staticClass: 'modal-header',\n            class: this.headerClasses,\n            attrs: {\n              id: this.safeId('__BV_modal_header_')\n            }\n          }, [modalHeader]);\n        } // Modal body\n\n\n        var body = h('div', {\n          ref: 'body',\n          staticClass: 'modal-body',\n          class: this.bodyClasses,\n          attrs: {\n            id: this.safeId('__BV_modal_body_')\n          }\n        }, this.normalizeSlot('default', this.slotScope)); // Modal footer\n\n        var footer = h();\n\n        if (!this.hideFooter) {\n          var modalFooter = this.normalizeSlot('modal-footer', this.slotScope);\n\n          if (!modalFooter) {\n            var cancelButton = h();\n\n            if (!this.okOnly) {\n              var cancelHtml = this.cancelTitleHtml ? {\n                innerHTML: this.cancelTitleHtml\n              } : null;\n              cancelButton = h(BButton, {\n                ref: 'cancel-button',\n                props: {\n                  variant: this.cancelVariant,\n                  size: this.buttonSize,\n                  disabled: this.cancelDisabled || this.busy || this.isTransitioning\n                },\n                on: {\n                  click: this.onCancel\n                }\n              }, [this.normalizeSlot('modal-cancel') || (cancelHtml ? h('span', {\n                domProps: cancelHtml\n              }) : stripTags(this.cancelTitle))]);\n            }\n\n            var okHtml = this.okTitleHtml ? {\n              innerHTML: this.okTitleHtml\n            } : null;\n            var okButton = h(BButton, {\n              ref: 'ok-button',\n              props: {\n                variant: this.okVariant,\n                size: this.buttonSize,\n                disabled: this.okDisabled || this.busy || this.isTransitioning\n              },\n              on: {\n                click: this.onOk\n              }\n            }, [this.normalizeSlot('modal-ok') || (okHtml ? h('span', {\n              domProps: okHtml\n            }) : stripTags(this.okTitle))]);\n            modalFooter = [cancelButton, okButton];\n          }\n\n          footer = h('footer', {\n            ref: 'footer',\n            staticClass: 'modal-footer',\n            class: this.footerClasses,\n            attrs: {\n              id: this.safeId('__BV_modal_footer_')\n            }\n          }, [modalFooter]);\n        } // Assemble modal content\n\n\n        var modalContent = h('div', {\n          ref: 'content',\n          staticClass: 'modal-content',\n          class: this.contentClass,\n          attrs: {\n            role: 'document',\n            id: this.safeId('__BV_modal_content_'),\n            tabindex: '-1'\n          }\n        }, [header, body, footer]); // Tab trap to prevent page from scrolling to next element in\n        // tab index during enforce focus tab cycle\n\n        var tabTrapTop = h();\n        var tabTrapBottom = h();\n\n        if (this.isVisible && !this.noEnforceFocus) {\n          tabTrapTop = h('span', {\n            ref: 'topTrap',\n            attrs: {\n              tabindex: '0'\n            }\n          });\n          tabTrapBottom = h('span', {\n            ref: 'bottomTrap',\n            attrs: {\n              tabindex: '0'\n            }\n          });\n        } // Modal dialog wrapper\n\n\n        var modalDialog = h('div', {\n          ref: 'dialog',\n          staticClass: 'modal-dialog',\n          class: this.dialogClasses,\n          on: {\n            mousedown: this.onDialogMousedown\n          }\n        }, [tabTrapTop, modalContent, tabTrapBottom]); // Modal\n\n        var modal = h('div', {\n          ref: 'modal',\n          staticClass: 'modal',\n          class: this.modalClasses,\n          style: this.modalStyles,\n          directives: [{\n            name: 'show',\n            rawName: 'v-show',\n            value: this.isVisible,\n            expression: 'isVisible'\n          }],\n          attrs: {\n            id: this.safeId(),\n            role: 'dialog',\n            'aria-hidden': this.isVisible ? null : 'true',\n            'aria-modal': this.isVisible ? 'true' : null,\n            'aria-label': this.ariaLabel,\n            'aria-labelledby': this.hideHeader || this.ariaLabel || !(this.hasNormalizedSlot('modal-title') || this.titleHtml || this.title) ? null : this.safeId('__BV_modal_title_'),\n            'aria-describedby': this.safeId('__BV_modal_body_')\n          },\n          on: {\n            keydown: this.onEsc,\n            click: this.onClickOut\n          }\n        }, [modalDialog]); // Wrap modal in transition\n        // Sadly, we can't use BVTransition here due to the differences in\n        // transition durations for .modal and .modal-dialog. Not until\n        // issue https://github.com/vuejs/vue/issues/9986 is resolved\n\n        modal = h('transition', {\n          props: {\n            enterClass: '',\n            enterToClass: '',\n            enterActiveClass: '',\n            leaveClass: '',\n            leaveActiveClass: '',\n            leaveToClass: ''\n          },\n          on: {\n            beforeEnter: this.onBeforeEnter,\n            enter: this.onEnter,\n            afterEnter: this.onAfterEnter,\n            beforeLeave: this.onBeforeLeave,\n            leave: this.onLeave,\n            afterLeave: this.onAfterLeave\n          }\n        }, [modal]); // Modal backdrop\n\n        var backdrop = h();\n\n        if (!this.hideBackdrop && this.isVisible) {\n          backdrop = h('div', {\n            staticClass: 'modal-backdrop',\n            attrs: {\n              id: this.safeId('__BV_modal_backdrop_')\n            }\n          }, [this.normalizeSlot('modal-backdrop')]);\n        }\n\n        backdrop = h(BVTransition, {\n          props: {\n            noFade: this.noFade\n          }\n        }, [backdrop]); // If the parent has a scoped style attribute, and the modal\n        // is portalled, add the scoped attribute to the modal wrapper\n\n        var scopedStyleAttrs = !this.static ? this.scopedStyleAttrs : {}; // Assemble modal and backdrop in an outer <div>\n\n        return h('div', {\n          key: \"modal-outer-\".concat(this._uid),\n          style: this.modalOuterStyle,\n          attrs: _objectSpread2({}, scopedStyleAttrs, {}, this.$attrs, {\n            id: this.safeId('__BV_modal_outer_')\n          })\n        }, [modal, backdrop]);\n      }\n    },\n    render: function render(h) {\n      if (this.static) {\n        return this.lazy && this.isHidden ? h() : this.makeModal(h);\n      } else {\n        return this.isHidden ? h() : h(BTransporterSingle, [this.makeModal(h)]);\n      }\n    }\n  });\n\n  var EVENT_SHOW = 'bv::show::modal'; // Prop name we use to store info on root element\n\n  var PROPERTY = '__bv_modal_directive__';\n\n  var getTarget = function getTarget(_ref) {\n    var _ref$modifiers = _ref.modifiers,\n        modifiers = _ref$modifiers === void 0 ? {} : _ref$modifiers,\n        arg = _ref.arg,\n        value = _ref.value;\n    // Try value, then arg, otherwise pick last modifier\n    return isString(value) ? value : isString(arg) ? arg : keys(modifiers).reverse()[0];\n  };\n\n  var getTriggerElement = function getTriggerElement(el) {\n    // If root element is a dropdown-item or nav-item, we\n    // need to target the inner link or button instead\n    return el && matches(el, '.dropdown-menu > li, li.nav-item') ? select('a, button', el) || el : el;\n  };\n\n  var setRole = function setRole(trigger) {\n    // Ensure accessibility on non button elements\n    if (trigger && trigger.tagName !== 'BUTTON') {\n      // Only set a role if the trigger element doesn't have one\n      if (!hasAttr(trigger, 'role')) {\n        setAttr(trigger, 'role', 'button');\n      } // Add a tabindex is not a button or link, and tabindex is not provided\n\n\n      if (trigger.tagName !== 'A' && !hasAttr(trigger, 'tabindex')) {\n        setAttr(trigger, 'tabindex', '0');\n      }\n    }\n  };\n\n  var bind$1 = function bind(el, binding, vnode) {\n    var target = getTarget(binding);\n    var trigger = getTriggerElement(el);\n\n    if (target && trigger) {\n      var handler = function handler(evt) {\n        // `currentTarget` is the element with the listener on it\n        var currentTarget = evt.currentTarget;\n\n        if (!isDisabled(currentTarget)) {\n          var type = evt.type;\n          var key = evt.keyCode; // Open modal only if trigger is not disabled\n\n          if (type === 'click' || type === 'keydown' && (key === KEY_CODES.ENTER || key === KEY_CODES.SPACE)) {\n            vnode.context.$root.$emit(EVENT_SHOW, target, currentTarget);\n          }\n        }\n      };\n\n      el[PROPERTY] = {\n        handler: handler,\n        target: target,\n        trigger: trigger\n      }; // If element is not a button, we add `role=\"button\"` for accessibility\n\n      setRole(trigger); // Listen for click events\n\n      eventOn(trigger, 'click', handler, EVENT_OPTIONS_PASSIVE);\n\n      if (trigger.tagName !== 'BUTTON' && getAttr(trigger, 'role') === 'button') {\n        // If trigger isn't a button but has role button,\n        // we also listen for `keydown.space` && `keydown.enter`\n        eventOn(trigger, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\n      }\n    }\n  };\n\n  var unbind$1 = function unbind(el) {\n    var oldProp = el[PROPERTY] || {};\n    var trigger = oldProp.trigger;\n    var handler = oldProp.handler;\n\n    if (trigger && handler) {\n      eventOff(trigger, 'click', handler, EVENT_OPTIONS_PASSIVE);\n      eventOff(trigger, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\n      eventOff(el, 'click', handler, EVENT_OPTIONS_PASSIVE);\n      eventOff(el, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\n    }\n\n    delete el[PROPERTY];\n  };\n\n  var componentUpdated$1 = function componentUpdated(el, binding, vnode) {\n    var oldProp = el[PROPERTY] || {};\n    var target = getTarget(binding);\n    var trigger = getTriggerElement(el);\n\n    if (target !== oldProp.target || trigger !== oldProp.trigger) {\n      // We bind and rebind if the target or trigger changes\n      unbind$1(el);\n      bind$1(el, binding, vnode);\n    } // If trigger element is not a button, ensure `role=\"button\"`\n    // is still set for accessibility\n\n\n    setRole(trigger);\n  };\n\n  var updated = function updated() {};\n  /*\n   * Export our directive\n   */\n\n\n  var VBModal = {\n    inserted: componentUpdated$1,\n    updated: updated,\n    componentUpdated: componentUpdated$1,\n    unbind: unbind$1\n  };\n\n  var PROP_NAME$2 = '$bvModal';\n  var PROP_NAME_PRIV = '_bv__modal'; // Base modal props that are allowed\n  // Some may be ignored or overridden on some message boxes\n  // Prop ID is allowed, but really only should be used for testing\n  // We need to add it in explicitly as it comes from the `idMixin`\n\n  var BASE_PROPS = ['id'].concat(_toConsumableArray(keys(omit(props$H, ['busy', 'lazy', 'noStacking', \"static\", 'visible'])))); // Fallback event resolver (returns undefined)\n\n  var defaultResolver = function defaultResolver() {}; // Map prop names to modal slot names\n\n\n  var propsToSlots = {\n    msgBoxContent: 'default',\n    title: 'modal-title',\n    okTitle: 'modal-ok',\n    cancelTitle: 'modal-cancel'\n  }; // --- Utility methods ---\n  // Method to filter only recognized props that are not undefined\n\n  var filterOptions = function filterOptions(options) {\n    return BASE_PROPS.reduce(function (memo, key) {\n      if (!isUndefined(options[key])) {\n        memo[key] = options[key];\n      }\n\n      return memo;\n    }, {});\n  }; // Method to install `$bvModal` VM injection\n\n\n  var plugin = function plugin(Vue) {\n    // Create a private sub-component that extends BModal\n    // which self-destructs after hidden\n    // @vue/component\n    var BMsgBox = Vue.extend({\n      name: 'BMsgBox',\n      extends: BModal,\n      destroyed: function destroyed() {\n        // Make sure we not in document any more\n        if (this.$el && this.$el.parentNode) {\n          this.$el.parentNode.removeChild(this.$el);\n        }\n      },\n      mounted: function mounted() {\n        var _this = this;\n\n        // Self destruct handler\n        var handleDestroy = function handleDestroy() {\n          var self = _this;\n\n          _this.$nextTick(function () {\n            // In a `setTimeout()` to release control back to application\n            setTimeout(function () {\n              return self.$destroy();\n            }, 0);\n          });\n        }; // Self destruct if parent destroyed\n\n\n        this.$parent.$once('hook:destroyed', handleDestroy); // Self destruct after hidden\n\n        this.$once('hidden', handleDestroy); // Self destruct on route change\n\n        /* istanbul ignore if */\n\n        if (this.$router && this.$route) {\n          // Destroy ourselves if route changes\n\n          /* istanbul ignore next */\n          this.$once('hook:beforeDestroy', this.$watch('$router', handleDestroy));\n        } // Show the `BMsgBox`\n\n\n        this.show();\n      }\n    }); // Method to generate the on-demand modal message box\n    // Returns a promise that resolves to a value returned by the resolve\n\n    var asyncMsgBox = function asyncMsgBox($parent, props) {\n      var resolver = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultResolver;\n\n      if (warnNotClient(PROP_NAME$2) || warnNoPromiseSupport(PROP_NAME$2)) {\n        /* istanbul ignore next */\n        return;\n      } // Create an instance of `BMsgBox` component\n\n\n      var msgBox = new BMsgBox({\n        // We set parent as the local VM so these modals can emit events on\n        // the app `$root`, as needed by things like tooltips and popovers\n        // And it helps to ensure `BMsgBox` is destroyed when parent is destroyed\n        parent: $parent,\n        // Preset the prop values\n        propsData: _objectSpread2({}, filterOptions(getComponentConfig('BModal') || {}), {\n          // Defaults that user can override\n          hideHeaderClose: true,\n          hideHeader: !(props.title || props.titleHtml)\n        }, omit(props, keys(propsToSlots)), {\n          // Props that can't be overridden\n          lazy: false,\n          busy: false,\n          visible: false,\n          noStacking: false,\n          noEnforceFocus: false\n        })\n      }); // Convert certain props to scoped slots\n\n      keys(propsToSlots).forEach(function (prop) {\n        if (!isUndefined(props[prop])) {\n          // Can be a string, or array of VNodes.\n          // Alternatively, user can use HTML version of prop to pass an HTML string.\n          msgBox.$slots[propsToSlots[prop]] = concat(props[prop]);\n        }\n      }); // Return a promise that resolves when hidden, or rejects on destroyed\n\n      return new Promise(function (resolve, reject) {\n        var resolved = false;\n        msgBox.$once('hook:destroyed', function () {\n          if (!resolved) {\n            /* istanbul ignore next */\n            reject(new Error('BootstrapVue MsgBox destroyed before resolve'));\n          }\n        });\n        msgBox.$on('hide', function (bvModalEvt) {\n          if (!bvModalEvt.defaultPrevented) {\n            var result = resolver(bvModalEvt); // If resolver didn't cancel hide, we resolve\n\n            if (!bvModalEvt.defaultPrevented) {\n              resolved = true;\n              resolve(result);\n            }\n          }\n        }); // Create a mount point (a DIV) and mount the msgBo which will trigger it to show\n\n        var div = document.createElement('div');\n        document.body.appendChild(div);\n        msgBox.$mount(div);\n      });\n    }; // Private utility method to open a user defined message box and returns a promise.\n    // Not to be used directly by consumers, as this method may change calling syntax\n\n\n    var makeMsgBox = function makeMsgBox($parent, content) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var resolver = arguments.length > 3 ? arguments[3] : undefined;\n\n      if (!content || warnNoPromiseSupport(PROP_NAME$2) || warnNotClient(PROP_NAME$2) || !isFunction(resolver)) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      return asyncMsgBox($parent, _objectSpread2({}, filterOptions(options), {\n        msgBoxContent: content\n      }), resolver);\n    }; // BvModal instance class\n\n\n    var BvModal =\n    /*#__PURE__*/\n    function () {\n      function BvModal(vm) {\n        _classCallCheck(this, BvModal);\n\n        // Assign the new properties to this instance\n        assign(this, {\n          _vm: vm,\n          _root: vm.$root\n        }); // Set these properties as read-only and non-enumerable\n\n        defineProperties(this, {\n          _vm: readonlyDescriptor(),\n          _root: readonlyDescriptor()\n        });\n      } // --- Instance methods ---\n      // Show modal with the specified ID args are for future use\n\n\n      _createClass(BvModal, [{\n        key: \"show\",\n        value: function show(id) {\n          if (id && this._root) {\n            var _this$_root;\n\n            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n              args[_key - 1] = arguments[_key];\n            }\n\n            (_this$_root = this._root).$emit.apply(_this$_root, ['bv::show::modal', id].concat(args));\n          }\n        } // Hide modal with the specified ID args are for future use\n\n      }, {\n        key: \"hide\",\n        value: function hide(id) {\n          if (id && this._root) {\n            var _this$_root2;\n\n            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n              args[_key2 - 1] = arguments[_key2];\n            }\n\n            (_this$_root2 = this._root).$emit.apply(_this$_root2, ['bv::hide::modal', id].concat(args));\n          }\n        } // The following methods require Promise support!\n        // IE 11 and others do not support Promise natively, so users\n        // should have a Polyfill loaded (which they need anyways for IE 11 support)\n        // Open a message box with OK button only and returns a promise\n\n      }, {\n        key: \"msgBoxOk\",\n        value: function msgBoxOk(message) {\n          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n          // Pick the modal props we support from options\n          var props = _objectSpread2({}, options, {\n            // Add in overrides and our content prop\n            okOnly: true,\n            okDisabled: false,\n            hideFooter: false,\n            msgBoxContent: message\n          });\n\n          return makeMsgBox(this._vm, message, props, function () {\n            // Always resolve to true for OK\n            return true;\n          });\n        } // Open a message box modal with OK and CANCEL buttons\n        // and returns a promise\n\n      }, {\n        key: \"msgBoxConfirm\",\n        value: function msgBoxConfirm(message) {\n          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n          // Set the modal props we support from options\n          var props = _objectSpread2({}, options, {\n            // Add in overrides and our content prop\n            okOnly: false,\n            okDisabled: false,\n            cancelDisabled: false,\n            hideFooter: false\n          });\n\n          return makeMsgBox(this._vm, message, props, function (bvModalEvt) {\n            var trigger = bvModalEvt.trigger;\n            return trigger === 'ok' ? true : trigger === 'cancel' ? false : null;\n          });\n        }\n      }]);\n\n      return BvModal;\n    }(); // Add our instance mixin\n\n\n    Vue.mixin({\n      beforeCreate: function beforeCreate() {\n        // Because we need access to `$root` for `$emits`, and VM for parenting,\n        // we have to create a fresh instance of `BvModal` for each VM\n        this[PROP_NAME_PRIV] = new BvModal(this);\n      }\n    }); // Define our read-only `$bvModal` instance property\n    // Placed in an if just in case in HMR mode\n    // eslint-disable-next-line no-prototype-builtins\n\n    if (!Vue.prototype.hasOwnProperty(PROP_NAME$2)) {\n      defineProperty(Vue.prototype, PROP_NAME$2, {\n        get: function get() {\n          /* istanbul ignore next */\n          if (!this || !this[PROP_NAME_PRIV]) {\n            warn(\"\\\"\".concat(PROP_NAME$2, \"\\\" must be accessed from a Vue instance \\\"this\\\" context.\"), 'BModal');\n          }\n\n          return this[PROP_NAME_PRIV];\n        }\n      });\n    }\n  };\n\n  var BVModalPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    plugins: {\n      plugin: plugin\n    }\n  });\n\n  var ModalPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BModal: BModal\n    },\n    directives: {\n      VBModal: VBModal\n    },\n    // $bvModal injection\n    plugins: {\n      BVModalPlugin: BVModalPlugin\n    }\n  });\n\n  var props$I = {\n    tag: {\n      type: String,\n      default: 'ul'\n    },\n    fill: {\n      type: Boolean,\n      default: false\n    },\n    justified: {\n      type: Boolean,\n      default: false\n    },\n    align: {\n      type: String,\n      default: null\n    },\n    tabs: {\n      type: Boolean,\n      default: false\n    },\n    pills: {\n      type: Boolean,\n      default: false\n    },\n    vertical: {\n      type: Boolean,\n      default: false\n    },\n    small: {\n      type: Boolean,\n      default: false\n    },\n    cardHeader: {\n      // Set to true if placing in a card header\n      type: Boolean,\n      default: false\n    }\n  }; // -- Utils --\n\n  var computeJustifyContent = function computeJustifyContent(value) {\n    // Normalize value\n    value = value === 'left' ? 'start' : value === 'right' ? 'end' : value;\n    return \"justify-content-\".concat(value);\n  }; // @vue/component\n\n\n  var BNav =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BNav',\n    functional: true,\n    props: props$I,\n    render: function render(h, _ref) {\n      var _class;\n\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      return h(props.tag, a(data, {\n        staticClass: 'nav',\n        class: (_class = {\n          'nav-tabs': props.tabs,\n          'nav-pills': props.pills && !props.tabs,\n          'card-header-tabs': !props.vertical && props.cardHeader && props.tabs,\n          'card-header-pills': !props.vertical && props.cardHeader && props.pills && !props.tabs,\n          'flex-column': props.vertical,\n          'nav-fill': !props.vertical && props.fill,\n          'nav-justified': !props.vertical && props.justified\n        }, _defineProperty(_class, computeJustifyContent(props.align), !props.vertical && props.align), _defineProperty(_class, \"small\", props.small), _class)\n      }), children);\n    }\n  });\n\n  var props$J = propsFactory(); // @vue/component\n\n  var BNavItem =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BNavItem',\n    functional: true,\n    props: _objectSpread2({}, props$J, {\n      linkAttrs: {\n        type: Object,\n        default: function _default() {}\n      },\n      linkClasses: {\n        type: [String, Object, Array],\n        default: null\n      }\n    }),\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          listeners = _ref.listeners,\n          children = _ref.children;\n      // We transfer the listeners to the link\n      delete data.on;\n      return h('li', a(data, {\n        staticClass: 'nav-item'\n      }), [h(BLink, {\n        staticClass: 'nav-link',\n        class: props.linkClasses,\n        attrs: props.linkAttrs,\n        props: props,\n        on: listeners\n      }, children)]);\n    }\n  });\n\n  var props$K = {}; // @vue/component\n\n  var BNavText =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BNavText',\n    functional: true,\n    props: props$K,\n    render: function render(h, _ref) {\n      var data = _ref.data,\n          children = _ref.children;\n      return h('li', a(data, {\n        staticClass: 'navbar-text'\n      }), children);\n    }\n  });\n\n  var props$L = _objectSpread2({}, omit(props$o, ['inline']), {\n    formClass: {\n      type: [String, Array, Object],\n      default: null\n    }\n  }); // @vue/component\n\n  var BNavForm =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BNavForm',\n    functional: true,\n    props: props$L,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children,\n          _ref$listeners = _ref.listeners,\n          listeners = _ref$listeners === void 0 ? {} : _ref$listeners;\n      var attrs = data.attrs; // The following data properties are cleared out\n      // as they will be passed to BForm directly\n\n      data.attrs = {};\n      data.on = {};\n      var $form = h(BForm, {\n        class: props.formClass,\n        props: _objectSpread2({}, props, {\n          inline: true\n        }),\n        attrs: attrs,\n        on: listeners\n      }, children);\n      return h('li', a(data, {\n        staticClass: 'form-inline'\n      }), [$form]);\n    }\n  });\n\n  var props$M = pluckProps(['text', 'html', 'menuClass', 'toggleClass', 'noCaret', 'role', 'lazy'], props$j); // @vue/component\n\n  var BNavItemDropdown =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BNavItemDropdown',\n    mixins: [idMixin, dropdownMixin, normalizeSlotMixin],\n    props: props$M,\n    computed: {\n      isNav: function isNav() {\n        // Signal to dropdown mixin that we are in a navbar\n        return true;\n      },\n      dropdownClasses: function dropdownClasses() {\n        return [this.directionClass, {\n          show: this.visible\n        }];\n      },\n      menuClasses: function menuClasses() {\n        return [this.menuClass, {\n          'dropdown-menu-right': this.right,\n          show: this.visible\n        }];\n      },\n      toggleClasses: function toggleClasses() {\n        return [this.toggleClass, {\n          'dropdown-toggle-no-caret': this.noCaret\n        }];\n      }\n    },\n    render: function render(h) {\n      var button = h(BLink, {\n        ref: 'toggle',\n        staticClass: 'nav-link dropdown-toggle',\n        class: this.toggleClasses,\n        props: {\n          href: '#',\n          disabled: this.disabled\n        },\n        attrs: {\n          id: this.safeId('_BV_button_'),\n          'aria-haspopup': 'true',\n          'aria-expanded': this.visible ? 'true' : 'false'\n        },\n        on: {\n          mousedown: this.onMousedown,\n          click: this.toggle,\n          keydown: this.toggle // Handle ENTER, SPACE and DOWN\n\n        }\n      }, [this.$slots['button-content'] || this.$slots.text || h('span', {\n        domProps: htmlOrText(this.html, this.text)\n      })]);\n      var menu = h('ul', {\n        staticClass: 'dropdown-menu',\n        class: this.menuClasses,\n        ref: 'menu',\n        attrs: {\n          tabindex: '-1',\n          'aria-labelledby': this.safeId('_BV_button_')\n        },\n        on: {\n          keydown: this.onKeydown // Handle UP, DOWN and ESC\n\n        }\n      }, !this.lazy || this.visible ? this.normalizeSlot('default', {\n        hide: this.hide\n      }) : [h()]);\n      return h('li', {\n        staticClass: 'nav-item b-nav-dropdown dropdown',\n        class: this.dropdownClasses,\n        attrs: {\n          id: this.safeId()\n        }\n      }, [button, menu]);\n    }\n  });\n\n  var NavPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BNav: BNav,\n      BNavItem: BNavItem,\n      BNavText: BNavText,\n      BNavForm: BNavForm,\n      BNavItemDropdown: BNavItemDropdown,\n      BNavItemDd: BNavItemDropdown,\n      BNavDropdown: BNavItemDropdown,\n      BNavDd: BNavItemDropdown\n    },\n    plugins: {\n      DropdownPlugin: DropdownPlugin\n    }\n  });\n\n  var NAME$o = 'BNavbar';\n  var props$N = {\n    tag: {\n      type: String,\n      default: 'nav'\n    },\n    type: {\n      type: String,\n      default: 'light'\n    },\n    variant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$o, 'variant');\n      }\n    },\n    toggleable: {\n      type: [Boolean, String],\n      default: false\n    },\n    fixed: {\n      type: String\n    },\n    sticky: {\n      type: Boolean,\n      default: false\n    },\n    print: {\n      type: Boolean,\n      default: false\n    }\n  }; // @vue/component\n\n  var BNavbar =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$o,\n    mixins: [normalizeSlotMixin],\n    props: props$N,\n    provide: function provide() {\n      return {\n        bvNavbar: this\n      };\n    },\n    computed: {\n      breakpointClass: function breakpointClass() {\n        var breakpoint = null;\n        var xs = getBreakpoints()[0];\n        var toggleable = this.toggleable;\n\n        if (toggleable && isString(toggleable) && toggleable !== xs) {\n          breakpoint = \"navbar-expand-\".concat(toggleable);\n        } else if (toggleable === false) {\n          breakpoint = 'navbar-expand';\n        }\n\n        return breakpoint;\n      }\n    },\n    render: function render(h) {\n      var _ref;\n\n      return h(this.tag, {\n        staticClass: 'navbar',\n        class: [(_ref = {\n          'd-print': this.print,\n          'sticky-top': this.sticky\n        }, _defineProperty(_ref, \"navbar-\".concat(this.type), this.type), _defineProperty(_ref, \"bg-\".concat(this.variant), this.variant), _defineProperty(_ref, \"fixed-\".concat(this.fixed), this.fixed), _ref), this.breakpointClass],\n        attrs: {\n          role: this.tag === 'nav' ? null : 'navigation'\n        }\n      }, [this.normalizeSlot('default')]);\n    }\n  });\n\n  var props$O = pluckProps(['tag', 'fill', 'justified', 'align', 'small'], props$I); // -- Utils --\n\n  var computeJustifyContent$1 = function computeJustifyContent(value) {\n    // Normalize value\n    value = value === 'left' ? 'start' : value === 'right' ? 'end' : value;\n    return \"justify-content-\".concat(value);\n  }; // @vue/component\n\n\n  var BNavbarNav =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BNavbarNav',\n    functional: true,\n    props: props$O,\n    render: function render(h, _ref) {\n      var _class;\n\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      return h(props.tag, a(data, {\n        staticClass: 'navbar-nav',\n        class: (_class = {\n          'nav-fill': props.fill,\n          'nav-justified': props.justified\n        }, _defineProperty(_class, computeJustifyContent$1(props.align), props.align), _defineProperty(_class, \"small\", props.small), _class)\n      }), children);\n    }\n  });\n\n  var linkProps$3 = propsFactory();\n  linkProps$3.href.default = undefined;\n  linkProps$3.to.default = undefined;\n  var props$P = _objectSpread2({}, linkProps$3, {\n    tag: {\n      type: String,\n      default: 'div'\n    }\n  }); // @vue/component\n\n  var BNavbarBrand =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BNavbarBrand',\n    functional: true,\n    props: props$P,\n    render: function render(h, _ref) {\n      var props = _ref.props,\n          data = _ref.data,\n          children = _ref.children;\n      var isLink = props.to || props.href;\n      var tag = isLink ? BLink : props.tag;\n      return h(tag, a(data, {\n        staticClass: 'navbar-brand',\n        props: isLink ? pluckProps(linkProps$3, props) : {}\n      }), children);\n    }\n  });\n\n  var NAME$p = 'BNavbarToggle'; // TODO: Switch to using VBToggle directive, will reduce code footprint\n  // Events we emit on $root\n\n  var EVENT_TOGGLE$2 = 'bv::toggle::collapse'; // Events we listen to on $root\n\n  var EVENT_STATE$2 = 'bv::collapse::state'; // This private event is NOT to be documented as people should not be using it.\n\n  var EVENT_STATE_SYNC$2 = 'bv::collapse::sync::state'; // @vue/component\n\n  var BNavbarToggle =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$p,\n    mixins: [listenOnRootMixin, normalizeSlotMixin],\n    props: {\n      label: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$p, 'label');\n        }\n      },\n      target: {\n        type: String,\n        required: true\n      }\n    },\n    data: function data() {\n      return {\n        toggleState: false\n      };\n    },\n    created: function created() {\n      this.listenOnRoot(EVENT_STATE$2, this.handleStateEvt);\n      this.listenOnRoot(EVENT_STATE_SYNC$2, this.handleStateEvt);\n    },\n    methods: {\n      onClick: function onClick(evt) {\n        this.$emit('click', evt);\n\n        if (!evt.defaultPrevented) {\n          this.$root.$emit(EVENT_TOGGLE$2, this.target);\n        }\n      },\n      handleStateEvt: function handleStateEvt(id, state) {\n        if (id === this.target) {\n          this.toggleState = state;\n        }\n      }\n    },\n    render: function render(h) {\n      return h('button', {\n        class: ['navbar-toggler'],\n        attrs: {\n          type: 'button',\n          'aria-label': this.label,\n          'aria-controls': this.target,\n          'aria-expanded': this.toggleState ? 'true' : 'false'\n        },\n        on: {\n          click: this.onClick\n        }\n      }, [this.normalizeSlot('default') || h('span', {\n        class: ['navbar-toggler-icon']\n      })]);\n    }\n  });\n\n  var NavbarPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BNavbar: BNavbar,\n      BNavbarNav: BNavbarNav,\n      BNavbarBrand: BNavbarBrand,\n      BNavbarToggle: BNavbarToggle,\n      BNavToggle: BNavbarToggle\n    },\n    plugins: {\n      NavPlugin: NavPlugin,\n      CollapsePlugin: CollapsePlugin,\n      DropdownPlugin: DropdownPlugin\n    }\n  });\n\n  /**\n   * @param {number} length\n   * @return {Array}\n   */\n  var range = function range(length) {\n    return Array.apply(null, {\n      length: length\n    });\n  };\n\n  // for `<b-pagination>` and `<b-pagination-nav>`\n  // --- Constants ---\n  // Threshold of limit size when we start/stop showing ellipsis\n\n  var ELLIPSIS_THRESHOLD = 3; // Default # of buttons limit\n\n  var DEFAULT_LIMIT = 5; // --- Helper methods ---\n  // Make an array of N to N+X\n\n  var makePageArray = function makePageArray(startNumber, numberOfPages) {\n    return range(numberOfPages).map(function (val, i) {\n      return {\n        number: startNumber + i,\n        classes: null\n      };\n    });\n  }; // Sanitize the provided limit value (converting to a number)\n\n\n  var sanitizeLimit = function sanitizeLimit(val) {\n    var limit = toInteger(val) || 1;\n    return limit < 1 ? DEFAULT_LIMIT : limit;\n  }; // Sanitize the provided current page number (converting to a number)\n\n\n  var sanitizeCurrentPage = function sanitizeCurrentPage(val, numberOfPages) {\n    var page = toInteger(val) || 1;\n    return page > numberOfPages ? numberOfPages : page < 1 ? 1 : page;\n  }; // Links don't normally respond to SPACE, so we add that\n  // functionality via this handler\n\n\n  var onSpaceKey = function onSpaceKey(evt) {\n    if (evt.keyCode === KEY_CODES.SPACE) {\n      evt.preventDefault(); // Stop page from scrolling\n\n      evt.stopImmediatePropagation();\n      evt.stopPropagation(); // Trigger the click event on the link\n\n      evt.currentTarget.click();\n      return false;\n    }\n  }; // --- Props ---\n\n\n  var props$Q = {\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    value: {\n      type: [Number, String],\n      default: null,\n      validator: function validator(value)\n      /* istanbul ignore next */\n      {\n        var number = toInteger(value);\n\n        if (!isNull(value) && (isNaN(number) || number < 1)) {\n          warn('\"v-model\" value must be a number greater than \"0\"', 'BPagination');\n          return false;\n        }\n\n        return true;\n      }\n    },\n    limit: {\n      type: [Number, String],\n      default: DEFAULT_LIMIT,\n      validator: function validator(value)\n      /* istanbul ignore next */\n      {\n        var number = toInteger(value);\n\n        if (isNaN(number) || number < 1) {\n          warn('Prop \"limit\" must be a number greater than \"0\"', 'BPagination');\n          return false;\n        }\n\n        return true;\n      }\n    },\n    align: {\n      type: String,\n      default: 'left'\n    },\n    pills: {\n      type: Boolean,\n      default: false\n    },\n    hideGotoEndButtons: {\n      type: Boolean,\n      default: false\n    },\n    ariaLabel: {\n      type: String,\n      default: 'Pagination'\n    },\n    labelFirstPage: {\n      type: String,\n      default: 'Go to first page'\n    },\n    firstText: {\n      type: String,\n      default: \"\\xAB\" // '«'\n\n    },\n    firstNumber: {\n      type: Boolean,\n      default: false\n    },\n    firstClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    labelPrevPage: {\n      type: String,\n      default: 'Go to previous page'\n    },\n    prevText: {\n      type: String,\n      default: \"\\u2039\" // '‹'\n\n    },\n    prevClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    labelNextPage: {\n      type: String,\n      default: 'Go to next page'\n    },\n    nextText: {\n      type: String,\n      default: \"\\u203A\" // '›'\n\n    },\n    nextClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    labelLastPage: {\n      type: String,\n      default: 'Go to last page'\n    },\n    lastText: {\n      type: String,\n      default: \"\\xBB\" // '»'\n\n    },\n    lastNumber: {\n      type: Boolean,\n      default: false\n    },\n    lastClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    labelPage: {\n      type: [String, Function],\n      default: 'Go to page'\n    },\n    pageClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    hideEllipsis: {\n      type: Boolean,\n      default: false\n    },\n    ellipsisText: {\n      type: String,\n      default: \"\\u2026\" // '…'\n\n    },\n    ellipsisClass: {\n      type: [String, Array, Object],\n      default: null\n    }\n  }; // @vue/component\n\n  var paginationMixin = {\n    mixins: [normalizeSlotMixin],\n    model: {\n      prop: 'value',\n      event: 'input'\n    },\n    props: props$Q,\n    data: function data() {\n      var curr = toInteger(this.value);\n      return {\n        // -1 signifies no page initially selected\n        currentPage: curr > 0 ? curr : -1,\n        localNumberOfPages: 1,\n        localLimit: DEFAULT_LIMIT\n      };\n    },\n    computed: {\n      btnSize: function btnSize() {\n        return this.size ? \"pagination-\".concat(this.size) : '';\n      },\n      alignment: function alignment() {\n        var align = this.align;\n\n        if (align === 'center') {\n          return 'justify-content-center';\n        } else if (align === 'end' || align === 'right') {\n          return 'justify-content-end';\n        } else if (align === 'fill') {\n          // The page-items will also have 'flex-fill' added\n          // We add text centering to make the button appearance better in fill mode\n          return 'text-center';\n        }\n\n        return '';\n      },\n      styleClass: function styleClass() {\n        return this.pills ? 'b-pagination-pills' : '';\n      },\n      computedCurrentPage: function computedCurrentPage() {\n        return sanitizeCurrentPage(this.currentPage, this.localNumberOfPages);\n      },\n      paginationParams: function paginationParams() {\n        // Determine if we should show the the ellipsis\n        var limit = this.localLimit;\n        var numberOfPages = this.localNumberOfPages;\n        var currentPage = this.computedCurrentPage;\n        var hideEllipsis = this.hideEllipsis;\n        var firstNumber = this.firstNumber;\n        var lastNumber = this.lastNumber;\n        var showFirstDots = false;\n        var showLastDots = false;\n        var numberOfLinks = limit;\n        var startNumber = 1;\n\n        if (numberOfPages <= limit) {\n          // Special case: Less pages available than the limit of displayed pages\n          numberOfLinks = numberOfPages;\n        } else if (currentPage < limit - 1 && limit > ELLIPSIS_THRESHOLD) {\n          if (!hideEllipsis || lastNumber) {\n            showLastDots = true;\n            numberOfLinks = limit - (firstNumber ? 0 : 1);\n          }\n\n          numberOfLinks = Math.min(numberOfLinks, limit);\n        } else if (numberOfPages - currentPage + 2 < limit && limit > ELLIPSIS_THRESHOLD) {\n          if (!hideEllipsis || firstNumber) {\n            showFirstDots = true;\n            numberOfLinks = limit - (lastNumber ? 0 : 1);\n          }\n\n          startNumber = numberOfPages - numberOfLinks + 1;\n        } else {\n          // We are somewhere in the middle of the page list\n          if (limit > ELLIPSIS_THRESHOLD) {\n            numberOfLinks = limit - 2;\n            showFirstDots = !!(!hideEllipsis || firstNumber);\n            showLastDots = !!(!hideEllipsis || lastNumber);\n          }\n\n          startNumber = currentPage - Math.floor(numberOfLinks / 2);\n        } // Sanity checks\n\n        /* istanbul ignore if */\n\n\n        if (startNumber < 1) {\n          startNumber = 1;\n          showFirstDots = false;\n        } else if (startNumber > numberOfPages - numberOfLinks) {\n          startNumber = numberOfPages - numberOfLinks + 1;\n          showLastDots = false;\n        }\n\n        if (showFirstDots && firstNumber && startNumber < 4) {\n          numberOfLinks = numberOfLinks + 2;\n          startNumber = 1;\n          showFirstDots = false;\n        }\n\n        var lastPageNumber = startNumber + numberOfLinks - 1;\n\n        if (showLastDots && lastNumber && lastPageNumber > numberOfPages - 3) {\n          numberOfLinks = numberOfLinks + (lastPageNumber === numberOfPages - 2 ? 2 : 3);\n          showLastDots = false;\n        } // Special handling for lower limits (where ellipsis are never shown)\n\n\n        if (limit <= ELLIPSIS_THRESHOLD) {\n          if (firstNumber && startNumber === 1) {\n            numberOfLinks = Math.min(numberOfLinks + 1, numberOfPages, limit + 1);\n          } else if (lastNumber && numberOfPages === startNumber + numberOfLinks - 1) {\n            startNumber = Math.max(startNumber - 1, 1);\n            numberOfLinks = Math.min(numberOfPages - startNumber + 1, numberOfPages, limit + 1);\n          }\n        }\n\n        numberOfLinks = Math.min(numberOfLinks, numberOfPages - startNumber + 1);\n        return {\n          showFirstDots: showFirstDots,\n          showLastDots: showLastDots,\n          numberOfLinks: numberOfLinks,\n          startNumber: startNumber\n        };\n      },\n      pageList: function pageList() {\n        // Generates the pageList array\n        var _this$paginationParam = this.paginationParams,\n            numberOfLinks = _this$paginationParam.numberOfLinks,\n            startNumber = _this$paginationParam.startNumber;\n        var currentPage = this.computedCurrentPage; // Generate list of page numbers\n\n        var pages = makePageArray(startNumber, numberOfLinks); // We limit to a total of 3 page buttons on XS screens\n        // So add classes to page links to hide them for XS breakpoint\n        // Note: Ellipsis will also be hidden on XS screens\n        // TODO: Make this visual limit configurable based on breakpoint(s)\n\n        if (pages.length > 3) {\n          var idx = currentPage - startNumber; // THe following is a bootstrap-vue custom utility class\n\n          var classes = 'bv-d-xs-down-none';\n\n          if (idx === 0) {\n            // Keep leftmost 3 buttons visible when current page is first page\n            for (var i = 3; i < pages.length; i++) {\n              pages[i].classes = classes;\n            }\n          } else if (idx === pages.length - 1) {\n            // Keep rightmost 3 buttons visible when current page is last page\n            for (var _i = 0; _i < pages.length - 3; _i++) {\n              pages[_i].classes = classes;\n            }\n          } else {\n            // Hide all except current page, current page - 1 and current page + 1\n            for (var _i2 = 0; _i2 < idx - 1; _i2++) {\n              // hide some left button(s)\n              pages[_i2].classes = classes;\n            }\n\n            for (var _i3 = pages.length - 1; _i3 > idx + 1; _i3--) {\n              // hide some right button(s)\n              pages[_i3].classes = classes;\n            }\n          }\n        }\n\n        return pages;\n      }\n    },\n    watch: {\n      value: function value(newValue, oldValue) {\n        if (newValue !== oldValue) {\n          this.currentPage = sanitizeCurrentPage(newValue, this.localNumberOfPages);\n        }\n      },\n      currentPage: function currentPage(newValue, oldValue) {\n        if (newValue !== oldValue) {\n          // Emit null if no page selected\n          this.$emit('input', newValue > 0 ? newValue : null);\n        }\n      },\n      limit: function limit(newValue, oldValue) {\n        if (newValue !== oldValue) {\n          this.localLimit = sanitizeLimit(newValue);\n        }\n      }\n    },\n    created: function created() {\n      var _this = this;\n\n      // Set our default values in data\n      this.localLimit = sanitizeLimit(this.limit);\n      this.$nextTick(function () {\n        // Sanity check\n        _this.currentPage = _this.currentPage > _this.localNumberOfPages ? _this.localNumberOfPages : _this.currentPage;\n      });\n    },\n    methods: {\n      handleKeyNav: function handleKeyNav(evt) {\n        var keyCode = evt.keyCode,\n            shiftKey = evt.shiftKey;\n\n        if (keyCode === KEY_CODES.LEFT || keyCode === KEY_CODES.UP) {\n          evt.preventDefault();\n          shiftKey ? this.focusFirst() : this.focusPrev();\n        } else if (keyCode === KEY_CODES.RIGHT || keyCode === KEY_CODES.DOWN) {\n          evt.preventDefault();\n          shiftKey ? this.focusLast() : this.focusNext();\n        }\n      },\n      getButtons: function getButtons() {\n        // Return only buttons that are visible\n        return selectAll('a.page-link', this.$el).filter(function (btn) {\n          return isVisible(btn);\n        });\n      },\n      setBtnFocus: function setBtnFocus(btn) {\n        btn.focus();\n      },\n      focusCurrent: function focusCurrent() {\n        var _this2 = this;\n\n        // We do this in `$nextTick()` to ensure buttons have finished rendering\n        this.$nextTick(function () {\n          var btn = _this2.getButtons().find(function (el) {\n            return toInteger(getAttr(el, 'aria-posinset')) === _this2.computedCurrentPage;\n          });\n\n          if (btn && btn.focus) {\n            _this2.setBtnFocus(btn);\n          } else {\n            // Fallback if current page is not in button list\n            _this2.focusFirst();\n          }\n        });\n      },\n      focusFirst: function focusFirst() {\n        var _this3 = this;\n\n        // We do this in `$nextTick()` to ensure buttons have finished rendering\n        this.$nextTick(function () {\n          var btn = _this3.getButtons().find(function (el) {\n            return !isDisabled(el);\n          });\n\n          if (btn && btn.focus && btn !== document.activeElement) {\n            _this3.setBtnFocus(btn);\n          }\n        });\n      },\n      focusLast: function focusLast() {\n        var _this4 = this;\n\n        // We do this in `$nextTick()` to ensure buttons have finished rendering\n        this.$nextTick(function () {\n          var btn = _this4.getButtons().reverse().find(function (el) {\n            return !isDisabled(el);\n          });\n\n          if (btn && btn.focus && btn !== document.activeElement) {\n            _this4.setBtnFocus(btn);\n          }\n        });\n      },\n      focusPrev: function focusPrev() {\n        var _this5 = this;\n\n        // We do this in `$nextTick()` to ensure buttons have finished rendering\n        this.$nextTick(function () {\n          var buttons = _this5.getButtons();\n\n          var idx = buttons.indexOf(document.activeElement);\n\n          if (idx > 0 && !isDisabled(buttons[idx - 1]) && buttons[idx - 1].focus) {\n            _this5.setBtnFocus(buttons[idx - 1]);\n          }\n        });\n      },\n      focusNext: function focusNext() {\n        var _this6 = this;\n\n        // We do this in `$nextTick()` to ensure buttons have finished rendering\n        this.$nextTick(function () {\n          var buttons = _this6.getButtons();\n\n          var idx = buttons.indexOf(document.activeElement);\n          var cnt = buttons.length - 1;\n\n          if (idx < cnt && !isDisabled(buttons[idx + 1]) && buttons[idx + 1].focus) {\n            _this6.setBtnFocus(buttons[idx + 1]);\n          }\n        });\n      }\n    },\n    render: function render(h) {\n      var _this7 = this;\n\n      var buttons = [];\n      var numberOfPages = this.localNumberOfPages;\n      var pageNumbers = this.pageList.map(function (p) {\n        return p.number;\n      });\n      var disabled = this.disabled;\n      var _this$paginationParam2 = this.paginationParams,\n          showFirstDots = _this$paginationParam2.showFirstDots,\n          showLastDots = _this$paginationParam2.showLastDots;\n      var currentPage = this.computedCurrentPage;\n      var fill = this.align === 'fill'; // Helper function and flag\n\n      var isActivePage = function isActivePage(pageNum) {\n        return pageNum === currentPage;\n      };\n\n      var noCurrentPage = this.currentPage < 1; // Factory function for prev/next/first/last buttons\n\n      var makeEndBtn = function makeEndBtn(linkTo, ariaLabel, btnSlot, btnText, btnClass, pageTest, key) {\n        var isDisabled = disabled || isActivePage(pageTest) || noCurrentPage || linkTo < 1 || linkTo > numberOfPages;\n        var pageNum = linkTo < 1 ? 1 : linkTo > numberOfPages ? numberOfPages : linkTo;\n        var scope = {\n          disabled: isDisabled,\n          page: pageNum,\n          index: pageNum - 1\n        };\n        var btnContent = _this7.normalizeSlot(btnSlot, scope) || toString$1(btnText) || h();\n        var inner = h(isDisabled ? 'span' : BLink, {\n          staticClass: 'page-link',\n          props: isDisabled ? {} : _this7.linkProps(linkTo),\n          attrs: {\n            role: 'menuitem',\n            tabindex: isDisabled ? null : '-1',\n            'aria-label': ariaLabel,\n            'aria-controls': _this7.ariaControls || null,\n            'aria-disabled': isDisabled ? 'true' : null\n          },\n          on: isDisabled ? {} : {\n            click: function click(evt) {\n              _this7.onClick(linkTo, evt);\n            },\n            keydown: onSpaceKey\n          }\n        }, [btnContent]);\n        return h('li', {\n          key: key,\n          staticClass: 'page-item',\n          class: [{\n            disabled: isDisabled,\n            'flex-fill': fill\n          }, btnClass],\n          attrs: {\n            role: 'presentation',\n            'aria-hidden': isDisabled ? 'true' : null\n          }\n        }, [inner]);\n      }; // Ellipsis factory\n\n\n      var makeEllipsis = function makeEllipsis(isLast) {\n        return h('li', {\n          key: \"ellipsis-\".concat(isLast ? 'last' : 'first'),\n          staticClass: 'page-item',\n          class: ['disabled', 'bv-d-xs-down-none', fill ? 'flex-fill' : '', _this7.ellipsisClass],\n          attrs: {\n            role: 'separator'\n          }\n        }, [h('span', {\n          staticClass: 'page-link'\n        }, [_this7.normalizeSlot('ellipsis-text') || toString$1(_this7.ellipsisText) || h()])]);\n      }; // Page button factory\n\n\n      var makePageButton = function makePageButton(page, idx) {\n        var active = isActivePage(page.number) && !noCurrentPage; // Active page will have tabindex of 0, or if no current page and first page button\n\n        var tabIndex = disabled ? null : active || noCurrentPage && idx === 0 ? '0' : '-1';\n        var attrs = {\n          role: 'menuitemradio',\n          'aria-disabled': disabled ? 'true' : null,\n          'aria-controls': _this7.ariaControls || null,\n          'aria-label': isFunction(_this7.labelPage) ? _this7.labelPage(page.number) : \"\".concat(_this7.labelPage, \" \").concat(page.number),\n          'aria-checked': active ? 'true' : 'false',\n          'aria-posinset': page.number,\n          'aria-setsize': numberOfPages,\n          // ARIA \"roving tabindex\" method\n          tabindex: tabIndex\n        };\n        var btnContent = toString$1(_this7.makePage(page.number));\n        var scope = {\n          page: page.number,\n          index: page.number - 1,\n          content: btnContent,\n          active: active,\n          disabled: disabled\n        };\n        var inner = h(disabled ? 'span' : BLink, {\n          props: disabled ? {} : _this7.linkProps(page.number),\n          staticClass: 'page-link',\n          attrs: attrs,\n          on: disabled ? {} : {\n            click: function click(evt) {\n              _this7.onClick(page.number, evt);\n            },\n            keydown: onSpaceKey\n          }\n        }, [_this7.normalizeSlot('page', scope) || btnContent]);\n        return h('li', {\n          key: \"page-\".concat(page.number),\n          staticClass: 'page-item',\n          class: [{\n            disabled: disabled,\n            active: active,\n            'flex-fill': fill\n          }, page.classes, _this7.pageClass],\n          attrs: {\n            role: 'presentation'\n          }\n        }, [inner]);\n      }; // Goto first page button\n      // Don't render button when `hideGotoEndButtons` or `firstNumber` is set\n\n\n      var $firstPageBtn = h();\n\n      if (!this.firstNumber && !this.hideGotoEndButtons) {\n        $firstPageBtn = makeEndBtn(1, this.labelFirstPage, 'first-text', this.firstText, this.firstClass, 1, 'pagination-goto-first');\n      }\n\n      buttons.push($firstPageBtn); // Goto previous page button\n\n      buttons.push(makeEndBtn(currentPage - 1, this.labelPrevPage, 'prev-text', this.prevText, this.prevClass, 1, 'pagination-goto-prev')); // Show first (1) button?\n\n      buttons.push(this.firstNumber && pageNumbers[0] !== 1 ? makePageButton({\n        number: 1\n      }, 0) : h()); // First ellipsis\n\n      buttons.push(showFirstDots ? makeEllipsis(false) : h()); // Individual page links\n\n      this.pageList.forEach(function (page, idx) {\n        var offset = showFirstDots && _this7.firstNumber && pageNumbers[0] !== 1 ? 1 : 0;\n        buttons.push(makePageButton(page, idx + offset));\n      }); // Last ellipsis\n\n      buttons.push(showLastDots ? makeEllipsis(true) : h()); // Show last page button?\n\n      buttons.push(this.lastNumber && pageNumbers[pageNumbers.length - 1] !== numberOfPages ? makePageButton({\n        number: numberOfPages\n      }, -1) : h()); // Goto next page button\n\n      buttons.push(makeEndBtn(currentPage + 1, this.labelNextPage, 'next-text', this.nextText, this.nextClass, numberOfPages, 'pagination-goto-next')); // Goto last page button\n      // Don't render button when `hideGotoEndButtons` or `lastNumber` is set\n\n      var $lastPageBtn = h();\n\n      if (!this.lastNumber && !this.hideGotoEndButtons) {\n        $lastPageBtn = makeEndBtn(numberOfPages, this.labelLastPage, 'last-text', this.lastText, this.lastClass, numberOfPages, 'pagination-goto-last');\n      }\n\n      buttons.push($lastPageBtn); // Assemble the pagination buttons\n\n      var $pagination = h('ul', {\n        ref: 'ul',\n        staticClass: 'pagination',\n        class: ['b-pagination', this.btnSize, this.alignment, this.styleClass],\n        attrs: {\n          role: 'menubar',\n          'aria-disabled': disabled ? 'true' : 'false',\n          'aria-label': this.ariaLabel || null\n        },\n        on: {\n          keydown: this.handleKeyNav\n        }\n      }, buttons); // If we are `<b-pagination-nav>`, wrap in `<nav>` wrapper\n\n      if (this.isNav) {\n        return h('nav', {\n          attrs: {\n            'aria-disabled': disabled ? 'true' : null,\n            'aria-hidden': disabled ? 'true' : 'false'\n          }\n        }, [$pagination]);\n      }\n\n      return $pagination;\n    }\n  };\n\n  var NAME$q = 'BPagination';\n  var DEFAULT_PER_PAGE = 20;\n  var DEFAULT_TOTAL_ROWS = 0;\n  var props$R = {\n    size: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$q, 'size');\n      }\n    },\n    perPage: {\n      type: [Number, String],\n      default: DEFAULT_PER_PAGE\n    },\n    totalRows: {\n      type: [Number, String],\n      default: DEFAULT_TOTAL_ROWS\n    },\n    ariaControls: {\n      type: String,\n      default: null\n    }\n  }; // --- Helper functions ---\n  // Sanitize the provided per page number (converting to a number)\n\n  var sanitizePerPage = function sanitizePerPage(val) {\n    var perPage = toInteger(val) || DEFAULT_PER_PAGE;\n    return perPage < 1 ? 1 : perPage;\n  }; // Sanitize the provided total rows number (converting to a number)\n\n\n  var sanitizeTotalRows = function sanitizeTotalRows(val) {\n    var totalRows = toInteger(val) || DEFAULT_TOTAL_ROWS;\n    return totalRows < 0 ? 0 : totalRows;\n  }; // The render function is brought in via the `paginationMixin`\n  // @vue/component\n\n\n  var BPagination =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$q,\n    mixins: [paginationMixin],\n    props: props$R,\n    computed: {\n      numberOfPages: function numberOfPages() {\n        var result = Math.ceil(sanitizeTotalRows(this.totalRows) / sanitizePerPage(this.perPage));\n        return result < 1 ? 1 : result;\n      },\n      pageSizeNumberOfPages: function pageSizeNumberOfPages() {\n        // Used for watching changes to `perPage` and `numberOfPages`\n        return {\n          perPage: sanitizePerPage(this.perPage),\n          totalRows: sanitizeTotalRows(this.totalRows),\n          numberOfPages: this.numberOfPages\n        };\n      }\n    },\n    watch: {\n      pageSizeNumberOfPages: function pageSizeNumberOfPages(newVal, oldVal) {\n        if (!isUndefinedOrNull(oldVal)) {\n          if (newVal.perPage !== oldVal.perPage && newVal.totalRows === oldVal.totalRows) {\n            // If the page size changes, reset to page 1\n            this.currentPage = 1;\n          } else if (newVal.numberOfPages !== oldVal.numberOfPages && this.currentPage > newVal.numberOfPages) {\n            // If `numberOfPages` changes and is less than\n            // the `currentPage` number, reset to page 1\n            this.currentPage = 1;\n          }\n        }\n\n        this.localNumberOfPages = newVal.numberOfPages;\n      }\n    },\n    created: function created() {\n      var _this = this;\n\n      // Set the initial page count\n      this.localNumberOfPages = this.numberOfPages; // Set the initial page value\n\n      var currentPage = toInteger(this.value) || 0;\n\n      if (currentPage > 0) {\n        this.currentPage = currentPage;\n      } else {\n        this.$nextTick(function () {\n          // If this value parses to NaN or a value less than 1\n          // Trigger an initial emit of 'null' if no page specified\n          _this.currentPage = 0;\n        });\n      }\n    },\n    mounted: function mounted() {\n      // Set the initial page count\n      this.localNumberOfPages = this.numberOfPages;\n    },\n    methods: {\n      // These methods are used by the render function\n      onClick: function onClick(num, evt) {\n        var _this2 = this;\n\n        // Handle edge cases where number of pages has changed (i.e. if perPage changes)\n        // This should normally not happen, but just in case.\n        if (num > this.numberOfPages) {\n          /* istanbul ignore next */\n          num = this.numberOfPages;\n        } else if (num < 1) {\n          /* istanbul ignore next */\n          num = 1;\n        } // Update the v-model\n\n\n        this.currentPage = num; // Emit event triggered by user interaction\n\n        this.$emit('change', this.currentPage);\n        this.$nextTick(function () {\n          // Keep the current button focused if possible\n          var target = evt.target;\n\n          if (isVisible(target) && _this2.$el.contains(target) && target.focus) {\n            target.focus();\n          } else {\n            _this2.focusCurrent();\n          }\n        });\n      },\n      makePage: function makePage(pageNum) {\n        return pageNum;\n      },\n      linkProps: function linkProps() {\n        // Always '#' for pagination component\n        return {\n          href: '#'\n        };\n      }\n    }\n  });\n\n  var PaginationPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BPagination: BPagination\n    }\n  });\n\n  var NAME$r = 'BPaginationNav'; // Sanitize the provided number of pages (converting to a number)\n\n  var sanitizeNumberOfPages = function sanitizeNumberOfPages(value) {\n    var numberOfPages = toInteger(value) || 1;\n    return numberOfPages < 1 ? 1 : numberOfPages;\n  };\n  var props$S = {\n    size: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$r, 'size');\n      }\n    },\n    numberOfPages: {\n      type: [Number, String],\n      default: 1,\n      validator: function validator(value)\n      /* istanbul ignore next */\n      {\n        var num = toInteger(value);\n\n        if (isNaN(num) || num < 1) {\n          warn('Prop \"number-of-pages\" must be a number greater than \"0\"', NAME$r);\n          return false;\n        }\n\n        return true;\n      }\n    },\n    baseUrl: {\n      type: String,\n      default: '/'\n    },\n    useRouter: {\n      type: Boolean,\n      default: false\n    },\n    linkGen: {\n      type: Function,\n      default: null\n    },\n    pageGen: {\n      type: Function,\n      default: null\n    },\n    pages: {\n      // Optional array of page links\n      type: Array,\n      default: null\n    },\n    noPageDetect: {\n      // Disable auto page number detection if true\n      type: Boolean,\n      default: false\n    },\n    // router-link specific props\n    activeClass: {\n      type: String // default: undefined\n\n    },\n    exact: {\n      type: Boolean,\n      default: false\n    },\n    exactActiveClass: {\n      type: String // default: undefined\n\n    },\n    // nuxt-link specific prop(s)\n    noPrefetch: {\n      type: Boolean,\n      default: false\n    }\n  }; // The render function is brought in via the pagination mixin\n  // @vue/component\n\n  var BPaginationNav =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$r,\n    mixins: [paginationMixin],\n    props: props$S,\n    computed: {\n      // Used by render function to trigger wrapping in '<nav>' element\n      isNav: function isNav() {\n        return true;\n      },\n      computedValue: function computedValue() {\n        // Returns the value prop as a number or `null` if undefined or < 1\n        var val = toInteger(this.value);\n        return isNaN(val) || val < 1 ? null : val;\n      }\n    },\n    watch: {\n      numberOfPages: function numberOfPages() {\n        var _this = this;\n\n        this.$nextTick(function () {\n          _this.setNumberOfPages();\n        });\n      },\n      pages: function pages() {\n        var _this2 = this;\n\n        this.$nextTick(function () {\n          _this2.setNumberOfPages();\n        });\n      }\n    },\n    created: function created() {\n      this.setNumberOfPages();\n    },\n    mounted: function mounted() {\n      var _this3 = this;\n\n      if (this.$router) {\n        // We only add the watcher if vue router is detected\n        this.$watch('$route', function () {\n          _this3.$nextTick(function () {\n            requestAF(function () {\n              _this3.guessCurrentPage();\n            });\n          });\n        });\n      }\n    },\n    methods: {\n      setNumberOfPages: function setNumberOfPages() {\n        var _this4 = this;\n\n        if (isArray(this.pages) && this.pages.length > 0) {\n          this.localNumberOfPages = this.pages.length;\n        } else {\n          this.localNumberOfPages = sanitizeNumberOfPages(this.numberOfPages);\n        }\n\n        this.$nextTick(function () {\n          _this4.guessCurrentPage();\n        });\n      },\n      onClick: function onClick(pageNum, evt) {\n        var _this5 = this;\n\n        // Dont do anything if clicking the current active page\n        if (pageNum === this.currentPage) {\n          return;\n        }\n\n        requestAF(function () {\n          // Update the v-model\n          // Done in in requestAF() to allow browser to complete the\n          // native browser click handling of a link\n          _this5.currentPage = pageNum;\n\n          _this5.$emit('change', pageNum);\n        });\n        this.$nextTick(function () {\n          // Done in a nextTick() to ensure rendering complete\n          try {\n            // Emulate native link click page reloading behaviour by blurring the\n            // paginator and returning focus to the document\n            var target = evt.currentTarget || evt.target;\n            target.blur();\n          } catch (e) {}\n        });\n      },\n      getPageInfo: function getPageInfo(pageNum) {\n        if (!isArray(this.pages) || this.pages.length === 0 || isUndefined(this.pages[pageNum - 1])) {\n          var link = \"\".concat(this.baseUrl).concat(pageNum);\n          return {\n            link: this.useRouter ? {\n              path: link\n            } : link,\n            text: toString$1(pageNum)\n          };\n        }\n\n        var info = this.pages[pageNum - 1];\n\n        if (isObject(info)) {\n          var _link = info.link;\n          return {\n            // Normalize link for router use\n            link: isObject(_link) ? _link : this.useRouter ? {\n              path: _link\n            } : _link,\n            // Make sure text has a value\n            text: toString$1(info.text || pageNum)\n          };\n        } else {\n          return {\n            link: toString$1(info),\n            text: toString$1(pageNum)\n          };\n        }\n      },\n      makePage: function makePage(pageNum) {\n        var info = this.getPageInfo(pageNum);\n\n        if (this.pageGen && isFunction(this.pageGen)) {\n          return this.pageGen(pageNum, info);\n        }\n\n        return info.text;\n      },\n      makeLink: function makeLink(pageNum) {\n        var info = this.getPageInfo(pageNum);\n\n        if (this.linkGen && isFunction(this.linkGen)) {\n          return this.linkGen(pageNum, info);\n        }\n\n        return info.link;\n      },\n      linkProps: function linkProps(pageNum) {\n        var link = this.makeLink(pageNum);\n        var props = {\n          target: this.target || null,\n          rel: this.rel || null,\n          disabled: this.disabled,\n          // The following props are only used if BLink detects router\n          exact: this.exact,\n          activeClass: this.activeClass,\n          exactActiveClass: this.exactActiveClass,\n          append: this.append,\n          replace: this.replace,\n          // nuxt-link specific prop\n          noPrefetch: this.noPrefetch\n        };\n\n        if (this.useRouter || isObject(link)) {\n          props.to = link;\n        } else {\n          props.href = link;\n        }\n\n        return props;\n      },\n      resolveLink: function resolveLink() {\n        var to = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n        // Given a to (or href string), convert to normalized route-like structure\n        // Works only client side!!\n        var link;\n\n        try {\n          // Convert the `to` to a HREF via a temporary `a` tag\n          link = document.createElement('a');\n          link.href = computeHref({\n            to: to\n          }, 'a', '/', '/'); // We need to add the anchor to the document to make sure the\n          // `pathname` is correctly detected in any browser (i.e. IE)\n\n          document.body.appendChild(link); // Once href is assigned, the link will be normalized to the full URL bits\n\n          var _link2 = link,\n              pathname = _link2.pathname,\n              hash = _link2.hash,\n              search = _link2.search; // Remove link from document\n\n          document.body.removeChild(link); // Return the location in a route-like object\n\n          return {\n            path: pathname,\n            hash: hash,\n            query: parseQuery(search)\n          };\n        } catch (e) {\n          /* istanbul ignore next */\n          try {\n            link && link.parentNode && link.parentNode.removeChild(link);\n          } catch (e) {}\n          /* istanbul ignore next */\n\n\n          return {};\n        }\n      },\n      resolveRoute: function resolveRoute() {\n        var to = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n        // Given a to (or href string), convert to normalized route location structure\n        // works only when router available!!\n        try {\n          var route = this.$router.resolve(to, this.$route).route;\n          return {\n            path: route.path,\n            hash: route.hash,\n            query: route.query\n          };\n        } catch (e) {\n          /* istanbul ignore next */\n          return {};\n        }\n      },\n      guessCurrentPage: function guessCurrentPage() {\n        var guess = this.computedValue;\n        var $router = this.$router;\n        var $route = this.$route; // This section only occurs if we are client side, or server-side with $router\n\n        /* istanbul ignore else */\n\n        if (!this.noPageDetect && !guess && (isBrowser || !isBrowser && $router)) {\n          // Current route (if router available)\n          var currRoute = $router && $route ? {\n            path: $route.path,\n            hash: $route.hash,\n            query: $route.query\n          } : {}; // Current page full HREF (if client side). Can't be done as a computed prop!\n\n          var loc = isBrowser ? window.location || document.location : null;\n          var currLink = loc ? {\n            path: loc.pathname,\n            hash: loc.hash,\n            query: parseQuery(loc.search)\n          } : {}; // Loop through the possible pages looking for a match until found\n\n          for (var page = 1; !guess && page <= this.localNumberOfPages; page++) {\n            var to = this.makeLink(page);\n\n            if ($router && (isObject(to) || this.useRouter)) {\n              // Resolve the page via the $router\n              guess = looseEqual(this.resolveRoute(to), currRoute) ? page : null;\n            } else if (isBrowser) {\n              // If no $router available (or !this.useRouter when `to` is a string)\n              // we compare using parsed URIs\n              guess = looseEqual(this.resolveLink(to), currLink) ? page : null;\n            } else {\n              // probably SSR, but no $router so we can't guess, so lets break out of\n              // the loop early\n\n              /* istanbul ignore next */\n              guess = -1;\n            }\n          }\n        } // We set currentPage to 0 to trigger an $emit('input', null)\n        // As the default for this.currentPage is -1 when no value is specified\n        // And valid page numbers are greater than 0\n\n\n        this.currentPage = guess > 0 ? guess : 0;\n      }\n    }\n  });\n\n  var PaginationNavPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BPaginationNav: BPaginationNav\n    }\n  });\n\n  // Base on-demand component for tooltip / popover templates\n  var NAME$s = 'BVPopper';\n  var AttachmentMap$1 = {\n    AUTO: 'auto',\n    TOP: 'top',\n    RIGHT: 'right',\n    BOTTOM: 'bottom',\n    LEFT: 'left',\n    TOPLEFT: 'top',\n    TOPRIGHT: 'top',\n    RIGHTTOP: 'right',\n    RIGHTBOTTOM: 'right',\n    BOTTOMLEFT: 'bottom',\n    BOTTOMRIGHT: 'bottom',\n    LEFTTOP: 'left',\n    LEFTBOTTOM: 'left'\n  };\n  var OffsetMap = {\n    AUTO: 0,\n    TOPLEFT: -1,\n    TOP: 0,\n    TOPRIGHT: +1,\n    RIGHTTOP: -1,\n    RIGHT: 0,\n    RIGHTBOTTOM: +1,\n    BOTTOMLEFT: -1,\n    BOTTOM: 0,\n    BOTTOMRIGHT: +1,\n    LEFTTOP: -1,\n    LEFT: 0,\n    LEFTBOTTOM: +1\n  }; // @vue/component\n\n  var BVPopper =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$s,\n    props: {\n      target: {\n        // Element that the tooltip/popover is positioned relative to\n        type: [HTMLElement, SVGElement],\n        default: null\n      },\n      placement: {\n        type: String,\n        default: 'top'\n      },\n      fallbackPlacement: {\n        type: [String, Array],\n        default: 'flip'\n      },\n      offset: {\n        type: Number,\n        default: 0\n      },\n      boundary: {\n        // 'scrollParent', 'viewport', 'window', or Element\n        type: [String, HTMLElement],\n        default: 'scrollParent'\n      },\n      boundaryPadding: {\n        // Tooltip/popover will try and stay away from\n        // boundary edge by this many pixels\n        type: Number,\n        default: 5\n      },\n      arrowPadding: {\n        // The minimum distance (in `px`) from the edge of the\n        // tooltip/popover that the arrow can be positioned\n        type: Number,\n        default: 6\n      }\n    },\n    data: function data() {\n      return {\n        // reactive props set by parent\n        noFade: false,\n        // State related data\n        localShow: true,\n        attachment: this.getAttachment(this.placement)\n      };\n    },\n    computed: {\n      templateType: function templateType()\n      /* istanbul ignore next */\n      {\n        // Overridden by template component\n        return 'unknown';\n      },\n      popperConfig: function popperConfig() {\n        var _this = this;\n\n        var placement = this.placement;\n        return {\n          placement: this.getAttachment(placement),\n          modifiers: {\n            offset: {\n              offset: this.getOffset(placement)\n            },\n            flip: {\n              behavior: this.fallbackPlacement\n            },\n            // `arrow.element` can also be a reference to an HTML Element\n            // maybe we should make this a `$ref` in the templates?\n            arrow: {\n              element: '.arrow'\n            },\n            preventOverflow: {\n              padding: this.boundaryPadding,\n              boundariesElement: this.boundary\n            }\n          },\n          onCreate: function onCreate(data) {\n            // Handle flipping arrow classes\n            if (data.originalPlacement !== data.placement) {\n              /* istanbul ignore next: can't test in JSDOM */\n              _this.popperPlacementChange(data);\n            }\n          },\n          onUpdate: function onUpdate(data) {\n            // Handle flipping arrow classes\n            _this.popperPlacementChange(data);\n          }\n        };\n      }\n    },\n    created: function created() {\n      var _this2 = this;\n\n      // Note: We are created on-demand, and should be guaranteed that\n      // DOM is rendered/ready by the time the created hook runs\n      this.$_popper = null; // Ensure we show as we mount\n\n      this.localShow = true; // Create popper instance before shown\n\n      this.$on('show', function (el) {\n        _this2.popperCreate(el);\n      }); // Self destruct once hidden\n\n      this.$on('hidden', function () {\n        _this2.$nextTick(_this2.$destroy);\n      }); // If parent is destroyed, ensure we are destroyed\n\n      this.$parent.$once('hook:destroyed', this.$destroy);\n    },\n    beforeMount: function beforeMount() {\n      // Ensure that the attachment position is correct before mounting\n      // as our propsData is added after `new Template({...})`\n      this.attachment = this.getAttachment(this.placement);\n    },\n    mounted: function mounted() {// TBD\n    },\n    updated: function updated() {\n      // Update popper if needed\n      // TODO: Should this be a watcher on `this.popperConfig` instead?\n      this.popperUpdate();\n    },\n    beforeDestroy: function beforeDestroy() {\n      this.popperDestroy();\n    },\n    destroyed: function destroyed() {\n      // Make sure template is removed from DOM\n      var el = this.$el;\n      el && el.parentNode && el.parentNode.removeChild(el);\n    },\n    methods: {\n      // \"Public\" method to trigger hide template\n      hide: function hide() {\n        this.localShow = false;\n      },\n      // Private\n      getAttachment: function getAttachment(placement) {\n        return AttachmentMap$1[String(placement).toUpperCase()] || 'auto';\n      },\n      getOffset: function getOffset(placement) {\n        if (!this.offset) {\n          // Could set a ref for the arrow element\n          var arrow = this.$refs.arrow || select('.arrow', this.$el);\n          var arrowOffset = (parseFloat(getCS(arrow).width) || 0) + (parseFloat(this.arrowPadding) || 0);\n\n          switch (OffsetMap[String(placement).toUpperCase()] || 0) {\n            case +1:\n              /* istanbul ignore next: can't test in JSDOM */\n              return \"+50%p - \".concat(arrowOffset, \"px\");\n\n            case -1:\n              /* istanbul ignore next: can't test in JSDOM */\n              return \"-50%p + \".concat(arrowOffset, \"px\");\n\n            default:\n              return 0;\n          }\n        }\n        /* istanbul ignore next */\n\n\n        return this.offset;\n      },\n      popperCreate: function popperCreate(el) {\n        this.popperDestroy(); // We use `el` rather than `this.$el` just in case the original\n        // mountpoint root element type was changed by the template\n\n        this.$_popper = new Popper(this.target, el, this.popperConfig);\n      },\n      popperDestroy: function popperDestroy() {\n        this.$_popper && this.$_popper.destroy();\n        this.$_popper = null;\n      },\n      popperUpdate: function popperUpdate() {\n        this.$_popper && this.$_popper.scheduleUpdate();\n      },\n      popperPlacementChange: function popperPlacementChange(data) {\n        // Callback used by popper to adjust the arrow placement\n        this.attachment = this.getAttachment(data.placement);\n      },\n      renderTemplate: function renderTemplate(h)\n      /* istanbul ignore next */\n      {\n        // Will be overridden by templates\n        return h('div');\n      }\n    },\n    render: function render(h) {\n      var _this3 = this;\n\n      // Note: `show` and 'fade' classes are only appled during transition\n      return h(BVTransition, {\n        // Transitions as soon as mounted\n        props: {\n          appear: true,\n          noFade: this.noFade\n        },\n        on: {\n          // Events used by parent component/instance\n          beforeEnter: function beforeEnter(el) {\n            return _this3.$emit('show', el);\n          },\n          afterEnter: function afterEnter(el) {\n            return _this3.$emit('shown', el);\n          },\n          beforeLeave: function beforeLeave(el) {\n            return _this3.$emit('hide', el);\n          },\n          afterLeave: function afterLeave(el) {\n            return _this3.$emit('hidden', el);\n          }\n        }\n      }, [this.localShow ? this.renderTemplate(h) : h()]);\n    }\n  });\n\n  var NAME$t = 'BVTooltipTemplate'; // @vue/component\n\n  var BVTooltipTemplate =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$t,\n    extends: BVPopper,\n    mixins: [scopedStyleAttrsMixin],\n    props: {\n      // Other non-reactive (while open) props are pulled in from BVPopper\n      id: {\n        type: String,\n        default: null\n      },\n      html: {\n        // Used only by the directive versions\n        type: Boolean,\n        default: false\n      }\n    },\n    data: function data() {\n      // We use data, rather than props to ensure reactivity\n      // Parent component will directly set this data\n      return {\n        title: '',\n        content: '',\n        variant: null,\n        customClass: null,\n        interactive: true\n      };\n    },\n    computed: {\n      templateType: function templateType() {\n        return 'tooltip';\n      },\n      templateClasses: function templateClasses() {\n        var _ref;\n\n        return [(_ref = {\n          // Disables pointer events to hide the tooltip when the user\n          // hovers over its content\n          noninteractive: !this.interactive\n        }, _defineProperty(_ref, \"b-\".concat(this.templateType, \"-\").concat(this.variant), this.variant), _defineProperty(_ref, \"bs-\".concat(this.templateType, \"-\").concat(this.attachment), this.attachment), _ref), this.customClass];\n      },\n      templateAttributes: function templateAttributes() {\n        return _objectSpread2({\n          id: this.id,\n          role: 'tooltip',\n          tabindex: '-1'\n        }, this.scopedStyleAttrs);\n      },\n      templateListeners: function templateListeners() {\n        var _this = this;\n\n        // Used for hover/focus trigger listeners\n        return {\n          mouseenter: function mouseenter(evt) {\n            /* istanbul ignore next: difficult to test in JSDOM */\n            _this.$emit('mouseenter', evt);\n          },\n          mouseleave: function mouseleave(evt) {\n            /* istanbul ignore next: difficult to test in JSDOM */\n            _this.$emit('mouseleave', evt);\n          },\n          focusin: function focusin(evt) {\n            /* istanbul ignore next: difficult to test in JSDOM */\n            _this.$emit('focusin', evt);\n          },\n          focusout: function focusout(evt) {\n            /* istanbul ignore next: difficult to test in JSDOM */\n            _this.$emit('focusout', evt);\n          }\n        };\n      }\n    },\n    methods: {\n      renderTemplate: function renderTemplate(h) {\n        // Title can be a scoped slot function\n        var $title = isFunction(this.title) ? this.title({}) : isUndefinedOrNull(this.title) ? h() : this.title; // Directive versions only\n\n        var domProps = this.html && !isFunction(this.title) ? {\n          innerHTML: this.title\n        } : {};\n        return h('div', {\n          staticClass: 'tooltip b-tooltip',\n          class: this.templateClasses,\n          attrs: this.templateAttributes,\n          on: this.templateListeners\n        }, [h('div', {\n          ref: 'arrow',\n          staticClass: 'arrow'\n        }), h('div', {\n          staticClass: 'tooltip-inner',\n          domProps: domProps\n        }, [$title])]);\n      }\n    }\n  });\n\n  var NAME$u = 'BVTooltip'; // Modal container selector for appending tooltip/popover\n\n  var MODAL_SELECTOR = '.modal-content'; // Modal `$root` hidden event\n\n  var MODAL_CLOSE_EVENT = 'bv::modal::hidden'; // For dropdown sniffing\n\n  var DROPDOWN_CLASS = 'dropdown';\n  var DROPDOWN_OPEN_SELECTOR = '.dropdown-menu.show'; // Data specific to popper and template\n  // We don't use props, as we need reactivity (we can't pass reactive props)\n\n  var templateData = {\n    // Text string or Scoped slot function\n    title: '',\n    // Text string or Scoped slot function\n    content: '',\n    // String\n    variant: null,\n    // String, Array, Object\n    customClass: null,\n    // String or array of Strings (overwritten by BVPopper)\n    triggers: '',\n    // String (overwritten by BVPopper)\n    placement: 'auto',\n    // String or array of strings\n    fallbackPlacement: 'flip',\n    // Element or Component reference (or function that returns element) of\n    // the element that will have the trigger events bound, and is also\n    // default element for positioning\n    target: null,\n    // HTML ID, Element or Component reference\n    container: null,\n    // 'body'\n    // Boolean\n    noFade: false,\n    // 'scrollParent', 'viewport', 'window', Element, or Component reference\n    boundary: 'scrollParent',\n    // Tooltip/popover will try and stay away from\n    // boundary edge by this many pixels (Number)\n    boundaryPadding: 5,\n    // Arrow offset (Number)\n    offset: 0,\n    // Hover/focus delay (Number or Object)\n    delay: 0,\n    // Arrow of Tooltip/popover will try and stay away from\n    // the edge of tooltip/popover edge by this many pixels\n    arrowPadding: 6,\n    // Interactive state (Boolean)\n    interactive: true,\n    // Disabled state (Boolean)\n    disabled: false,\n    // ID to use for tooltip/popover\n    id: null,\n    // Flag used by directives only, for HTML content\n    html: false\n  }; // @vue/component\n\n  var BVTooltip =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$u,\n    props: {// None\n    },\n    data: function data() {\n      return _objectSpread2({}, templateData, {\n        // State management data\n        activeTrigger: {\n          // manual: false,\n          hover: false,\n          click: false,\n          focus: false\n        },\n        localShow: false\n      });\n    },\n    computed: {\n      templateType: function templateType() {\n        // Overwritten by BVPopover\n        return 'tooltip';\n      },\n      computedId: function computedId() {\n        return this.id || \"__bv_\".concat(this.templateType, \"_\").concat(this._uid, \"__\");\n      },\n      computedDelay: function computedDelay() {\n        // Normalizes delay into object form\n        var delay = {\n          show: 0,\n          hide: 0\n        };\n\n        if (isPlainObject(this.delay)) {\n          delay.show = Math.max(parseInt(this.delay.show, 10) || 0, 0);\n          delay.hide = Math.max(parseInt(this.delay.hide, 10) || 0, 0);\n        } else if (isNumber(this.delay) || isString(this.delay)) {\n          delay.show = delay.hide = Math.max(parseInt(this.delay, 10) || 0, 0);\n        }\n\n        return delay;\n      },\n      computedTriggers: function computedTriggers() {\n        // Returns the triggers in sorted array form\n        // TODO: Switch this to object form for easier lookup\n        return concat(this.triggers).filter(Boolean).join(' ').trim().toLowerCase().split(/\\s+/).sort();\n      },\n      isWithActiveTrigger: function isWithActiveTrigger() {\n        for (var trigger in this.activeTrigger) {\n          if (this.activeTrigger[trigger]) {\n            return true;\n          }\n        }\n\n        return false;\n      },\n      computedTemplateData: function computedTemplateData() {\n        return {\n          title: this.title,\n          content: this.content,\n          variant: this.variant,\n          customClass: this.customClass,\n          noFade: this.noFade,\n          interactive: this.interactive\n        };\n      }\n    },\n    watch: {\n      computedTriggers: function computedTriggers(newTriggers, oldTriggers) {\n        var _this = this;\n\n        // Triggers have changed, so re-register them\n\n        /* istanbul ignore next */\n        if (!looseEqual(newTriggers, oldTriggers)) {\n          this.$nextTick(function () {\n            // Disable trigger listeners\n            _this.unListen(); // Clear any active triggers that are no longer in the list of triggers\n\n\n            oldTriggers.forEach(function (trigger) {\n              if (!arrayIncludes(newTriggers, trigger)) {\n                if (_this.activeTrigger[trigger]) {\n                  _this.activeTrigger[trigger] = false;\n                }\n              }\n            }); // Re-enable the trigger listeners\n\n            _this.listen();\n          });\n        }\n      },\n      computedTemplateData: function computedTemplateData() {\n        // If any of the while open reactive \"props\" change,\n        // ensure that the template updates accordingly\n        this.handleTemplateUpdate();\n      },\n      disabled: function disabled(newVal) {\n        newVal ? this.disable() : this.enable();\n      }\n    },\n    created: function created() {\n      var _this2 = this;\n\n      // Create non-reactive properties\n      this.$_tip = null;\n      this.$_hoverTimeout = null;\n      this.$_hoverState = '';\n      this.$_visibleInterval = null;\n      this.$_enabled = !this.disabled;\n      this.$_noop = noop.bind(this); // Destroy ourselves when the parent is destroyed\n\n      if (this.$parent) {\n        this.$parent.$once('hook:beforeDestroy', this.$destroy);\n      }\n\n      this.$nextTick(function () {\n        var target = _this2.getTarget();\n\n        if (target && contains(document.body, target)) {\n          // Copy the parent's scoped style attribute\n          _this2.scopeId = getScopeId(_this2.$parent); // Set up all trigger handlers and listeners\n\n          _this2.listen();\n        } else {\n          /* istanbul ignore next */\n          warn('Unable to find target element in document.', _this2.templateType);\n        }\n      });\n    },\n    updated: function updated()\n    /* istanbul ignore next */\n    {\n      // Usually called when the slots/data changes\n      this.$nextTick(this.handleTemplateUpdate);\n    },\n    deactivated: function deactivated()\n    /* istanbul ignore next */\n    {\n      // In a keepalive that has been deactivated, so hide\n      // the tooltip/popover if it is showing\n      this.forceHide();\n    },\n    beforeDestroy: function beforeDestroy()\n    /* istanbul ignore next */\n    {\n      // Remove all handler/listeners\n      this.unListen();\n      this.setWhileOpenListeners(false); // Clear any timeouts/intervals\n\n      this.clearHoverTimeout();\n      this.clearVisibilityInterval(); // Destroy the template\n\n      this.destroyTemplate();\n    },\n    methods: {\n      // --- Methods for creating and destroying the template ---\n      getTemplate: function getTemplate() {\n        // Overridden by BVPopover\n        return BVTooltipTemplate;\n      },\n      updateData: function updateData() {\n        var _this3 = this;\n\n        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        // Method for updating popper/template data\n        // We only update data if it exists, and has not changed\n        var titleUpdated = false;\n        keys(templateData).forEach(function (prop) {\n          if (!isUndefined(data[prop]) && _this3[prop] !== data[prop]) {\n            _this3[prop] = data[prop];\n\n            if (prop === 'title') {\n              titleUpdated = true;\n            }\n          }\n        });\n\n        if (titleUpdated && this.localShow) {\n          // If the title has updated, we may need to handle the title\n          // attribute on the trigger target. We only do this while the\n          // template is open\n          this.fixTitle();\n        }\n      },\n      createTemplateAndShow: function createTemplateAndShow() {\n        // Creates the template instance and show it\n        var container = this.getContainer();\n        var Template = this.getTemplate();\n        var $tip = this.$_tip = new Template({\n          parent: this,\n          // The following is not reactive to changes in the props data\n          propsData: {\n            // These values cannot be changed while template is showing\n            id: this.computedId,\n            html: this.html,\n            placement: this.placement,\n            fallbackPlacement: this.fallbackPlacement,\n            target: this.getPlacementTarget(),\n            boundary: this.getBoundary(),\n            // Ensure the following are integers\n            offset: parseInt(this.offset, 10) || 0,\n            arrowPadding: parseInt(this.arrowPadding, 10) || 0,\n            boundaryPadding: parseInt(this.boundaryPadding, 10) || 0\n          }\n        }); // We set the initial reactive data (values that can be changed while open)\n\n        this.handleTemplateUpdate(); // Template transition phase events (handled once only)\n        // When the template has mounted, but not visibly shown yet\n\n        $tip.$once('show', this.onTemplateShow); // When the template has completed showing\n\n        $tip.$once('shown', this.onTemplateShown); // When the template has started to hide\n\n        $tip.$once('hide', this.onTemplateHide); // When the template has completed hiding\n\n        $tip.$once('hidden', this.onTemplateHidden); // When the template gets destroyed for any reason\n\n        $tip.$once('hook:destroyed', this.destroyTemplate); // Convenience events from template\n        // To save us from manually adding/removing DOM\n        // listeners to tip element when it is open\n\n        $tip.$on('focusin', this.handleEvent);\n        $tip.$on('focusout', this.handleEvent);\n        $tip.$on('mouseenter', this.handleEvent);\n        $tip.$on('mouseleave', this.handleEvent); // Mount (which triggers the `show`)\n\n        $tip.$mount(container.appendChild(document.createElement('div'))); // Template will automatically remove its markup from DOM when hidden\n      },\n      hideTemplate: function hideTemplate() {\n        // Trigger the template to start hiding\n        // The template will emit the `hide` event after this and\n        // then emit the `hidden` event once it is fully hidden\n        // The `hook:destroyed` will also be called (safety measure)\n        this.$_tip && this.$_tip.hide(); // Clear out any stragging active triggers\n\n        this.clearActiveTriggers(); // Reset the hover state\n\n        this.$_hoverState = '';\n      },\n      // Destroy the template instance and reset state\n      destroyTemplate: function destroyTemplate() {\n        this.setWhileOpenListeners(false);\n        this.clearHoverTimeout();\n        this.$_hoverState = '';\n        this.clearActiveTriggers();\n        this.localPlacementTarget = null;\n\n        try {\n          this.$_tip && this.$_tip.$destroy();\n        } catch (_unused) {}\n\n        this.$_tip = null;\n        this.removeAriaDescribedby();\n        this.restoreTitle();\n        this.localShow = false;\n      },\n      getTemplateElement: function getTemplateElement() {\n        return this.$_tip ? this.$_tip.$el : null;\n      },\n      handleTemplateUpdate: function handleTemplateUpdate() {\n        var _this4 = this;\n\n        // Update our template title/content \"props\"\n        // So that the template updates accordingly\n        var $tip = this.$_tip;\n\n        if ($tip) {\n          var props = ['title', 'content', 'variant', 'customClass', 'noFade', 'interactive']; // Only update the values if they have changed\n\n          props.forEach(function (prop) {\n            if ($tip[prop] !== _this4[prop]) {\n              $tip[prop] = _this4[prop];\n            }\n          });\n        }\n      },\n      // --- Show/Hide handlers ---\n      // Show the tooltip\n      show: function show() {\n        var target = this.getTarget();\n\n        if (!target || !contains(document.body, target) || !isVisible(target) || this.dropdownOpen() || (isUndefinedOrNull(this.title) || this.title === '') && (isUndefinedOrNull(this.content) || this.content === '')) {\n          // If trigger element isn't in the DOM or is not visible, or\n          // is on an open dropdown toggle, or has no content, then\n          // we exit without showing\n          return;\n        } // If tip already exists, exit early\n\n\n        if (this.$_tip || this.localShow) {\n          /* istanbul ignore next */\n          return;\n        } // In the process of showing\n\n\n        this.localShow = true; // Create a cancelable BvEvent\n\n        var showEvt = this.buildEvent('show', {\n          cancelable: true\n        });\n        this.emitEvent(showEvt); // Don't show if event cancelled\n\n        /* istanbul ignore next: ignore for now */\n\n        if (showEvt.defaultPrevented) {\n          // Destroy the template (if for some reason it was created)\n\n          /* istanbul ignore next */\n          this.destroyTemplate();\n          /* istanbul ignore next */\n\n          return;\n        } // Fix the title attribute on target\n\n\n        this.fixTitle(); // Set aria-describedby on target\n\n        this.addAriaDescribedby(); // Create and show the tooltip\n\n        this.createTemplateAndShow();\n      },\n      hide: function hide() {\n        var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        // Hide the tooltip\n        var tip = this.getTemplateElement();\n\n        if (!tip || !this.localShow) {\n          /* istanbul ignore next */\n          this.restoreTitle();\n          /* istanbul ignore next */\n\n          return;\n        } // Emit cancelable BvEvent 'hide'\n        // We disable cancelling if `force` is true\n\n\n        var hideEvt = this.buildEvent('hide', {\n          cancelable: !force\n        });\n        this.emitEvent(hideEvt);\n        /* istanbul ignore next: ignore for now */\n\n        if (hideEvt.defaultPrevented) {\n          // Don't hide if event cancelled\n\n          /* istanbul ignore next */\n          return;\n        } // Tell the template to hide\n\n\n        this.hideTemplate();\n      },\n      forceHide: function forceHide() {\n        // Forcefully hides/destroys the template, regardless of any active triggers\n        var tip = this.getTemplateElement();\n\n        if (!tip || !this.localShow) {\n          /* istanbul ignore next */\n          return;\n        } // Disable while open listeners/watchers\n        // This is also done in the template `hide` evt handler\n\n\n        this.setWhileOpenListeners(false); // Clear any hover enter/leave event\n\n        this.clearHoverTimeout();\n        this.$_hoverState = '';\n        this.clearActiveTriggers(); // Disable the fade animation on the template\n\n        if (this.$_tip) {\n          this.$_tip.noFade = true;\n        } // Hide the tip (with force = true)\n\n\n        this.hide(true);\n      },\n      enable: function enable() {\n        this.$_enabled = true; // Create a non-cancelable BvEvent\n\n        this.emitEvent(this.buildEvent('enabled'));\n      },\n      disable: function disable() {\n        this.$_enabled = false; // Create a non-cancelable BvEvent\n\n        this.emitEvent(this.buildEvent('disabled'));\n      },\n      // --- Handlers for template events ---\n      // When template is inserted into DOM, but not yet shown\n      onTemplateShow: function onTemplateShow() {\n        // Enable while open listeners/watchers\n        this.setWhileOpenListeners(true);\n      },\n      // When template show transition completes\n      onTemplateShown: function onTemplateShown() {\n        var prevHoverState = this.$_hoverState;\n        this.$_hoverState = '';\n\n        if (prevHoverState === 'out') {\n          this.leave(null);\n        } // Emit a non-cancelable BvEvent 'shown'\n\n\n        this.emitEvent(this.buildEvent('shown'));\n      },\n      // When template is starting to hide\n      onTemplateHide: function onTemplateHide() {\n        // Disable while open listeners/watchers\n        this.setWhileOpenListeners(false);\n      },\n      // When template has completed closing (just before it self destructs)\n      onTemplateHidden: function onTemplateHidden() {\n        // Destroy the template\n        this.destroyTemplate(); // Emit a non-cancelable BvEvent 'shown'\n\n        this.emitEvent(this.buildEvent('hidden'));\n      },\n      // --- Utility methods ---\n      getTarget: function getTarget() {\n        // Handle case where target may be a component ref\n        var target = this.target ? this.target.$el || this.target : null; // If an ID\n\n        target = isString(target) ? getById(target.replace(/^#/, '')) : target; // If a function\n\n        target = isFunction(target) ? target() : target; // If an element ref\n\n        return isElement(target) ? target : null;\n      },\n      getPlacementTarget: function getPlacementTarget() {\n        // This is the target that the tooltip will be placed on, which may not\n        // necessarily be the same element that has the trigger event listeners\n        // For now, this is the same as target\n        // TODO:\n        //   Add in child selector support\n        //   Add in visibility checks for this element\n        //   Fallback to target if not found\n        return this.getTarget();\n      },\n      getTargetId: function getTargetId() {\n        // Returns the ID of the trigger element\n        var target = this.getTarget();\n        return target && target.id ? target.id : null;\n      },\n      getContainer: function getContainer() {\n        // Handle case where container may be a component ref\n        var container = this.container ? this.container.$el || this.container : false;\n        var body = document.body;\n        var target = this.getTarget(); // If we are in a modal, we append to the modal instead\n        // of body, unless a container is specified\n        // TODO:\n        //   Template should periodically check to see if it is in dom\n        //   And if not, self destruct (if container got v-if'ed out of DOM)\n        //   Or this could possibly be part of the visibility check\n\n        return container === false ? closest(MODAL_SELECTOR, target) || body : isString(container) ? getById(container.replace(/^#/, '')) || body : body;\n      },\n      getBoundary: function getBoundary() {\n        return this.boundary ? this.boundary.$el || this.boundary : 'scrollParent';\n      },\n      isInModal: function isInModal() {\n        var target = this.getTarget();\n        return target && closest(MODAL_SELECTOR, target);\n      },\n      isDropdown: function isDropdown() {\n        // Returns true if trigger is a dropdown\n        var target = this.getTarget();\n        return target && hasClass(target, DROPDOWN_CLASS);\n      },\n      dropdownOpen: function dropdownOpen() {\n        // Returns true if trigger is a dropdown and the dropdown menu is open\n        var target = this.getTarget();\n        return this.isDropdown() && target && select(DROPDOWN_OPEN_SELECTOR, target);\n      },\n      clearHoverTimeout: function clearHoverTimeout() {\n        if (this.$_hoverTimeout) {\n          clearTimeout(this.$_hoverTimeout);\n          this.$_hoverTimeout = null;\n        }\n      },\n      clearVisibilityInterval: function clearVisibilityInterval() {\n        if (this.$_visibleInterval) {\n          clearInterval(this.$_visibleInterval);\n          this.$_visibleInterval = null;\n        }\n      },\n      clearActiveTriggers: function clearActiveTriggers() {\n        for (var trigger in this.activeTrigger) {\n          this.activeTrigger[trigger] = false;\n        }\n      },\n      addAriaDescribedby: function addAriaDescribedby() {\n        // Add aria-describedby on trigger element, without removing any other IDs\n        var target = this.getTarget();\n        var desc = getAttr(target, 'aria-describedby') || '';\n        desc = desc.split(/\\s+/).concat(this.computedId).join(' ').trim(); // Update/add aria-described by\n\n        setAttr(target, 'aria-describedby', desc);\n      },\n      removeAriaDescribedby: function removeAriaDescribedby() {\n        var _this5 = this;\n\n        // Remove aria-describedby on trigger element, without removing any other IDs\n        var target = this.getTarget();\n        var desc = getAttr(target, 'aria-describedby') || '';\n        desc = desc.split(/\\s+/).filter(function (d) {\n          return d !== _this5.computedId;\n        }).join(' ').trim(); // Update or remove aria-describedby\n\n        if (desc) {\n          /* istanbul ignore next */\n          setAttr(target, 'aria-describedby', desc);\n        } else {\n          removeAttr(target, 'aria-describedby');\n        }\n      },\n      fixTitle: function fixTitle() {\n        // If the target has a title attribute, null it out and\n        // store on data-title\n        var target = this.getTarget();\n\n        if (target && getAttr(target, 'title')) {\n          // We only update title attribute if it has a value\n          setAttr(target, 'data-original-title', getAttr(target, 'title') || '');\n          setAttr(target, 'title', '');\n        }\n      },\n      restoreTitle: function restoreTitle() {\n        // If target had a title, restore the title attribute\n        // and remove the data-title attribute\n        var target = this.getTarget();\n\n        if (target && hasAttr(target, 'data-original-title')) {\n          setAttr(target, 'title', getAttr(target, 'data-original-title') || '');\n          removeAttr(target, 'data-original-title');\n        }\n      },\n      // --- BvEvent helpers ---\n      buildEvent: function buildEvent(type) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        // Defaults to a non-cancellable event\n        return new BvEvent(type, _objectSpread2({\n          cancelable: false,\n          target: this.getTarget(),\n          relatedTarget: this.getTemplateElement() || null,\n          componentId: this.computedId,\n          vueTarget: this\n        }, options));\n      },\n      emitEvent: function emitEvent(bvEvt) {\n        // Emits a BvEvent on $root and this instance\n        var evtName = bvEvt.type;\n        var $root = this.$root;\n\n        if ($root && $root.$emit) {\n          // Emit an event on $root\n          $root.$emit(\"bv::\".concat(this.templateType, \"::\").concat(evtName), bvEvt);\n        }\n\n        this.$emit(evtName, bvEvt);\n      },\n      // --- Event handler setup methods ---\n      listen: function listen() {\n        var _this6 = this;\n\n        // Enable trigger event handlers\n        var el = this.getTarget();\n\n        if (!el) {\n          /* istanbul ignore next */\n          return;\n        } // Listen for global show/hide events\n\n\n        this.setRootListener(true); // Set up our listeners on the target trigger element\n\n        this.computedTriggers.forEach(function (trigger) {\n          if (trigger === 'click') {\n            eventOn(el, 'click', _this6.handleEvent, EVENT_OPTIONS_NO_CAPTURE);\n          } else if (trigger === 'focus') {\n            eventOn(el, 'focusin', _this6.handleEvent, EVENT_OPTIONS_NO_CAPTURE);\n            eventOn(el, 'focusout', _this6.handleEvent, EVENT_OPTIONS_NO_CAPTURE);\n          } else if (trigger === 'blur') {\n            // Used to close $tip when element looses focus\n\n            /* istanbul ignore next */\n            eventOn(el, 'focusout', _this6.handleEvent, EVENT_OPTIONS_NO_CAPTURE);\n          } else if (trigger === 'hover') {\n            eventOn(el, 'mouseenter', _this6.handleEvent, EVENT_OPTIONS_NO_CAPTURE);\n            eventOn(el, 'mouseleave', _this6.handleEvent, EVENT_OPTIONS_NO_CAPTURE);\n          }\n        }, this);\n      },\n      unListen: function unListen()\n      /* istanbul ignore next */\n      {\n        var _this7 = this;\n\n        // Remove trigger event handlers\n        var events = ['click', 'focusin', 'focusout', 'mouseenter', 'mouseleave'];\n        var target = this.getTarget(); // Stop listening for global show/hide/enable/disable events\n\n        this.setRootListener(false); // Clear out any active target listeners\n\n        events.forEach(function (evt) {\n          target && eventOff(target, evt, _this7.handleEvent, EVENT_OPTIONS_NO_CAPTURE);\n        }, this);\n      },\n      setRootListener: function setRootListener(on) {\n        // Listen for global `bv::{hide|show}::{tooltip|popover}` hide request event\n        var $root = this.$root;\n\n        if ($root) {\n          var method = on ? '$on' : '$off';\n          var type = this.templateType;\n          $root[method](\"bv::hide::\".concat(type), this.doHide);\n          $root[method](\"bv::show::\".concat(type), this.doShow);\n          $root[method](\"bv::disable::\".concat(type), this.doDisable);\n          $root[method](\"bv::enable::\".concat(type), this.doEnable);\n        }\n      },\n      setWhileOpenListeners: function setWhileOpenListeners(on) {\n        // Events that are only registered when the template is showing\n        // Modal close events\n        this.setModalListener(on); // Dropdown open events (if we are attached to a dropdown)\n\n        this.setDropdownListener(on); // Periodic $element visibility check\n        // For handling when tip target is in <keepalive>, tabs, carousel, etc\n\n        this.visibleCheck(on); // On-touch start listeners\n\n        this.setOnTouchStartListener(on);\n      },\n      // Handler for periodic visibility check\n      visibleCheck: function visibleCheck(on) {\n        var _this8 = this;\n\n        this.clearVisibilityInterval();\n        var target = this.getTarget();\n        var tip = this.getTemplateElement();\n\n        if (on) {\n          this.$_visibleInterval = setInterval(function () {\n            if (tip && _this8.localShow && (!target.parentNode || !isVisible(target))) {\n              // Target element is no longer visible or not in DOM, so force-hide the tooltip\n              _this8.forceHide();\n            }\n          }, 100);\n        }\n      },\n      setModalListener: function setModalListener(on) {\n        // Handle case where tooltip/target is in a modal\n        if (this.isInModal()) {\n          // We can listen for modal hidden events on `$root`\n          this.$root[on ? '$on' : '$off'](MODAL_CLOSE_EVENT, this.forceHide);\n        }\n      },\n      setOnTouchStartListener: function setOnTouchStartListener(on)\n      /* istanbul ignore next: JSDOM doesn't support `ontouchstart` */\n      {\n        var _this9 = this;\n\n        // If this is a touch-enabled device we add extra empty\n        // `mouseover` listeners to the body's immediate children\n        // Only needed because of broken event delegation on iOS\n        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n        if ('ontouchstart' in document.documentElement) {\n          from(document.body.children).forEach(function (el) {\n            eventOnOff(on, el, 'mouseover', _this9.$_noop);\n          });\n        }\n      },\n      setDropdownListener: function setDropdownListener(on) {\n        var target = this.getTarget();\n\n        if (!target || !this.$root || !this.isDropdown) {\n          return;\n        } // We can listen for dropdown shown events on its instance\n        // TODO:\n        //   We could grab the ID from the dropdown, and listen for\n        //   $root events for that particular dropdown id\n        //   Dropdown shown and hidden events will need to emit\n        //   Note: Dropdown auto-ID happens in a `$nextTick()` after mount\n        //         So the ID lookup would need to be done in a `$nextTick()`\n\n\n        if (target.__vue__) {\n          target.__vue__[on ? '$on' : '$off']('shown', this.forceHide);\n        }\n      },\n      // --- Event handlers ---\n      handleEvent: function handleEvent(evt) {\n        // General trigger event handler\n        // target is the trigger element\n        var target = this.getTarget();\n\n        if (!target || isDisabled(target) || !this.$_enabled || this.dropdownOpen()) {\n          // If disabled or not enabled, or if a dropdown that is open, don't do anything\n          // If tip is shown before element gets disabled, then tip will not\n          // close until no longer disabled or forcefully closed\n          return;\n        }\n\n        var type = evt.type;\n        var triggers = this.computedTriggers;\n\n        if (type === 'click' && arrayIncludes(triggers, 'click')) {\n          this.click(evt);\n        } else if (type === 'mouseenter' && arrayIncludes(triggers, 'hover')) {\n          // `mouseenter` is a non-bubbling event\n          this.enter(evt);\n        } else if (type === 'focusin' && arrayIncludes(triggers, 'focus')) {\n          // `focusin` is a bubbling event\n          // `evt` includes `relatedTarget` (element loosing focus)\n          this.enter(evt);\n        } else if (type === 'focusout' && (arrayIncludes(triggers, 'focus') || arrayIncludes(triggers, 'blur')) || type === 'mouseleave' && arrayIncludes(triggers, 'hover')) {\n          // `focusout` is a bubbling event\n          // `mouseleave` is a non-bubbling event\n          // `tip` is the template (will be null if not open)\n          var tip = this.getTemplateElement(); // `evtTarget` is the element which is loosing focus/hover and\n\n          var evtTarget = evt.target; // `relatedTarget` is the element gaining focus/hover\n\n          var relatedTarget = evt.relatedTarget;\n          /* istanbul ignore next */\n\n          if ( // From tip to target\n          tip && contains(tip, evtTarget) && contains(target, relatedTarget) || // From target to tip\n          tip && contains(target, evtTarget) && contains(tip, relatedTarget) || // Within tip\n          tip && contains(tip, evtTarget) && contains(tip, relatedTarget) || // Within target\n          contains(target, evtTarget) && contains(target, relatedTarget)) {\n            // If focus/hover moves within `tip` and `target`, don't trigger a leave\n            return;\n          } // Otherwise trigger a leave\n\n\n          this.leave(evt);\n        }\n      },\n      doHide: function doHide(id) {\n        // Programmatically hide tooltip or popover\n        if (!id || this.getTargetId() === id || this.computedId === id) {\n          // Close all tooltips or popovers, or this specific tip (with ID)\n          this.forceHide();\n        }\n      },\n      doShow: function doShow(id) {\n        // Programmatically show tooltip or popover\n        if (!id || this.getTargetId() === id || this.computedId === id) {\n          // Open all tooltips or popovers, or this specific tip (with ID)\n          this.show();\n        }\n      },\n      doDisable: function doDisable(id)\n      /*istanbul ignore next: ignore for now */\n      {\n        // Programmatically disable tooltip or popover\n        if (!id || this.getTargetId() === id || this.computedId === id) {\n          // Disable all tooltips or popovers (no ID), or this specific tip (with ID)\n          this.disable();\n        }\n      },\n      doEnable: function doEnable(id)\n      /*istanbul ignore next: ignore for now */\n      {\n        // Programmatically enable tooltip or popover\n        if (!id || this.getTargetId() === id || this.computedId === id) {\n          // Enable all tooltips or popovers (no ID), or this specific tip (with ID)\n          this.enable();\n        }\n      },\n      click: function click() {\n        if (!this.$_enabled || this.dropdownOpen()) {\n          /* istanbul ignore next */\n          return;\n        }\n\n        this.activeTrigger.click = !this.activeTrigger.click;\n\n        if (this.isWithActiveTrigger) {\n          this.enter(null);\n        } else {\n          /* istanbul ignore next */\n          this.leave(null);\n        }\n      },\n      toggle: function toggle()\n      /* istanbul ignore next */\n      {\n        // Manual toggle handler\n        if (!this.$_enabled || this.dropdownOpen()) {\n          /* istanbul ignore next */\n          return;\n        } // Should we register as an active trigger?\n        // this.activeTrigger.manual = !this.activeTrigger.manual\n\n\n        if (this.localShow) {\n          this.leave(null);\n        } else {\n          this.enter(null);\n        }\n      },\n      enter: function enter() {\n        var _this10 = this;\n\n        var evt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n        // Opening trigger handler\n        // Note: Click events are sent with evt === null\n        if (evt) {\n          this.activeTrigger[evt.type === 'focusin' ? 'focus' : 'hover'] = true;\n        }\n        /* istanbul ignore next */\n\n\n        if (this.localShow || this.$_hoverState === 'in') {\n          this.$_hoverState = 'in';\n          return;\n        }\n\n        this.clearHoverTimeout();\n        this.$_hoverState = 'in';\n\n        if (!this.computedDelay.show) {\n          this.show();\n        } else {\n          // Hide any title attribute while enter delay is active\n          this.fixTitle();\n          this.$_hoverTimeout = setTimeout(function () {\n            /* istanbul ignore else */\n            if (_this10.$_hoverState === 'in') {\n              _this10.show();\n            } else if (!_this10.localShow) {\n              _this10.restoreTitle();\n            }\n          }, this.computedDelay.show);\n        }\n      },\n      leave: function leave() {\n        var _this11 = this;\n\n        var evt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n        // Closing trigger handler\n        // Note: Click events are sent with evt === null\n        if (evt) {\n          this.activeTrigger[evt.type === 'focusout' ? 'focus' : 'hover'] = false;\n          /* istanbul ignore next */\n\n          if (evt.type === 'focusout' && arrayIncludes(this.computedTriggers, 'blur')) {\n            // Special case for `blur`: we clear out the other triggers\n            this.activeTrigger.click = false;\n            this.activeTrigger.hover = false;\n          }\n        }\n        /* istanbul ignore next: ignore for now */\n\n\n        if (this.isWithActiveTrigger) {\n          return;\n        }\n\n        this.clearHoverTimeout();\n        this.$_hoverState = 'out';\n\n        if (!this.computedDelay.hide) {\n          this.hide();\n        } else {\n          this.$_hoverTimeout = setTimeout(function () {\n            if (_this11.$_hoverState === 'out') {\n              _this11.hide();\n            }\n          }, this.computedDelay.hide);\n        }\n      }\n    }\n  });\n\n  var NAME$v = 'BTooltip'; // @vue/component\n\n  var BTooltip =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$v,\n    props: {\n      title: {\n        type: String // default: undefined\n\n      },\n      // Added in by BPopover\n      // content: {\n      //   type: String,\n      //   default: undefined\n      // },\n      target: {\n        // String ID of element, or element/component reference\n        // Or function that returns one of the above\n        type: [String, HTMLElement, SVGElement, Function, Object],\n        // default: undefined,\n        required: true\n      },\n      triggers: {\n        type: [String, Array],\n        default: 'hover focus'\n      },\n      placement: {\n        type: String,\n        default: 'top'\n      },\n      fallbackPlacement: {\n        type: [String, Array],\n        default: 'flip',\n        validator: function validator(value) {\n          return isArray(value) && value.every(function (v) {\n            return isString(v);\n          }) || arrayIncludes(['flip', 'clockwise', 'counterclockwise'], value);\n        }\n      },\n      variant: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$v, 'variant');\n        }\n      },\n      customClass: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$v, 'customClass');\n        }\n      },\n      delay: {\n        type: [Number, Object, String],\n        default: function _default() {\n          return getComponentConfig(NAME$v, 'delay');\n        }\n      },\n      boundary: {\n        // String: scrollParent, window, or viewport\n        // Element: element reference\n        // Object: Vue component\n        type: [String, HTMLElement, Object],\n        default: function _default() {\n          return getComponentConfig(NAME$v, 'boundary');\n        }\n      },\n      boundaryPadding: {\n        type: [Number, String],\n        default: function _default() {\n          return getComponentConfig(NAME$v, 'boundaryPadding');\n        }\n      },\n      offset: {\n        type: [Number, String],\n        default: 0\n      },\n      noFade: {\n        type: Boolean,\n        default: false\n      },\n      container: {\n        // String: HTML ID of container, if null body is used (default)\n        // HTMLElement: element reference reference\n        // Object: Vue Component\n        type: [String, HTMLElement, Object] // default: undefined\n\n      },\n      show: {\n        type: Boolean,\n        default: false\n      },\n      noninteractive: {\n        type: Boolean,\n        default: false\n      },\n      disabled: {\n        type: Boolean,\n        default: false\n      },\n      id: {\n        // ID to use for tooltip element\n        // If not provided on will automatically be generated\n        type: String,\n        default: null\n      }\n    },\n    data: function data() {\n      return {\n        localShow: this.show,\n        localTitle: '',\n        localContent: ''\n      };\n    },\n    computed: {\n      templateData: function templateData() {\n        // Data that will be passed to the template and popper\n        return {\n          // We use massaged versions of the title and content props/slots\n          title: this.localTitle,\n          content: this.localContent,\n          // Pass these props as is\n          target: this.target,\n          triggers: this.triggers,\n          placement: this.placement,\n          fallbackPlacement: this.fallbackPlacement,\n          variant: this.variant,\n          customClass: this.customClass,\n          container: this.container,\n          boundary: this.boundary,\n          boundaryPadding: this.boundaryPadding,\n          delay: this.delay,\n          offset: this.offset,\n          noFade: this.noFade,\n          interactive: !this.noninteractive,\n          disabled: this.disabled,\n          id: this.id\n        };\n      },\n      templateTitleContent: function templateTitleContent() {\n        // Used to watch for changes to the title and content props\n        return {\n          title: this.title,\n          content: this.content\n        };\n      }\n    },\n    watch: {\n      show: function show(_show, oldVal) {\n        if (_show !== oldVal && _show !== this.localShow && this.$_bv_toolpop) {\n          if (_show) {\n            this.$_bv_toolpop.show();\n          } else {\n            // We use `forceHide()` to override any active triggers\n            this.$_bv_toolpop.forceHide();\n          }\n        }\n      },\n      disabled: function disabled(newVal) {\n        if (newVal) {\n          this.doDisable();\n        } else {\n          this.doEnable();\n        }\n      },\n      localShow: function localShow(newVal) {\n        // TODO: May need to be done in a `$nextTick()`\n        this.$emit('update:show', newVal);\n      },\n      templateData: function templateData() {\n        var _this = this;\n\n        this.$nextTick(function () {\n          if (_this.$_bv_toolpop) {\n            _this.$_bv_toolpop.updateData(_this.templateData);\n          }\n        });\n      },\n      // Watchers for title/content props (prop changes do not trigger the `updated()` hook)\n      templateTitleContent: function templateTitleContent() {\n        this.$nextTick(this.updateContent);\n      }\n    },\n    created: function created() {\n      // Non reactive properties\n      this.$_bv_toolpop = null;\n    },\n    updated: function updated() {\n      // Update the `propData` object\n      // Done in a `$nextTick()` to ensure slot(s) have updated\n      this.$nextTick(this.updateContent);\n    },\n    beforeDestroy: function beforeDestroy() {\n      // Shutdown our local event listeners\n      this.$off('open', this.doOpen);\n      this.$off('close', this.doClose);\n      this.$off('disable', this.doDisable);\n      this.$off('enable', this.doEnable); // Destroy the tip instance\n\n      this.$_bv_toolpop && this.$_bv_toolpop.$destroy();\n      this.$_bv_toolpop = null;\n    },\n    mounted: function mounted() {\n      var _this2 = this;\n\n      // Instantiate a new BVTooltip instance\n      // Done in a `$nextTick()` to ensure DOM has completed rendering\n      // so that target can be found\n      this.$nextTick(function () {\n        // Load the on demand child instance\n        var Component = _this2.getComponent(); // Ensure we have initial content\n\n\n        _this2.updateContent(); // Pass down the scoped style attribute if available\n\n\n        var scopeId = getScopeId(_this2) || getScopeId(_this2.$parent); // Create the instance\n\n        var $toolpop = _this2.$_bv_toolpop = new Component({\n          parent: _this2,\n          // Pass down the scoped style ID\n          _scopeId: scopeId || undefined\n        }); // Set the initial data\n\n        $toolpop.updateData(_this2.templateData); // Set listeners\n\n        $toolpop.$on('show', _this2.onShow);\n        $toolpop.$on('shown', _this2.onShown);\n        $toolpop.$on('hide', _this2.onHide);\n        $toolpop.$on('hidden', _this2.onHidden);\n        $toolpop.$on('disabled', _this2.onDisabled);\n        $toolpop.$on('enabled', _this2.onEnabled); // Initially disabled?\n\n        if (_this2.disabled) {\n          // Initially disabled\n          _this2.doDisable();\n        } // Listen to open signals from others\n\n\n        _this2.$on('open', _this2.doOpen); // Listen to close signals from others\n\n\n        _this2.$on('close', _this2.doClose); // Listen to disable signals from others\n\n\n        _this2.$on('disable', _this2.doDisable); // Listen to enable signals from others\n\n\n        _this2.$on('enable', _this2.doEnable); // Initially show tooltip?\n\n\n        if (_this2.localShow) {\n          _this2.$_bv_toolpop && _this2.$_bv_toolpop.show();\n        }\n      });\n    },\n    methods: {\n      getComponent: function getComponent() {\n        // Overridden by BPopover\n        return BVTooltip;\n      },\n      updateContent: function updateContent() {\n        // Overridden by BPopover\n        // Tooltip: Default slot is `title`\n        // Popover: Default slot is `content`, `title` slot is title\n        // We pass a scoped slot function reference by default (Vue v2.6x)\n        // And pass the title prop as a fallback\n        this.setTitle(this.$scopedSlots.default || this.title);\n      },\n      // Helper methods for `updateContent()`\n      setTitle: function setTitle(val) {\n        val = isUndefinedOrNull(val) ? '' : val; // We only update the value if it has changed\n\n        if (this.localTitle !== val) {\n          this.localTitle = val;\n        }\n      },\n      setContent: function setContent(val) {\n        val = isUndefinedOrNull(val) ? '' : val; // We only update the value if it has changed\n\n        if (this.localContent !== val) {\n          this.localContent = val;\n        }\n      },\n      // --- Template event handlers ---\n      onShow: function onShow(bvEvt) {\n        // Placeholder\n        this.$emit('show', bvEvt);\n\n        if (bvEvt) {\n          this.localShow = !bvEvt.defaultPrevented;\n        }\n      },\n      onShown: function onShown(bvEvt) {\n        // Tip is now showing\n        this.localShow = true;\n        this.$emit('shown', bvEvt);\n      },\n      onHide: function onHide(bvEvt) {\n        this.$emit('hide', bvEvt);\n      },\n      onHidden: function onHidden(bvEvt) {\n        // Tip is no longer showing\n        this.$emit('hidden', bvEvt);\n        this.localShow = false;\n      },\n      onDisabled: function onDisabled(bvEvt) {\n        // Prevent possible endless loop if user mistakenly\n        // fires `disabled` instead of `disable`\n        if (bvEvt && bvEvt.type === 'disabled') {\n          this.$emit('update:disabled', true);\n          this.$emit('disabled', bvEvt);\n        }\n      },\n      onEnabled: function onEnabled(bvEvt) {\n        // Prevent possible endless loop if user mistakenly\n        // fires `enabled` instead of `enable`\n        if (bvEvt && bvEvt.type === 'enabled') {\n          this.$emit('update:disabled', false);\n          this.$emit('enabled', bvEvt);\n        }\n      },\n      // --- Local event listeners ---\n      doOpen: function doOpen() {\n        !this.localShow && this.$_bv_toolpop && this.$_bv_toolpop.show();\n      },\n      doClose: function doClose() {\n        this.localShow && this.$_bv_toolpop && this.$_bv_toolpop.hide();\n      },\n      doDisable: function doDisable() {\n        this.$_bv_toolpop && this.$_bv_toolpop.disable();\n      },\n      doEnable: function doEnable() {\n        this.$_bv_toolpop && this.$_bv_toolpop.enable();\n      }\n    },\n    render: function render(h) {\n      // Always renders a comment node\n      // TODO:\n      //   Future: Possibly render a target slot (single root element)\n      //   which we can apply the listeners to (pass `this.$el` to BVTooltip)\n      return h();\n    }\n  });\n\n  var NAME$w = 'BVPopoverTemplate'; // @vue/component\n\n  var BVPopoverTemplate =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$w,\n    extends: BVTooltipTemplate,\n    computed: {\n      templateType: function templateType() {\n        return 'popover';\n      }\n    },\n    methods: {\n      renderTemplate: function renderTemplate(h) {\n        // Title and content could be a scoped slot function\n        var $title = isFunction(this.title) ? this.title({}) : this.title;\n        var $content = isFunction(this.content) ? this.content({}) : this.content; // Directive usage only\n\n        var titleDomProps = this.html && !isFunction(this.title) ? {\n          innerHTML: this.title\n        } : {};\n        var contentDomProps = this.html && !isFunction(this.content) ? {\n          innerHTML: this.content\n        } : {};\n        return h('div', {\n          staticClass: 'popover b-popover',\n          class: this.templateClasses,\n          attrs: this.templateAttributes,\n          on: this.templateListeners\n        }, [h('div', {\n          ref: 'arrow',\n          staticClass: 'arrow'\n        }), isUndefinedOrNull($title) || $title === '' ? h() : h('h3', {\n          staticClass: 'popover-header',\n          domProps: titleDomProps\n        }, [$title]), isUndefinedOrNull($content) || $content === '' ? h() : h('div', {\n          staticClass: 'popover-body',\n          domProps: contentDomProps\n        }, [$content])]);\n      }\n    }\n  });\n\n  // Popover \"Class\" (Built as a renderless Vue instance)\n  var NAME$x = 'BVPopover'; // @vue/component\n\n  var BVPopover =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$x,\n    extends: BVTooltip,\n    computed: {\n      // Overwrites BVTooltip\n      templateType: function templateType() {\n        return 'popover';\n      }\n    },\n    methods: {\n      getTemplate: function getTemplate() {\n        // Overwrites BVTooltip\n        return BVPopoverTemplate;\n      }\n    }\n  });\n\n  var NAME$y = 'BPopover';\n  var BPopover =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$y,\n    extends: BTooltip,\n    inheritAttrs: false,\n    props: {\n      title: {\n        type: String // default: undefined\n\n      },\n      content: {\n        type: String // default: undefined\n\n      },\n      triggers: {\n        type: [String, Array],\n        default: 'click'\n      },\n      placement: {\n        type: String,\n        default: 'right'\n      },\n      variant: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$y, 'variant');\n        }\n      },\n      customClass: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$y, 'customClass');\n        }\n      },\n      delay: {\n        type: [Number, Object, String],\n        default: function _default() {\n          return getComponentConfig(NAME$y, 'delay');\n        }\n      },\n      boundary: {\n        // String: scrollParent, window, or viewport\n        // Element: element reference\n        // Object: Vue component\n        type: [String, HTMLElement, Object],\n        default: function _default() {\n          return getComponentConfig(NAME$y, 'boundary');\n        }\n      },\n      boundaryPadding: {\n        type: [Number, String],\n        default: function _default() {\n          return getComponentConfig(NAME$y, 'boundaryPadding');\n        }\n      }\n    },\n    methods: {\n      getComponent: function getComponent() {\n        // Overridden by BPopover\n        return BVPopover;\n      },\n      updateContent: function updateContent() {\n        // Tooltip: Default slot is `title`\n        // Popover: Default slot is `content`, `title` slot is title\n        // We pass a scoped slot function references by default (Vue v2.6x)\n        // And pass the title prop as a fallback\n        this.setContent(this.$scopedSlots.default || this.content);\n        this.setTitle(this.$scopedSlots.title || this.title);\n      }\n    } // Render function provided by BTooltip\n\n  });\n\n  var BV_POPOVER = '__BV_Popover__'; // Default trigger\n\n  var DefaultTrigger = 'click'; // Valid event triggers\n\n  var validTriggers = {\n    focus: true,\n    hover: true,\n    click: true,\n    blur: true,\n    manual: true\n  }; // Directive modifier test regular expressions. Pre-compile for performance\n\n  var htmlRE = /^html$/i;\n  var noFadeRE = /^nofade$/i;\n  var placementRE = /^(auto|top(left|right)?|bottom(left|right)?|left(top|bottom)?|right(top|bottom)?)$/i;\n  var boundaryRE = /^(window|viewport|scrollParent)$/i;\n  var delayRE = /^d\\d+$/i;\n  var delayShowRE = /^ds\\d+$/i;\n  var delayHideRE = /^dh\\d+$/i;\n  var offsetRE = /^o-?\\d+$/i;\n  var variantRE = /^v-.+$/i;\n  var spacesRE = /\\s+/; // Build a Popover config based on bindings (if any)\n  // Arguments and modifiers take precedence over passed value config object\n\n  var parseBindings = function parseBindings(bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    // We start out with a basic config\n    var NAME = 'BPopover';\n    var config = {\n      title: undefined,\n      content: undefined,\n      trigger: '',\n      // Default set below if needed\n      placement: 'right',\n      fallbackPlacement: 'flip',\n      container: false,\n      // Default of body\n      animation: true,\n      offset: 0,\n      disabled: false,\n      id: null,\n      html: false,\n      delay: getComponentConfig(NAME, 'delay'),\n      boundary: String(getComponentConfig(NAME, 'boundary')),\n      boundaryPadding: parseInt(getComponentConfig(NAME, 'boundaryPadding'), 10) || 0,\n      variant: getComponentConfig(NAME, 'variant'),\n      customClass: getComponentConfig(NAME, 'customClass')\n    }; // Process `bindings.value`\n\n    if (isString(bindings.value) || isNumber(bindings.value)) {\n      // Value is popover content (html optionally supported)\n      config.content = bindings.value;\n    } else if (isFunction(bindings.value)) {\n      // Content generator function\n      config.content = bindings.value;\n    } else if (isPlainObject(bindings.value)) {\n      // Value is config object, so merge\n      config = _objectSpread2({}, config, {}, bindings.value);\n    } // If argument, assume element ID of container element\n\n\n    if (bindings.arg) {\n      // Element ID specified as arg\n      // We must prepend '#' to become a CSS selector\n      config.container = \"#\".concat(bindings.arg);\n    } // If title is not provided, try title attribute\n\n\n    if (isUndefined(config.title)) {\n      // Try attribute\n      var data = vnode.data || {};\n      config.title = data.attrs && !isUndefinedOrNull(data.attrs.title) ? data.attrs.title : undefined;\n    } // Normalize delay\n\n\n    if (!isPlainObject(config.delay)) {\n      config.delay = {\n        show: parseInt(config.delay, 10) || 0,\n        hide: parseInt(config.delay, 10) || 0\n      };\n    } // Process modifiers\n\n\n    keys(bindings.modifiers).forEach(function (mod) {\n      if (htmlRE.test(mod)) {\n        // Title/content allows HTML\n        config.html = true;\n      } else if (noFadeRE.test(mod)) {\n        // No animation\n        config.animation = false;\n      } else if (placementRE.test(mod)) {\n        // Placement of popover\n        config.placement = mod;\n      } else if (boundaryRE.test(mod)) {\n        // Boundary of popover\n        mod = mod === 'scrollparent' ? 'scrollParent' : mod;\n        config.boundary = mod;\n      } else if (delayRE.test(mod)) {\n        // Delay value\n        var delay = parseInt(mod.slice(1), 10) || 0;\n        config.delay.show = delay;\n        config.delay.hide = delay;\n      } else if (delayShowRE.test(mod)) {\n        // Delay show value\n        config.delay.show = parseInt(mod.slice(2), 10) || 0;\n      } else if (delayHideRE.test(mod)) {\n        // Delay hide value\n        config.delay.hide = parseInt(mod.slice(2), 10) || 0;\n      } else if (offsetRE.test(mod)) {\n        // Offset value, negative allowed\n        config.offset = parseInt(mod.slice(1), 10) || 0;\n      } else if (variantRE.test(mod)) {\n        // Variant\n        config.variant = mod.slice(2) || null;\n      }\n    }); // Special handling of event trigger modifiers trigger is\n    // a space separated list\n\n    var selectedTriggers = {}; // Parse current config object trigger\n\n    concat(config.trigger || '').filter(identity).join(' ').trim().toLowerCase().split(spacesRE).forEach(function (trigger) {\n      if (validTriggers[trigger]) {\n        selectedTriggers[trigger] = true;\n      }\n    }); // Parse modifiers for triggers\n\n    keys(bindings.modifiers).forEach(function (mod) {\n      mod = mod.toLowerCase();\n\n      if (validTriggers[mod]) {\n        // If modifier is a valid trigger\n        selectedTriggers[mod] = true;\n      }\n    }); // Sanitize triggers\n\n    config.trigger = keys(selectedTriggers).join(' ');\n\n    if (config.trigger === 'blur') {\n      // Blur by itself is useless, so convert it to 'focus'\n      config.trigger = 'focus';\n    }\n\n    if (!config.trigger) {\n      // Use default trigger\n      config.trigger = DefaultTrigger;\n    }\n\n    return config;\n  }; // Add or update Popover on our element\n\n\n  var applyPopover = function applyPopover(el, bindings, vnode) {\n    if (!isBrowser) {\n      /* istanbul ignore next */\n      return;\n    }\n\n    var config = parseBindings(bindings, vnode);\n\n    if (!el[BV_POPOVER]) {\n      var $parent = vnode.context;\n      el[BV_POPOVER] = new BVPopover({\n        parent: $parent,\n        // Add the parent's scoped style attribute data\n        _scopeId: getScopeId($parent, undefined)\n      });\n      el[BV_POPOVER].__bv_prev_data__ = {};\n      el[BV_POPOVER].$on('show', function ()\n      /* istanbul ignore next: for now */\n      {\n        // Before showing the popover, we update the title\n        // and content if they are functions\n        var data = {};\n\n        if (isFunction(config.title)) {\n          data.title = config.title(el);\n        }\n\n        if (isFunction(config.content)) {\n          data.content = config.content(el);\n        }\n\n        if (keys(data).length > 0) {\n          el[BV_POPOVER].updateData(data);\n        }\n      });\n    }\n\n    var data = {\n      title: config.title,\n      content: config.content,\n      triggers: config.trigger,\n      placement: config.placement,\n      fallbackPlacement: config.fallbackPlacement,\n      variant: config.variant,\n      customClass: config.customClass,\n      container: config.container,\n      boundary: config.boundary,\n      delay: config.delay,\n      offset: config.offset,\n      noFade: !config.animation,\n      id: config.id,\n      disabled: config.disabled,\n      html: config.html\n    };\n    var oldData = el[BV_POPOVER].__bv_prev_data__;\n    el[BV_POPOVER].__bv_prev_data__ = data;\n\n    if (!looseEqual(data, oldData)) {\n      // We only update the instance if data has changed\n      var newData = {\n        target: el\n      };\n      keys(data).forEach(function (prop) {\n        // We only pass data properties that have changed\n        if (data[prop] !== oldData[prop]) {\n          // If title/content is a function, we execute it here\n          newData[prop] = (prop === 'title' || prop === 'content') && isFunction(data[prop]) ? data[prop](el) : data[prop];\n        }\n      });\n      el[BV_POPOVER].updateData(newData);\n    }\n  }; // Remove Popover from our element\n\n\n  var removePopover = function removePopover(el) {\n    if (el[BV_POPOVER]) {\n      el[BV_POPOVER].$destroy();\n      el[BV_POPOVER] = null;\n    }\n\n    delete el[BV_POPOVER];\n  }; // Export our directive\n\n\n  var VBPopover = {\n    bind: function bind(el, bindings, vnode) {\n      applyPopover(el, bindings, vnode);\n    },\n    // We use `componentUpdated` here instead of `update`, as the former\n    // waits until the containing component and children have finished updating\n    componentUpdated: function componentUpdated(el, bindings, vnode) {\n      // Performed in a `$nextTick()` to prevent endless render/update loops\n      vnode.context.$nextTick(function () {\n        applyPopover(el, bindings, vnode);\n      });\n    },\n    unbind: function unbind(el) {\n      removePopover(el);\n    }\n  };\n\n  var VBPopoverPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    directives: {\n      VBPopover: VBPopover\n    }\n  });\n\n  var PopoverPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BPopover: BPopover\n    },\n    plugins: {\n      VBPopoverPlugin: VBPopoverPlugin\n    }\n  });\n\n  var NAME$z = 'BProgressBar'; // @vue/component\n\n  var BProgressBar =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$z,\n    mixins: [normalizeSlotMixin],\n    inject: {\n      bvProgress: {\n        default: function _default()\n        /* istanbul ignore next */\n        {\n          return {};\n        }\n      }\n    },\n    props: {\n      value: {\n        type: [Number, String],\n        default: 0\n      },\n      label: {\n        type: String,\n        default: null\n      },\n      labelHtml: {\n        type: String\n      },\n      // $parent (this.bvProgress) prop values may take precedence over the following props\n      // Which is why they are defaulted to null\n      max: {\n        type: [Number, String],\n        default: null\n      },\n      precision: {\n        type: [Number, String],\n        default: null\n      },\n      variant: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$z, 'variant');\n        }\n      },\n      striped: {\n        type: Boolean,\n        default: null\n      },\n      animated: {\n        type: Boolean,\n        default: null\n      },\n      showProgress: {\n        type: Boolean,\n        default: null\n      },\n      showValue: {\n        type: Boolean,\n        default: null\n      }\n    },\n    computed: {\n      progressBarClasses: function progressBarClasses() {\n        return [this.computedVariant ? \"bg-\".concat(this.computedVariant) : '', this.computedStriped || this.computedAnimated ? 'progress-bar-striped' : '', this.computedAnimated ? 'progress-bar-animated' : ''];\n      },\n      progressBarStyles: function progressBarStyles() {\n        return {\n          width: 100 * (this.computedValue / this.computedMax) + '%'\n        };\n      },\n      computedValue: function computedValue() {\n        return toFloat(this.value) || 0;\n      },\n      computedMax: function computedMax() {\n        // Prefer our max over parent setting\n        var max = toFloat(this.max);\n        return isNaN(max) ? toFloat(this.bvProgress.max) || 100 : max;\n      },\n      computedPrecision: function computedPrecision() {\n        // Prefer our precision over parent setting\n        var precision = toInteger(this.precision);\n        return isNaN(precision) ? toInteger(this.bvProgress.precision) || 0 : precision;\n      },\n      computedProgress: function computedProgress() {\n        var precision = this.computedPrecision;\n        var p = Math.pow(10, precision);\n        return toFixed(100 * p * this.computedValue / this.computedMax / p, precision);\n      },\n      computedVariant: function computedVariant() {\n        // Prefer our variant over parent setting\n        return this.variant || this.bvProgress.variant;\n      },\n      computedStriped: function computedStriped() {\n        // Prefer our striped over parent setting\n        return isBoolean(this.striped) ? this.striped : this.bvProgress.striped || false;\n      },\n      computedAnimated: function computedAnimated() {\n        // Prefer our animated over parent setting\n        return isBoolean(this.animated) ? this.animated : this.bvProgress.animated || false;\n      },\n      computedShowProgress: function computedShowProgress() {\n        // Prefer our showProgress over parent setting\n        return isBoolean(this.showProgress) ? this.showProgress : this.bvProgress.showProgress || false;\n      },\n      computedShowValue: function computedShowValue() {\n        // Prefer our showValue over parent setting\n        return isBoolean(this.showValue) ? this.showValue : this.bvProgress.showValue || false;\n      }\n    },\n    render: function render(h) {\n      var childNodes = h();\n\n      if (this.hasNormalizedSlot('default')) {\n        childNodes = this.normalizeSlot('default');\n      } else if (this.label || this.labelHtml) {\n        childNodes = h('span', {\n          domProps: htmlOrText(this.labelHtml, this.label)\n        });\n      } else if (this.computedShowProgress) {\n        childNodes = this.computedProgress;\n      } else if (this.computedShowValue) {\n        childNodes = toFixed(this.computedValue, this.computedPrecision);\n      }\n\n      return h('div', {\n        staticClass: 'progress-bar',\n        class: this.progressBarClasses,\n        style: this.progressBarStyles,\n        attrs: {\n          role: 'progressbar',\n          'aria-valuemin': '0',\n          'aria-valuemax': toString$1(this.computedMax),\n          'aria-valuenow': toFixed(this.computedValue, this.computedPrecision)\n        }\n      }, [childNodes]);\n    }\n  });\n\n  var NAME$A = 'BProgress'; // @vue/component\n\n  var BProgress =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$A,\n    mixins: [normalizeSlotMixin],\n    provide: function provide() {\n      return {\n        bvProgress: this\n      };\n    },\n    props: {\n      // These props can be inherited via the child b-progress-bar(s)\n      variant: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$A, 'variant');\n        }\n      },\n      striped: {\n        type: Boolean,\n        default: false\n      },\n      animated: {\n        type: Boolean,\n        default: false\n      },\n      height: {\n        type: String,\n        default: null\n      },\n      precision: {\n        type: [Number, String],\n        default: 0\n      },\n      showProgress: {\n        type: Boolean,\n        default: false\n      },\n      showValue: {\n        type: Boolean,\n        default: false\n      },\n      max: {\n        type: [Number, String],\n        default: 100\n      },\n      // This prop is not inherited by child b-progress-bar(s)\n      value: {\n        type: [Number, String],\n        default: 0\n      }\n    },\n    computed: {\n      progressHeight: function progressHeight() {\n        return {\n          height: this.height || null\n        };\n      }\n    },\n    render: function render(h) {\n      var childNodes = this.normalizeSlot('default');\n\n      if (!childNodes) {\n        childNodes = h(BProgressBar, {\n          props: {\n            value: this.value,\n            max: this.max,\n            precision: this.precision,\n            variant: this.variant,\n            animated: this.animated,\n            striped: this.striped,\n            showProgress: this.showProgress,\n            showValue: this.showValue\n          }\n        });\n      }\n\n      return h('div', {\n        class: ['progress'],\n        style: this.progressHeight\n      }, [childNodes]);\n    }\n  });\n\n  var ProgressPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BProgress: BProgress,\n      BProgressBar: BProgressBar\n    }\n  });\n\n  var NAME$B = 'BSpinner'; // @vue/component\n\n  var BSpinner =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$B,\n    functional: true,\n    props: {\n      type: {\n        type: String,\n        default: 'border' // SCSS currently supports 'border' or 'grow'\n\n      },\n      label: {\n        type: String,\n        default: null\n      },\n      variant: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig(NAME$B, 'variant');\n        }\n      },\n      small: {\n        type: Boolean,\n        default: false\n      },\n      role: {\n        type: String,\n        default: 'status'\n      },\n      tag: {\n        type: String,\n        default: 'span'\n      }\n    },\n    render: function render(h, _ref) {\n      var _class;\n\n      var props = _ref.props,\n          data = _ref.data,\n          slots = _ref.slots,\n          scopedSlots = _ref.scopedSlots;\n      var $slots = slots();\n      var $scopedSlots = scopedSlots || {};\n      var label = normalizeSlot('label', {}, $scopedSlots, $slots) || props.label;\n\n      if (label) {\n        label = h('span', {\n          staticClass: 'sr-only'\n        }, label);\n      }\n\n      return h(props.tag, a(data, {\n        attrs: {\n          role: label ? props.role || 'status' : null,\n          'aria-hidden': label ? null : 'true'\n        },\n        class: (_class = {}, _defineProperty(_class, \"spinner-\".concat(props.type), props.type), _defineProperty(_class, \"spinner-\".concat(props.type, \"-sm\"), props.small), _defineProperty(_class, \"text-\".concat(props.variant), props.variant), _class)\n      }), [label || h()]);\n    }\n  });\n\n  var SpinnerPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BSpinner: BSpinner\n    }\n  });\n\n  // Mixin to determine if an event listener has been registered\n\n  var hasListenerMixin = {\n    methods: {\n      hasListener: function hasListener(name) {\n        // Only includes listeners registerd via `v-on:name`\n        var $listeners = this.$listeners || {}; // Includes `v-on:name` and `this.$on('name')` registerd listeners\n        // Note this property is not part of the public Vue API, but it is\n        // the only way to determine if a listener was added via `vm.$on`\n\n        var $events = this._events || {}; // Registered listeners in `this._events` are always an array,\n        // but might be zero length\n\n        return !isUndefined($listeners[name]) || isArray($events[name]) && $events[name].length > 0;\n      }\n    }\n  };\n\n  /**\n   * Converts a string, including strings in camelCase or snake_case, into Start Case (a variant\n   * of Title Case where all words start with a capital letter), it keeps original single quote\n   * and hyphen in the word.\n   *\n   * Copyright (c) 2017 Compass (MIT)\n   * https://github.com/UrbanCompass/to-start-case\n   * @author Zhuoyuan Zhang <https://github.com/drawyan>\n   * @author Wei Wang <https://github.com/onlywei>\n   *\n   *\n   *   'management_companies' to 'Management Companies'\n   *   'managementCompanies' to 'Management Companies'\n   *   `hell's kitchen` to `Hell's Kitchen`\n   *   `co-op` to `Co-op`\n   *\n   * @param {String} str\n   * @returns {String}\n   */\n  // Precompile regular expressions for performance\n  var RX_UNDERSCORE = /_/g;\n  var RX_LOWER_UPPER = /([a-z])([A-Z])/g;\n  var RX_START_SPACE_WORD = /(\\s|^)(\\w)/g;\n\n  var startCase = function startCase(str) {\n    return str.replace(RX_UNDERSCORE, ' ').replace(RX_LOWER_UPPER, function (str, $1, $2) {\n      return $1 + ' ' + $2;\n    }).replace(RX_START_SPACE_WORD, function (str, $1, $2) {\n      return $1 + $2.toUpperCase();\n    });\n  };\n\n  // Constants used by table helpers\n  // Object of item keys that should be ignored for headers and\n  // stringification and filter events\n  var IGNORED_FIELD_KEYS = {\n    _rowVariant: true,\n    _cellVariants: true,\n    _showDetails: true\n  }; // Filter CSS selector for click/dblclick/etc. events\n  // If any of these selectors match the clicked element, we ignore the event\n\n  var EVENT_FILTER = ['a', 'a *', // Include content inside links\n  'button', 'button *', // Include content inside buttons\n  'input:not(.disabled):not([disabled])', 'select:not(.disabled):not([disabled])', 'textarea:not(.disabled):not([disabled])', '[role=\"link\"]', '[role=\"link\"] *', '[role=\"button\"]', '[role=\"button\"] *', '[tabindex]:not(.disabled):not([disabled])'].join(',');\n\n  var processField = function processField(key, value) {\n    var field = null;\n\n    if (isString(value)) {\n      // Label shortcut\n      field = {\n        key: key,\n        label: value\n      };\n    } else if (isFunction(value)) {\n      // Formatter shortcut\n      field = {\n        key: key,\n        formatter: value\n      };\n    } else if (isObject(value)) {\n      field = clone(value);\n      field.key = field.key || key;\n    } else if (value !== false) {\n      // Fallback to just key\n\n      /* istanbul ignore next */\n      field = {\n        key: key\n      };\n    }\n\n    return field;\n  }; // We normalize fields into an array of objects\n  // [ { key:..., label:..., ...}, {...}, ..., {..}]\n\n\n  var normalizeFields = function normalizeFields(origFields, items) {\n    var fields = [];\n\n    if (isArray(origFields)) {\n      // Normalize array Form\n      origFields.filter(identity).forEach(function (f) {\n        if (isString(f)) {\n          fields.push({\n            key: f,\n            label: startCase(f)\n          });\n        } else if (isObject(f) && f.key && isString(f.key)) {\n          // Full object definition. We use assign so that we don't mutate the original\n          fields.push(clone(f));\n        } else if (isObject(f) && keys(f).length === 1) {\n          // Shortcut object (i.e. { 'foo_bar': 'This is Foo Bar' }\n          var key = keys(f)[0];\n          var field = processField(key, f[key]);\n\n          if (field) {\n            fields.push(field);\n          }\n        }\n      });\n    } // If no field provided, take a sample from first record (if exits)\n\n\n    if (fields.length === 0 && isArray(items) && items.length > 0) {\n      var sample = items[0];\n      keys(sample).forEach(function (k) {\n        if (!IGNORED_FIELD_KEYS[k]) {\n          fields.push({\n            key: k,\n            label: startCase(k)\n          });\n        }\n      });\n    } // Ensure we have a unique array of fields and that they have String labels\n\n\n    var memo = {};\n    return fields.filter(function (f) {\n      if (!memo[f.key]) {\n        memo[f.key] = true;\n        f.label = isString(f.label) ? f.label : startCase(f.key);\n        return true;\n      }\n\n      return false;\n    });\n  };\n\n  var itemsMixin = {\n    props: {\n      items: {\n        // Provider mixin adds in `Function` type\n        type: Array,\n        default: function _default()\n        /* istanbul ignore next */\n        {\n          return [];\n        }\n      },\n      fields: {\n        type: Array,\n        default: null\n      },\n      primaryKey: {\n        // Primary key for record\n        // If provided the value in each row must be unique!\n        type: String,\n        default: null\n      },\n      value: {\n        // `v-model` for retrieving the current displayed rows\n        type: Array,\n        default: function _default() {\n          return [];\n        }\n      }\n    },\n    data: function data() {\n      return {\n        // Our local copy of the items\n        // Must be an array\n        localItems: isArray(this.items) ? this.items.slice() : []\n      };\n    },\n    computed: {\n      computedFields: function computedFields() {\n        // We normalize fields into an array of objects\n        // `[ { key:..., label:..., ...}, {...}, ..., {..}]`\n        return normalizeFields(this.fields, this.localItems);\n      },\n      computedFieldsObj: function computedFieldsObj() {\n        // Fields as a simple lookup hash object\n        // Mainly for formatter lookup and use in `scopedSlots` for convenience\n        // If the field has a formatter, it normalizes formatter to a\n        // function ref or `undefined` if no formatter\n        var parent = this.$parent;\n        return this.computedFields.reduce(function (obj, f) {\n          // We use object spread here so we don't mutate the original field object\n          obj[f.key] = clone(f);\n\n          if (f.formatter) {\n            // Normalize formatter to a function ref or `undefined`\n            var formatter = f.formatter;\n\n            if (isString(formatter) && isFunction(parent[formatter])) {\n              formatter = parent[formatter];\n            } else if (!isFunction(formatter)) {\n              /* istanbul ignore next */\n              formatter = undefined;\n            } // Return formatter function or `undefined` if none\n\n\n            obj[f.key].formatter = formatter;\n          }\n\n          return obj;\n        }, {});\n      },\n      computedItems: function computedItems() {\n        // Fallback if various mixins not provided\n        return (this.paginatedItems || this.sortedItems || this.filteredItems || this.localItems || []).slice();\n      },\n      context: function context() {\n        // Current state of sorting, filtering and pagination props/values\n        return {\n          filter: this.localFilter,\n          sortBy: this.localSortBy,\n          sortDesc: this.localSortDesc,\n          perPage: parseInt(this.perPage, 10) || 0,\n          currentPage: parseInt(this.currentPage, 10) || 1,\n          apiUrl: this.apiUrl\n        };\n      }\n    },\n    watch: {\n      items: function items(newItems) {\n        /* istanbul ignore else */\n        if (isArray(newItems)) {\n          // Set `localItems`/`filteredItems` to a copy of the provided array\n          this.localItems = newItems.slice();\n        } else if (isUndefinedOrNull(newItems)) {\n          /* istanbul ignore next */\n          this.localItems = [];\n        }\n      },\n      // Watch for changes on `computedItems` and update the `v-model`\n      computedItems: function computedItems(newVal) {\n        this.$emit('input', newVal);\n      },\n      // Watch for context changes\n      context: function context(newVal, oldVal) {\n        // Emit context information for external paging/filtering/sorting handling\n        if (!looseEqual(newVal, oldVal)) {\n          this.$emit('context-changed', newVal);\n        }\n      }\n    },\n    mounted: function mounted() {\n      // Initially update the `v-model` of displayed items\n      this.$emit('input', this.computedItems);\n    },\n    methods: {\n      // Method to get the formatter method for a given field key\n      getFieldFormatter: function getFieldFormatter(key) {\n        var field = this.computedFieldsObj[key]; // `this.computedFieldsObj` has pre-normalized the formatter to a\n        // function ref if present, otherwise `undefined`\n\n        return field ? field.formatter : undefined;\n      }\n    }\n  };\n\n  // Mixin for providing stacked tables\n  var stackedMixin = {\n    props: {\n      stacked: {\n        type: [Boolean, String],\n        default: false\n      }\n    },\n    computed: {\n      isStacked: function isStacked() {\n        // `true` when always stacked, or returns breakpoint specified\n        return this.stacked === '' ? true : this.stacked;\n      },\n      isStackedAlways: function isStackedAlways() {\n        return this.isStacked === true;\n      },\n      stackedTableClasses: function stackedTableClasses() {\n        return _defineProperty({\n          'b-table-stacked': this.isStackedAlways\n        }, \"b-table-stacked-\".concat(this.stacked), !this.isStackedAlways && this.isStacked);\n      }\n    }\n  };\n\n  var sanitizeRow = function sanitizeRow(row, ignoreFields, includeFields) {\n    var fieldsObj = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    return keys(row).reduce(function (obj, key) {\n      // Ignore special fields that start with `_`\n      // Ignore fields in the `ignoreFields` array\n      // Include only fields in the `includeFields` array\n      if (!IGNORED_FIELD_KEYS[key] && !(ignoreFields && ignoreFields.length > 0 && arrayIncludes(ignoreFields, key)) && !(includeFields && includeFields.length > 0 && !arrayIncludes(includeFields, key))) {\n        var f = fieldsObj[key] || {};\n        var val = row[key]; // `f.filterByFormatted` will either be a function or boolean\n        // `f.formater` will have already been noramlized into a function ref\n\n        var filterByFormatted = f.filterByFormatted;\n        var formatter = isFunction(filterByFormatted) ? filterByFormatted : filterByFormatted ? f.formatter : null;\n        obj[key] = isFunction(formatter) ? formatter(val, key, row) : val;\n      }\n\n      return obj;\n    }, {});\n  };\n\n  // SSR safe deterministic way (keys are sorted before stringification)\n  //\n  //   ex:\n  //     { b: 3, c: { z: 'zzz', d: null, e: 2 }, d: [10, 12, 11], a: 'one' }\n  //   becomes\n  //     'one 3 2 zzz 10 12 11'\n  //\n  // Primitives (numbers/strings) are returned as-is\n  // Null and undefined values are filtered out\n  // Dates are converted to their native string format\n\n  var stringifyObjectValues = function stringifyObjectValues(val) {\n    if (isUndefinedOrNull(val)) {\n      /* istanbul ignore next */\n      return '';\n    } // Arrays are also object, and keys just returns the array indexes\n    // Date objects we convert to strings\n\n\n    if (isObject(val) && !isDate(val)) {\n      return keys(val).sort() // Sort to prevent SSR issues on pre-rendered sorted tables\n      .filter(function (v) {\n        return !isUndefinedOrNull(v);\n      }) // Ignore undefined/null values\n      .map(function (k) {\n        return stringifyObjectValues(val[k]);\n      }).join(' ');\n    }\n\n    return toString$1(val);\n  };\n\n  // TODO: Add option to stringify `scopedSlot` items\n\n  var stringifyRecordValues = function stringifyRecordValues(row, ignoreFields, includeFields, fieldsObj) {\n    return isObject(row) ? stringifyObjectValues(sanitizeRow(row, ignoreFields, includeFields, fieldsObj)) : '';\n  };\n\n  var DEBOUNCE_DEPRECATED_MSG = 'Prop \"filter-debounce\" is deprecated. Use the debounce feature of \"<b-form-input>\" instead.';\n  var RX_SPACES$1 = /[\\s\\uFEFF\\xA0]+/g;\n  var filteringMixin = {\n    props: {\n      filter: {\n        type: [String, RegExp, Object, Array],\n        default: null\n      },\n      filterFunction: {\n        type: Function,\n        default: null\n      },\n      filterIgnoredFields: {\n        type: Array // default: undefined\n\n      },\n      filterIncludedFields: {\n        type: Array // default: undefined\n\n      },\n      filterDebounce: {\n        type: [Number, String],\n        deprecated: DEBOUNCE_DEPRECATED_MSG,\n        default: 0,\n        validator: function validator(val) {\n          return /^\\d+/.test(String(val));\n        }\n      }\n    },\n    data: function data() {\n      return {\n        // Flag for displaying which empty slot to show and some event triggering\n        isFiltered: false,\n        // Where we store the copy of the filter criteria after debouncing\n        // We pre-set it with the sanitized filter value\n        localFilter: this.filterSanitize(this.filter)\n      };\n    },\n    computed: {\n      computedFilterIgnored: function computedFilterIgnored() {\n        return this.filterIgnoredFields ? concat(this.filterIgnoredFields).filter(Boolean) : null;\n      },\n      computedFilterIncluded: function computedFilterIncluded() {\n        return this.filterIncludedFields ? concat(this.filterIncludedFields).filter(Boolean) : null;\n      },\n      computedFilterDebounce: function computedFilterDebounce() {\n        var ms = toInteger(this.filterDebounce) || 0;\n        /* istanbul ignore next */\n\n        if (ms > 0) {\n          warn(DEBOUNCE_DEPRECATED_MSG, 'BTable');\n        }\n\n        return ms;\n      },\n      localFiltering: function localFiltering() {\n        return this.hasProvider ? !!this.noProviderFiltering : true;\n      },\n      // For watching changes to `filteredItems` vs `localItems`\n      filteredCheck: function filteredCheck() {\n        return {\n          filteredItems: this.filteredItems,\n          localItems: this.localItems,\n          localFilter: this.localFilter\n        };\n      },\n      // Sanitized/normalize filter-function prop\n      localFilterFn: function localFilterFn() {\n        // Return `null` to signal to use internal filter function\n        return isFunction(this.filterFunction) ? this.filterFunction : null;\n      },\n      // Returns the records in `localItems` that match the filter criteria\n      // Returns the original `localItems` array if not sorting\n      filteredItems: function filteredItems() {\n        var items = this.localItems || []; // Note the criteria is debounced and sanitized\n\n        var criteria = this.localFilter; // Resolve the filtering function, when requested\n        // We prefer the provided filtering function and fallback to the internal one\n        // When no filtering criteria is specified the filtering factories will return `null`\n\n        var filterFn = this.localFiltering ? this.filterFnFactory(this.localFilterFn, criteria) || this.defaultFilterFnFactory(criteria) : null; // We only do local filtering when requested and there are records to filter\n\n        return filterFn && items.length > 0 ? items.filter(filterFn) : items;\n      }\n    },\n    watch: {\n      // Watch for debounce being set to 0\n      computedFilterDebounce: function computedFilterDebounce(newVal) {\n        if (!newVal && this.$_filterTimer) {\n          clearTimeout(this.$_filterTimer);\n          this.$_filterTimer = null;\n          this.localFilter = this.filterSanitize(this.filter);\n        }\n      },\n      // Watch for changes to the filter criteria, and debounce if necessary\n      filter: {\n        // We need a deep watcher in case the user passes\n        // an object when using `filter-function`\n        deep: true,\n        handler: function handler(newCriteria) {\n          var _this = this;\n\n          var timeout = this.computedFilterDebounce;\n          clearTimeout(this.$_filterTimer);\n          this.$_filterTimer = null;\n\n          if (timeout && timeout > 0) {\n            // If we have a debounce time, delay the update of `localFilter`\n            this.$_filterTimer = setTimeout(function () {\n              _this.localFilter = _this.filterSanitize(newCriteria);\n            }, timeout);\n          } else {\n            // Otherwise, immediately update `localFilter` with `newFilter` value\n            this.localFilter = this.filterSanitize(newCriteria);\n          }\n        }\n      },\n      // Watch for changes to the filter criteria and filtered items vs `localItems`\n      // Set visual state and emit events as required\n      filteredCheck: function filteredCheck(_ref) {\n        var filteredItems = _ref.filteredItems,\n            localFilter = _ref.localFilter;\n        // Determine if the dataset is filtered or not\n        var isFiltered = false;\n\n        if (!localFilter) {\n          // If filter criteria is falsey\n          isFiltered = false;\n        } else if (looseEqual(localFilter, []) || looseEqual(localFilter, {})) {\n          // If filter criteria is an empty array or object\n          isFiltered = false;\n        } else if (localFilter) {\n          // If filter criteria is truthy\n          isFiltered = true;\n        }\n\n        if (isFiltered) {\n          this.$emit('filtered', filteredItems, filteredItems.length);\n        }\n\n        this.isFiltered = isFiltered;\n      },\n      isFiltered: function isFiltered(newVal, oldVal) {\n        if (newVal === false && oldVal === true) {\n          // We need to emit a filtered event if isFiltered transitions from true to\n          // false so that users can update their pagination controls.\n          this.$emit('filtered', this.localItems, this.localItems.length);\n        }\n      }\n    },\n    created: function created() {\n      var _this2 = this;\n\n      // Create non-reactive prop where we store the debounce timer id\n      this.$_filterTimer = null; // If filter is \"pre-set\", set the criteria\n      // This will trigger any watchers/dependents\n      // this.localFilter = this.filterSanitize(this.filter)\n      // Set the initial filtered state in a `$nextTick()` so that\n      // we trigger a filtered event if needed\n\n      this.$nextTick(function () {\n        _this2.isFiltered = Boolean(_this2.localFilter);\n      });\n    },\n    beforeDestroy: function beforeDestroy()\n    /* istanbul ignore next */\n    {\n      clearTimeout(this.$_filterTimer);\n      this.$_filterTimer = null;\n    },\n    methods: {\n      filterSanitize: function filterSanitize(criteria) {\n        // Sanitizes filter criteria based on internal or external filtering\n        if (this.localFiltering && !this.localFilterFn && !(isString(criteria) || isRegExp(criteria))) {\n          // If using internal filter function, which only accepts string or RegExp,\n          // return '' to signify no filter\n          return '';\n        } // Could be a string, object or array, as needed by external filter function\n        // We use `cloneDeep` to ensure we have a new copy of an object or array\n        // without Vue's reactive observers\n\n\n        return cloneDeep(criteria);\n      },\n      // Filter Function factories\n      filterFnFactory: function filterFnFactory(filterFn, criteria) {\n        // Wrapper factory for external filter functions\n        // Wrap the provided filter-function and return a new function\n        // Returns `null` if no filter-function defined or if criteria is falsey\n        // Rather than directly grabbing `this.computedLocalFilterFn` or `this.filterFunction`\n        // we have it passed, so that the caller computed prop will be reactive to changes\n        // in the original filter-function (as this routine is a method)\n        if (!filterFn || !isFunction(filterFn) || !criteria || looseEqual(criteria, []) || looseEqual(criteria, {})) {\n          return null;\n        } // Build the wrapped filter test function, passing the criteria to the provided function\n\n\n        var fn = function fn(item) {\n          // Generated function returns true if the criteria matches part\n          // of the serialized data, otherwise false\n          return filterFn(item, criteria);\n        }; // Return the wrapped function\n\n\n        return fn;\n      },\n      defaultFilterFnFactory: function defaultFilterFnFactory(criteria) {\n        var _this3 = this;\n\n        // Generates the default filter function, using the given filter criteria\n        // Returns `null` if no criteria or criteria format not supported\n        if (!criteria || !(isString(criteria) || isRegExp(criteria))) {\n          // Built in filter can only support strings or RegExp criteria (at the moment)\n          return null;\n        } // Build the RegExp needed for filtering\n\n\n        var regExp = criteria;\n\n        if (isString(regExp)) {\n          // Escape special RegExp characters in the string and convert contiguous\n          // whitespace to \\s+ matches\n          var pattern = escapeRegExp(criteria).replace(RX_SPACES$1, '\\\\s+'); // Build the RegExp (no need for global flag, as we only need\n          // to find the value once in the string)\n\n          regExp = new RegExp(\".*\".concat(pattern, \".*\"), 'i');\n        } // Generate the wrapped filter test function to use\n\n\n        var fn = function fn(item) {\n          // This searches all row values (and sub property values) in the entire (excluding\n          // special `_` prefixed keys), because we convert the record to a space-separated\n          // string containing all the value properties (recursively), even ones that are\n          // not visible (not specified in this.fields)\n          // Users can ignore filtering on specific fields, or on only certain fields,\n          // and can optionall specify searching results of fields with formatter\n          //\n          // TODO: Enable searching on scoped slots (optional, as it will be SLOW)\n          //\n          // Generated function returns true if the criteria matches part of\n          // the serialized data, otherwise false\n          //\n          // We set `lastIndex = 0` on the `RegExp` in case someone specifies the `/g` global flag\n          regExp.lastIndex = 0;\n          return regExp.test(stringifyRecordValues(item, _this3.computedFilterIgnored, _this3.computedFilterIncluded, _this3.computedFieldsObj));\n        }; // Return the generated function\n\n\n        return fn;\n      }\n    }\n  };\n\n  /*\n   * Consistent and stable sort function across JavaScript platforms\n   *\n   * Inconsistent sorts can cause SSR problems between client and server\n   * such as in <b-table> if sortBy is applied to the data on server side render.\n   * Chrome and V8 native sorts are inconsistent/unstable\n   *\n   * This function uses native sort with fallback to index compare when the a and b\n   * compare returns 0\n   *\n   * Algorithm based on:\n   * https://stackoverflow.com/questions/1427608/fast-stable-sorting-algorithm-implementation-in-javascript/45422645#45422645\n   *\n   * @param {array} array to sort\n   * @param {function} sort compare function\n   * @return {array}\n   */\n  var stableSort = function stableSort(array, compareFn) {\n    // Using `.bind(compareFn)` on the wrapped anonymous function improves\n    // performance by avoiding the function call setup. We don't use an arrow\n    // function here as it binds `this` to the `stableSort` context rather than\n    // the `compareFn` context, which wouldn't give us the performance increase.\n    return array.map(function (a, index) {\n      return [index, a];\n    }).sort(function (a, b) {\n      return this(a[1], b[1]) || a[0] - b[0];\n    }.bind(compareFn)).map(function (e) {\n      return e[1];\n    });\n  };\n\n  //\n  // TODO: Add option to sort by multiple columns (tri-state per column,\n  //       plus order of columns in sort)  where sortBy could be an array\n  //       of objects `[ {key: 'foo', sortDir: 'asc'}, {key:'bar', sortDir: 'desc'} ...]`\n  //       or an array of arrays `[ ['foo','asc'], ['bar','desc'] ]`\n  //       Multisort will most likely be handled in mixin-sort.js by\n  //       calling this method for each sortBy\n\n  var defaultSortCompare = function defaultSortCompare(a, b, sortBy, sortDesc, formatter, localeOpts, locale, nullLast) {\n    var aa = get(a, sortBy, null);\n    var bb = get(b, sortBy, null);\n\n    if (isFunction(formatter)) {\n      aa = formatter(aa, sortBy, a);\n      bb = formatter(bb, sortBy, b);\n    }\n\n    aa = isUndefinedOrNull(aa) ? '' : aa;\n    bb = isUndefinedOrNull(bb) ? '' : bb;\n\n    if (isDate(aa) && isDate(bb) || isNumber(aa) && isNumber(bb)) {\n      // Special case for comparing dates and numbers\n      // Internally dates are compared via their epoch number values\n      return aa < bb ? -1 : aa > bb ? 1 : 0;\n    } else if (nullLast && aa === '' && bb !== '') {\n      // Special case when sorting null/undefined/empty string last\n      return 1;\n    } else if (nullLast && aa !== '' && bb === '') {\n      // Special case when sorting null/undefined/empty string last\n      return -1;\n    } // Do localized string comparison\n\n\n    return stringifyObjectValues(aa).localeCompare(stringifyObjectValues(bb), locale, localeOpts);\n  };\n\n  var sortingMixin = {\n    props: {\n      sortBy: {\n        type: String,\n        default: ''\n      },\n      sortDesc: {\n        // TODO: Make this tri-state: true, false, null\n        type: Boolean,\n        default: false\n      },\n      sortDirection: {\n        // This prop is named incorrectly\n        // It should be `initialSortDirection` as it is a bit misleading\n        // (not to mention it screws up the ARIA label on the headers)\n        type: String,\n        default: 'asc',\n        validator: function validator(direction) {\n          return arrayIncludes(['asc', 'desc', 'last'], direction);\n        }\n      },\n      sortCompare: {\n        type: Function,\n        default: null\n      },\n      sortCompareOptions: {\n        // Supported localCompare options, see `options` section of:\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n        type: Object,\n        default: function _default() {\n          return {\n            numeric: true\n          };\n        }\n      },\n      sortCompareLocale: {\n        // String: locale code\n        // Array: array of Locale strings\n        type: [String, Array] // default: undefined\n\n      },\n      sortNullLast: {\n        // Sort null and undefined to appear last\n        type: Boolean,\n        default: false\n      },\n      noSortReset: {\n        // Another prop that should have had a better name.\n        // It should be noSortClear (on non-sortable headers).\n        // We will need to make sure the documentation is clear on what\n        // this prop does (as well as in the code for future reference)\n        type: Boolean,\n        default: false\n      },\n      labelSortAsc: {\n        type: String,\n        default: 'Click to sort Ascending'\n      },\n      labelSortDesc: {\n        type: String,\n        default: 'Click to sort Descending'\n      },\n      labelSortClear: {\n        type: String,\n        default: 'Click to clear sorting'\n      },\n      noLocalSorting: {\n        type: Boolean,\n        default: false\n      },\n      noFooterSorting: {\n        type: Boolean,\n        default: false\n      },\n      sortIconLeft: {\n        // Place the sorting icon on the left of the header cells\n        type: Boolean,\n        default: false\n      }\n    },\n    data: function data() {\n      return {\n        localSortBy: this.sortBy || '',\n        localSortDesc: this.sortDesc || false\n      };\n    },\n    computed: {\n      localSorting: function localSorting() {\n        return this.hasProvider ? !!this.noProviderSorting : !this.noLocalSorting;\n      },\n      isSortable: function isSortable() {\n        return this.computedFields.some(function (f) {\n          return f.sortable;\n        });\n      },\n      sortedItems: function sortedItems() {\n        // Sorts the filtered items and returns a new array of the sorted items\n        // or the original items array if not sorted.\n        var items = (this.filteredItems || this.localItems || []).slice();\n        var sortBy = this.localSortBy;\n        var sortDesc = this.localSortDesc;\n        var sortCompare = this.sortCompare;\n        var localSorting = this.localSorting;\n\n        var sortOptions = _objectSpread2({}, this.sortCompareOptions, {\n          usage: 'sort'\n        });\n\n        var sortLocale = this.sortCompareLocale || undefined;\n        var nullLast = this.sortNullLast;\n\n        if (sortBy && localSorting) {\n          var field = this.computedFieldsObj[sortBy] || {};\n          var sortByFormatted = field.sortByFormatted;\n          var formatter = isFunction(sortByFormatted) ? sortByFormatted : sortByFormatted ? this.getFieldFormatter(sortBy) : undefined; // `stableSort` returns a new array, and leaves the original array intact\n\n          return stableSort(items, function (a, b) {\n            var result = null;\n\n            if (isFunction(sortCompare)) {\n              // Call user provided sortCompare routine\n              result = sortCompare(a, b, sortBy, sortDesc, formatter, sortOptions, sortLocale);\n            }\n\n            if (isUndefinedOrNull(result) || result === false) {\n              // Fallback to built-in defaultSortCompare if sortCompare\n              // is not defined or returns null/false\n              result = defaultSortCompare(a, b, sortBy, sortDesc, formatter, sortOptions, sortLocale, nullLast);\n            } // Negate result if sorting in descending order\n\n\n            return (result || 0) * (sortDesc ? -1 : 1);\n          });\n        }\n\n        return items;\n      }\n    },\n    watch: {\n      isSortable: function isSortable(newVal)\n      /* istanbul ignore next: pain in the butt to test */\n      {\n        if (newVal) {\n          if (this.isSortable) {\n            this.$on('head-clicked', this.handleSort);\n          }\n        } else {\n          this.$off('head-clicked', this.handleSort);\n        }\n      },\n      sortDesc: function sortDesc(newVal) {\n        if (newVal === this.localSortDesc) {\n          /* istanbul ignore next */\n          return;\n        }\n\n        this.localSortDesc = newVal || false;\n      },\n      sortBy: function sortBy(newVal) {\n        if (newVal === this.localSortBy) {\n          /* istanbul ignore next */\n          return;\n        }\n\n        this.localSortBy = newVal || '';\n      },\n      // Update .sync props\n      localSortDesc: function localSortDesc(newVal, oldVal) {\n        // Emit update to sort-desc.sync\n        if (newVal !== oldVal) {\n          this.$emit('update:sortDesc', newVal);\n        }\n      },\n      localSortBy: function localSortBy(newVal, oldVal) {\n        if (newVal !== oldVal) {\n          this.$emit('update:sortBy', newVal);\n        }\n      }\n    },\n    created: function created() {\n      if (this.isSortable) {\n        this.$on('head-clicked', this.handleSort);\n      }\n    },\n    methods: {\n      // Handlers\n      // Need to move from thead-mixin\n      handleSort: function handleSort(key, field, evt, isFoot) {\n        var _this = this;\n\n        if (!this.isSortable) {\n          /* istanbul ignore next */\n          return;\n        }\n\n        if (isFoot && this.noFooterSorting) {\n          return;\n        } // TODO: make this tri-state sorting\n        // cycle desc => asc => none => desc => ...\n\n\n        var sortChanged = false;\n\n        var toggleLocalSortDesc = function toggleLocalSortDesc() {\n          var sortDirection = field.sortDirection || _this.sortDirection;\n\n          if (sortDirection === 'asc') {\n            _this.localSortDesc = false;\n          } else if (sortDirection === 'desc') {\n            _this.localSortDesc = true;\n          }\n        };\n\n        if (field.sortable) {\n          if (key === this.localSortBy) {\n            // Change sorting direction on current column\n            this.localSortDesc = !this.localSortDesc;\n          } else {\n            // Start sorting this column ascending\n            this.localSortBy = key; // this.localSortDesc = false\n\n            toggleLocalSortDesc();\n          }\n\n          sortChanged = true;\n        } else if (this.localSortBy && !this.noSortReset) {\n          this.localSortBy = '';\n          toggleLocalSortDesc();\n          sortChanged = true;\n        }\n\n        if (sortChanged) {\n          // Sorting parameters changed\n          this.$emit('sort-changed', this.context);\n        }\n      },\n      // methods to compute classes and attrs for thead>th cells\n      sortTheadThClasses: function sortTheadThClasses(key, field, isFoot) {\n        return {\n          // If sortable and sortIconLeft are true, then place sort icon on the left\n          'b-table-sort-icon-left': field.sortable && this.sortIconLeft && !(isFoot && this.noFooterSorting)\n        };\n      },\n      sortTheadThAttrs: function sortTheadThAttrs(key, field, isFoot) {\n        if (!this.isSortable || isFoot && this.noFooterSorting) {\n          // No attributes if not a sortable table\n          return {};\n        }\n\n        var sortable = field.sortable; // Assemble the aria-sort attribute value\n\n        var ariaSort = sortable && this.localSortBy === key ? this.localSortDesc ? 'descending' : 'ascending' : sortable ? 'none' : null; // Return the attribute\n\n        return {\n          'aria-sort': ariaSort\n        };\n      },\n      sortTheadThLabel: function sortTheadThLabel(key, field, isFoot) {\n        // A label to be placed in an `.sr-only` element in the header cell\n        if (!this.isSortable || isFoot && this.noFooterSorting) {\n          // No label if not a sortable table\n          return null;\n        }\n\n        var sortable = field.sortable; // The correctness of these labels is very important for screen-reader users.\n\n        var labelSorting = '';\n\n        if (sortable) {\n          if (this.localSortBy === key) {\n            // currently sorted sortable column.\n            labelSorting = this.localSortDesc ? this.labelSortAsc : this.labelSortDesc;\n          } else {\n            // Not currently sorted sortable column.\n            // Not using nested ternary's here for clarity/readability\n            // Default for ariaLabel\n            labelSorting = this.localSortDesc ? this.labelSortDesc : this.labelSortAsc; // Handle sortDirection setting\n\n            var sortDirection = this.sortDirection || field.sortDirection;\n\n            if (sortDirection === 'asc') {\n              labelSorting = this.labelSortAsc;\n            } else if (sortDirection === 'desc') {\n              labelSorting = this.labelSortDesc;\n            }\n          }\n        } else if (!this.noSortReset) {\n          // Non sortable column\n          labelSorting = this.localSortBy ? this.labelSortClear : '';\n        } // Return the sr-only sort label or null if no label\n\n\n        return trim(labelSorting) || null;\n      }\n    }\n  };\n\n  var paginationMixin$1 = {\n    props: {\n      perPage: {\n        type: [Number, String],\n        default: 0\n      },\n      currentPage: {\n        type: [Number, String],\n        default: 1\n      }\n    },\n    computed: {\n      localPaging: function localPaging() {\n        return this.hasProvider ? !!this.noProviderPaging : true;\n      },\n      paginatedItems: function paginatedItems() {\n        var items = this.sortedItems || this.filteredItems || this.localItems || [];\n        var currentPage = Math.max(parseInt(this.currentPage, 10) || 1, 1);\n        var perPage = Math.max(parseInt(this.perPage, 10) || 0, 0); // Apply local pagination\n\n        if (this.localPaging && !!perPage) {\n          // Grab the current page of data (which may be past filtered items limit)\n          items = items.slice((currentPage - 1) * perPage, currentPage * perPage);\n        } // Return the items to display in the table\n\n\n        return items;\n      }\n    }\n  };\n\n  var captionMixin = {\n    props: {\n      // `caption-top` is part of table-redere mixin (styling)\n      // captionTop: {\n      //   type: Boolean,\n      //   default: false\n      // },\n      caption: {\n        type: String,\n        default: null\n      },\n      captionHtml: {\n        type: String\n      }\n    },\n    computed: {\n      captionId: function captionId() {\n        // Even though `this.safeId` looks like a method, it is a computed prop\n        // that returns a new function if the underlying ID changes\n        return this.isStacked ? this.safeId('_caption_') : null;\n      }\n    },\n    methods: {\n      renderCaption: function renderCaption() {\n        var h = this.$createElement; // Build the caption\n\n        var $captionSlot = this.normalizeSlot('table-caption');\n        var $caption = h();\n\n        if ($captionSlot || this.caption || this.captionHtml) {\n          var data = {\n            key: 'caption',\n            attrs: {\n              id: this.captionId\n            }\n          };\n\n          if (!$captionSlot) {\n            data.domProps = htmlOrText(this.captionHtml, this.caption);\n          }\n\n          $caption = h('caption', data, [$captionSlot]);\n        }\n\n        return $caption;\n      }\n    }\n  };\n\n  var colgroupMixin = {\n    methods: {\n      renderColgroup: function renderColgroup() {\n        var h = this.$createElement;\n        var fields = this.computedFields;\n        var $colgroup = h();\n\n        if (this.hasNormalizedSlot('table-colgroup')) {\n          $colgroup = h('colgroup', {\n            key: 'colgroup'\n          }, [this.normalizeSlot('table-colgroup', {\n            columns: fields.length,\n            fields: fields\n          })]);\n        }\n\n        return $colgroup;\n      }\n    }\n  };\n\n  var TABLE_TAG_NAMES = ['TD', 'TH', 'TR']; // Returns `true` if we should ignore the click/double-click/keypress event\n  // Avoids having the user need to use `@click.stop` on the form control\n\n  var filterEvent = function filterEvent(evt) {\n    // Exit early when we don't have a target element\n    if (!evt || !evt.target) {\n      /* istanbul ignore next */\n      return false;\n    }\n\n    var el = evt.target; // Exit early when element is disabled or a table element\n\n    if (el.disabled || TABLE_TAG_NAMES.indexOf(el.tagName) !== -1) {\n      return false;\n    } // Ignore the click when it was inside a dropdown menu\n\n\n    if (closest('.dropdown-menu', el)) {\n      return true;\n    }\n\n    var label = el.tagName === 'LABEL' ? el : closest('label', el); // If the label's form control is not disabled then we don't propagate event\n    // Modern browsers have `label.control` that references the associated input, but IE 11\n    // does not have this property on the label element, so we resort to DOM lookups\n\n    if (label) {\n      var labelFor = getAttr(label, 'for');\n      var input = labelFor ? getById(labelFor) : select('input, select, textarea', label);\n\n      if (input && !input.disabled) {\n        return true;\n      }\n    } // Otherwise check if the event target matches one of the selectors in the\n    // event filter (i.e. anchors, non disabled inputs, etc.)\n    // Return `true` if we should ignore the event\n\n\n    return matches(el, EVENT_FILTER);\n  };\n\n  // Used to filter out click events caused by the mouse up at end of selection\n  //\n  // Accepts an element as only argument to test to see if selection overlaps or is\n  // contained within the element\n\n  var textSelectionActive = function textSelectionActive() {\n    var el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n    var sel = getSel();\n    return sel && sel.toString().trim() !== '' && sel.containsNode && isElement(el) ? sel.containsNode(el, true) : false;\n  };\n\n  var props$T = {\n    headVariant: {\n      // Also sniffed by <b-tr> / <b-td> / <b-th>\n      type: String,\n      // supported values: 'lite', 'dark', or null\n      default: null\n    }\n  }; // @vue/component\n\n  var BThead =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BThead',\n    mixins: [normalizeSlotMixin],\n    inheritAttrs: false,\n    provide: function provide() {\n      return {\n        bvTableRowGroup: this\n      };\n    },\n    inject: {\n      bvTable: {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        default: function _default()\n        /* istanbul ignore next */\n        {\n          return {};\n        }\n      }\n    },\n    props: props$T,\n    computed: {\n      isThead: function isThead() {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        return true;\n      },\n      isDark: function isDark() {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        return this.bvTable.dark;\n      },\n      isStacked: function isStacked() {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        return this.bvTable.isStacked;\n      },\n      isResponsive: function isResponsive() {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        return this.bvTable.isResponsive;\n      },\n      isStickyHeader: function isStickyHeader() {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        // Needed to handle header background classes, due to lack of\n        // background color inheritance with Bootstrap v4 table CSS\n        // Sticky headers only apply to cells in table `thead`\n        return !this.isStacked && this.bvTable.stickyHeader;\n      },\n      hasStickyHeader: function hasStickyHeader() {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        // Needed to handle header background classes, due to lack of\n        // background color inheritance with Bootstrap v4 table CSS\n        return !this.isStacked && this.bvTable.stickyHeader;\n      },\n      tableVariant: function tableVariant() {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        return this.bvTable.tableVariant;\n      },\n      theadClasses: function theadClasses() {\n        return [this.headVariant ? \"thead-\".concat(this.headVariant) : null];\n      },\n      theadAttrs: function theadAttrs() {\n        return _objectSpread2({\n          role: 'rowgroup'\n        }, this.$attrs);\n      }\n    },\n    render: function render(h) {\n      return h('thead', {\n        class: this.theadClasses,\n        attrs: this.theadAttrs,\n        // Pass down any native listeners\n        on: this.$listeners\n      }, this.normalizeSlot('default'));\n    }\n  });\n\n  var props$U = {\n    footVariant: {\n      type: String,\n      // supported values: 'lite', 'dark', or null\n      default: null\n    }\n  }; // @vue/component\n\n  var BTfoot =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BTfoot',\n    mixins: [normalizeSlotMixin],\n    inheritAttrs: false,\n    provide: function provide() {\n      return {\n        bvTableRowGroup: this\n      };\n    },\n    inject: {\n      bvTable: {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        default: function _default()\n        /* istanbul ignore next */\n        {\n          return {};\n        }\n      }\n    },\n    props: props$U,\n    computed: {\n      isTfoot: function isTfoot() {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        return true;\n      },\n      isDark: function isDark()\n      /* istanbul ignore next: Not currently sniffed in tests */\n      {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        return this.bvTable.dark;\n      },\n      isStacked: function isStacked() {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        return this.bvTable.isStacked;\n      },\n      isResponsive: function isResponsive() {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        return this.bvTable.isResponsive;\n      },\n      isStickyHeader: function isStickyHeader() {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        // Sticky headers are only supported in thead\n        return false;\n      },\n      hasStickyHeader: function hasStickyHeader() {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        // Needed to handle header background classes, due to lack of\n        // background color inheritance with Bootstrap v4 table CSS\n        return !this.isStacked && this.bvTable.stickyHeader;\n      },\n      tableVariant: function tableVariant()\n      /* istanbul ignore next: Not currently sniffed in tests */\n      {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        return this.bvTable.tableVariant;\n      },\n      tfootClasses: function tfootClasses() {\n        return [this.footVariant ? \"thead-\".concat(this.footVariant) : null];\n      },\n      tfootAttrs: function tfootAttrs() {\n        return _objectSpread2({\n          role: 'rowgroup'\n        }, this.$attrs);\n      }\n    },\n    render: function render(h) {\n      return h('tfoot', {\n        class: this.tfootClasses,\n        attrs: this.tfootAttrs,\n        // Pass down any native listeners\n        on: this.$listeners\n      }, this.normalizeSlot('default'));\n    }\n  });\n\n  var props$V = {\n    variant: {\n      type: String,\n      default: null\n    }\n  };\n  var LIGHT = 'light';\n  var DARK = 'dark'; // @vue/component\n\n  var BTr =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BTr',\n    mixins: [normalizeSlotMixin],\n    inheritAttrs: false,\n    provide: function provide() {\n      return {\n        bvTableTr: this\n      };\n    },\n    inject: {\n      bvTableRowGroup: {\n        default: function _default()\n        /* istanbul ignore next */\n        {\n          return {};\n        }\n      }\n    },\n    props: props$V,\n    computed: {\n      inTbody: function inTbody() {\n        // Sniffed by <b-td> / <b-th>\n        return this.bvTableRowGroup.isTbody;\n      },\n      inThead: function inThead() {\n        // Sniffed by <b-td> / <b-th>\n        return this.bvTableRowGroup.isThead;\n      },\n      inTfoot: function inTfoot() {\n        // Sniffed by <b-td> / <b-th>\n        return this.bvTableRowGroup.isTfoot;\n      },\n      isDark: function isDark() {\n        // Sniffed by <b-td> / <b-th>\n        return this.bvTableRowGroup.isDark;\n      },\n      isStacked: function isStacked() {\n        // Sniffed by <b-td> / <b-th>\n        return this.bvTableRowGroup.isStacked;\n      },\n      isResponsive: function isResponsive() {\n        // Sniffed by <b-td> / <b-th>\n        return this.bvTableRowGroup.isResponsive;\n      },\n      isStickyHeader: function isStickyHeader() {\n        // Sniffed by <b-td> / <b-th>\n        // Sticky headers are only supported in thead\n        return this.bvTableRowGroup.isStickyHeader;\n      },\n      hasStickyHeader: function hasStickyHeader() {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        // Needed to handle header background classes, due to lack of\n        // background color inheritance with Bootstrap v4 table CSS\n        return !this.isStacked && this.bvTableRowGroup.hasStickyHeader;\n      },\n      tableVariant: function tableVariant() {\n        // Sniffed by <b-td> / <b-th>\n        return this.bvTableRowGroup.tableVariant;\n      },\n      headVariant: function headVariant() {\n        // Sniffed by <b-td> / <b-th>\n        return this.inThead ? this.bvTableRowGroup.headVariant : null;\n      },\n      footVariant: function footVariant() {\n        // Sniffed by <b-td> / <b-th>\n        return this.inTfoot ? this.bvTableRowGroup.footVariant : null;\n      },\n      isRowDark: function isRowDark() {\n        return this.headVariant === LIGHT || this.footVariant === LIGHT ? false : this.headVariant === DARK || this.footVariant === DARK ? true : this.isDark;\n      },\n      trClasses: function trClasses() {\n        return [this.variant ? \"\".concat(this.isRowDark ? 'bg' : 'table', \"-\").concat(this.variant) : null];\n      },\n      trAttrs: function trAttrs() {\n        return _objectSpread2({\n          role: 'row'\n        }, this.$attrs);\n      }\n    },\n    render: function render(h) {\n      return h('tr', {\n        class: this.trClasses,\n        attrs: this.trAttrs,\n        // Pass native listeners to child\n        on: this.$listeners\n      }, this.normalizeSlot('default'));\n    }\n  });\n\n  var digitsRx = /^\\d+$/; // Parse a rowspan or colspan into a digit (or null if < 1 or NaN)\n\n  var parseSpan = function parseSpan(val) {\n    val = parseInt(val, 10);\n    return digitsRx.test(String(val)) && val > 0 ? val : null;\n  };\n  /* istanbul ignore next */\n\n\n  var spanValidator = function spanValidator(val) {\n    return isUndefinedOrNull(val) || parseSpan(val) > 0;\n  };\n\n  var props$W = {\n    variant: {\n      type: String,\n      default: null\n    },\n    colspan: {\n      type: [Number, String],\n      default: null,\n      validator: spanValidator\n    },\n    rowspan: {\n      type: [Number, String],\n      default: null,\n      validator: spanValidator\n    },\n    stackedHeading: {\n      type: String,\n      default: null\n    },\n    stickyColumn: {\n      type: Boolean,\n      default: false\n    }\n  }; // @vue/component\n\n  var BTd =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BTableCell',\n    mixins: [normalizeSlotMixin],\n    inheritAttrs: false,\n    inject: {\n      bvTableTr: {\n        default: function _default()\n        /* istanbul ignore next */\n        {\n          return {};\n        }\n      }\n    },\n    props: props$W,\n    computed: {\n      tag: function tag() {\n        // Overridden by <b-th>\n        return 'td';\n      },\n      inTbody: function inTbody() {\n        return this.bvTableTr.inTbody;\n      },\n      inThead: function inThead() {\n        return this.bvTableTr.inThead;\n      },\n      inTfoot: function inTfoot() {\n        return this.bvTableTr.inTfoot;\n      },\n      isDark: function isDark() {\n        return this.bvTableTr.isDark;\n      },\n      isStacked: function isStacked() {\n        return this.bvTableTr.isStacked;\n      },\n      isStackedCell: function isStackedCell() {\n        // We only support stacked-heading in tbody in stacked mode\n        return this.inTbody && this.isStacked;\n      },\n      isResponsive: function isResponsive() {\n        return this.bvTableTr.isResponsive;\n      },\n      isStickyHeader: function isStickyHeader() {\n        // Needed to handle header background classes, due to lack of\n        // background color inheritance with Bootstrap v4 table CSS\n        // Sticky headers only apply to cells in table `thead`\n        return this.bvTableTr.isStickyHeader;\n      },\n      hasStickyHeader: function hasStickyHeader() {\n        // Needed to handle header background classes, due to lack of\n        // background color inheritance with Bootstrap v4 table CSS\n        return this.bvTableTr.hasStickyHeader;\n      },\n      isStickyColumn: function isStickyColumn() {\n        // Needed to handle background classes, due to lack of\n        // background color inheritance with Bootstrap v4 table CSS\n        // Sticky column cells are only available in responsive\n        // mode (horizontal scrolling) or when sticky header mode\n        // Applies to cells in `thead`, `tbody` and `tfoot`\n        return !this.isStacked && (this.isResponsive || this.hasStickyHeader) && this.stickyColumn;\n      },\n      rowVariant: function rowVariant() {\n        return this.bvTableTr.variant;\n      },\n      headVariant: function headVariant() {\n        return this.bvTableTr.headVariant;\n      },\n      footVariant: function footVariant()\n      /* istanbul ignore next: need to add in tests for footer variant */\n      {\n        return this.bvTableTr.footVariant;\n      },\n      tableVariant: function tableVariant() {\n        return this.bvTableTr.tableVariant;\n      },\n      computedColspan: function computedColspan() {\n        return parseSpan(this.colspan);\n      },\n      computedRowspan: function computedRowspan() {\n        return parseSpan(this.rowspan);\n      },\n      cellClasses: function cellClasses() {\n        // We use computed props here for improved performance by caching\n        // the results of the string interpolation\n        // TODO: need to add handling for footVariant\n        var variant = this.variant;\n\n        if (!variant && this.isStickyHeader && !this.headVariant || !variant && this.isStickyColumn) {\n          // Needed for sticky-header mode as Bootstrap v4 table cells do\n          // not inherit parent's background-color. Boo!\n          variant = this.rowVariant || this.tableVariant || 'b-table-default';\n        }\n\n        return [variant ? \"\".concat(this.isDark ? 'bg' : 'table', \"-\").concat(variant) : null, this.isStickyColumn ? 'b-table-sticky-column' : null];\n      },\n      cellAttrs: function cellAttrs() {\n        // We use computed props here for improved performance by caching\n        // the results of the object spread (Object.assign)\n        var headOrFoot = this.inThead || this.inTfoot; // Make sure col/rowspan's are > 0 or null\n\n        var colspan = this.computedColspan;\n        var rowspan = this.computedRowspan; // Default role and scope\n\n        var role = 'cell';\n        var scope = null; // Compute role and scope\n        // We only add scopes with an explicit span of 1 or greater\n\n        if (headOrFoot) {\n          // Header or footer cells\n          role = 'columnheader';\n          scope = colspan > 0 ? 'colspan' : 'col';\n        } else if (this.tag === 'th') {\n          // th's in tbody\n          role = 'rowheader';\n          scope = rowspan > 0 ? 'rowgroup' : 'row';\n        }\n\n        return _objectSpread2({\n          colspan: colspan,\n          rowspan: rowspan,\n          role: role,\n          scope: scope\n        }, this.$attrs, {\n          // Add in the stacked cell label data-attribute if in\n          // stacked mode (if a stacked heading label is provided)\n          'data-label': this.isStackedCell && !isUndefinedOrNull(this.stackedHeading) ? toString$1(this.stackedHeading) : null\n        });\n      }\n    },\n    render: function render(h) {\n      var content = [this.normalizeSlot('default')];\n      return h(this.tag, {\n        class: this.cellClasses,\n        attrs: this.cellAttrs,\n        // Transfer any native listeners\n        on: this.$listeners\n      }, [this.isStackedCell ? h('div', [content]) : content]);\n    }\n  });\n\n  var BTh =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BTh',\n    extends: BTd,\n    computed: {\n      tag: function tag() {\n        return 'th';\n      }\n    }\n  });\n\n  var theadMixin = {\n    props: {\n      headVariant: {\n        type: String,\n        // 'light', 'dark' or `null` (or custom)\n        default: function _default() {\n          return getComponentConfig('BTable', 'headVariant');\n        }\n      },\n      headRowVariant: {\n        type: String,\n        // Any Bootstrap theme variant (or custom)\n        default: null\n      },\n      theadClass: {\n        type: [String, Array, Object] // default: undefined\n\n      },\n      theadTrClass: {\n        type: [String, Array, Object] // default: undefined\n\n      }\n    },\n    methods: {\n      fieldClasses: function fieldClasses(field) {\n        // Header field (<th>) classes\n        return [field.class ? field.class : '', field.thClass ? field.thClass : ''];\n      },\n      headClicked: function headClicked(evt, field, isFoot) {\n        if (this.stopIfBusy && this.stopIfBusy(evt)) {\n          // If table is busy (via provider) then don't propagate\n          return;\n        } else if (filterEvent(evt)) {\n          // Clicked on a non-disabled control so ignore\n          return;\n        } else if (textSelectionActive(this.$el)) {\n          // User is selecting text, so ignore\n\n          /* istanbul ignore next: JSDOM doesn't support getSelection() */\n          return;\n        }\n\n        evt.stopPropagation();\n        evt.preventDefault();\n        this.$emit('head-clicked', field.key, field, evt, isFoot);\n      },\n      renderThead: function renderThead() {\n        var _this = this;\n\n        var isFoot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var h = this.$createElement;\n        var fields = this.computedFields || [];\n\n        if (this.isStackedAlways || fields.length === 0) {\n          // In always stacked mode, we don't bother rendering the head/foot\n          // Or if no field headings (empty table)\n          return h();\n        } // Reference to `selectAllRows` and `clearSelected()`, if table is selectable\n\n\n        var selectAllRows = this.isSelectable ? this.selectAllRows : function () {};\n        var clearSelected = this.isSelectable ? this.clearSelected : function () {}; // Helper function to generate a field <th> cell\n\n        var makeCell = function makeCell(field, colIndex) {\n          var ariaLabel = null;\n\n          if (!field.label.trim() && !field.headerTitle) {\n            // In case field's label and title are empty/blank\n            // We need to add a hint about what the column is about for non-sighted users\n\n            /* istanbul ignore next */\n            ariaLabel = startCase(field.key);\n          }\n\n          var hasHeadClickListener = _this.hasListener('head-clicked') || _this.isSortable;\n\n          var handlers = {};\n\n          if (hasHeadClickListener) {\n            handlers.click = function (evt) {\n              _this.headClicked(evt, field, isFoot);\n            };\n\n            handlers.keydown = function (evt) {\n              var keyCode = evt.keyCode;\n\n              if (keyCode === KEY_CODES.ENTER || keyCode === KEY_CODES.SPACE) {\n                _this.headClicked(evt, field, isFoot);\n              }\n            };\n          }\n\n          var sortAttrs = _this.isSortable ? _this.sortTheadThAttrs(field.key, field, isFoot) : {};\n          var sortClass = _this.isSortable ? _this.sortTheadThClasses(field.key, field, isFoot) : null;\n          var sortLabel = _this.isSortable ? _this.sortTheadThLabel(field.key, field, isFoot) : null;\n          var data = {\n            key: field.key,\n            class: [_this.fieldClasses(field), sortClass],\n            props: {\n              variant: field.variant,\n              stickyColumn: field.stickyColumn\n            },\n            style: field.thStyle || {},\n            attrs: _objectSpread2({\n              // We only add a tabindex of 0 if there is a head-clicked listener\n              tabindex: hasHeadClickListener ? '0' : null,\n              abbr: field.headerAbbr || null,\n              title: field.headerTitle || null,\n              'aria-colindex': colIndex + 1,\n              'aria-label': ariaLabel\n            }, _this.getThValues(null, field.key, field.thAttr, isFoot ? 'foot' : 'head', {}), {}, sortAttrs),\n            on: handlers\n          }; // Handle edge case where in-document templates are used with new\n          // `v-slot:name` syntax where the browser lower-cases the v-slot's\n          // name (attributes become lower cased when parsed by the browser)\n          // We have replaced the square bracket syntax with round brackets\n          // to prevent confusion with dynamic slot names\n\n          var slotNames = [\"head(\".concat(field.key, \")\"), \"head(\".concat(field.key.toLowerCase(), \")\"), 'head()'];\n\n          if (isFoot) {\n            // Footer will fallback to header slot names\n            slotNames = [\"foot(\".concat(field.key, \")\"), \"foot(\".concat(field.key.toLowerCase(), \")\"), 'foot()'].concat(_toConsumableArray(slotNames));\n          }\n\n          var scope = {\n            label: field.label,\n            column: field.key,\n            field: field,\n            isFoot: isFoot,\n            // Add in row select methods\n            selectAllRows: selectAllRows,\n            clearSelected: clearSelected\n          };\n          var content = _this.normalizeSlot(slotNames, scope) || (field.labelHtml ? h('div', {\n            domProps: htmlOrText(field.labelHtml)\n          }) : field.label);\n          var srLabel = sortLabel ? h('span', {\n            staticClass: 'sr-only'\n          }, \" (\".concat(sortLabel, \")\")) : null; // Return the header cell\n\n          return h(BTh, data, [content, srLabel].filter(identity));\n        }; // Generate the array of <th> cells\n\n\n        var $cells = fields.map(makeCell).filter(identity); // Genrate the row(s)\n\n        var $trs = [];\n\n        if (isFoot) {\n          var trProps = {\n            variant: isUndefinedOrNull(this.footRowVariant) ? this.headRowVariant : this.footRowVariant\n          };\n          $trs.push(h(BTr, {\n            class: this.tfootTrClass,\n            props: trProps\n          }, $cells));\n        } else {\n          var scope = {\n            columns: fields.length,\n            fields: fields,\n            // Add in row select methods\n            selectAllRows: selectAllRows,\n            clearSelected: clearSelected\n          };\n          $trs.push(this.normalizeSlot('thead-top', scope) || h());\n          $trs.push(h(BTr, {\n            class: this.theadTrClass,\n            props: {\n              variant: this.headRowVariant\n            }\n          }, $cells));\n        }\n\n        return h(isFoot ? BTfoot : BThead, {\n          key: isFoot ? 'bv-tfoot' : 'bv-thead',\n          class: (isFoot ? this.tfootClass : this.theadClass) || null,\n          props: isFoot ? {\n            footVariant: this.footVariant || this.headVariant || null\n          } : {\n            headVariant: this.headVariant || null\n          }\n        }, $trs);\n      }\n    }\n  };\n\n  var tfootMixin = {\n    props: {\n      footClone: {\n        type: Boolean,\n        default: false\n      },\n      footVariant: {\n        type: String,\n        // 'dark', 'light', or `null` (or custom)\n        default: function _default() {\n          return getComponentConfig('BTable', 'footVariant');\n        }\n      },\n      footRowVariant: {\n        type: String,\n        // Any Bootstrap theme variant (or custom). Falls back to `headRowVariant`\n        default: null\n      },\n      tfootClass: {\n        type: [String, Array, Object],\n        default: null\n      },\n      tfootTrClass: {\n        type: [String, Array, Object],\n        default: null\n      }\n    },\n    methods: {\n      renderTFootCustom: function renderTFootCustom() {\n        var h = this.$createElement;\n\n        if (this.hasNormalizedSlot('custom-foot')) {\n          return h(BTfoot, {\n            key: 'bv-tfoot-custom',\n            class: this.tfootClass || null,\n            props: {\n              footVariant: this.footVariant || this.headVariant || null\n            }\n          }, this.normalizeSlot('custom-foot', {\n            items: this.computedItems.slice(),\n            fields: this.computedFields.slice(),\n            columns: this.computedFields.length\n          }));\n        } else {\n          return h();\n        }\n      },\n      renderTfoot: function renderTfoot() {\n        // Passing true to renderThead will make it render a tfoot\n        return this.footClone ? this.renderThead(true) : this.renderTFootCustom();\n      }\n    }\n  };\n\n  var props$X = {\n    tbodyTransitionProps: {\n      type: Object // default: undefined\n\n    },\n    tbodyTransitionHandlers: {\n      type: Object // default: undefined\n\n    }\n  }; // @vue/component\n\n  var BTbody =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BTbody',\n    mixins: [normalizeSlotMixin],\n    inheritAttrs: false,\n    provide: function provide() {\n      return {\n        bvTableRowGroup: this\n      };\n    },\n    inject: {\n      bvTable: {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        default: function _default()\n        /* istanbul ignore next */\n        {\n          return {};\n        }\n      }\n    },\n    props: props$X,\n    computed: {\n      isTbody: function isTbody() {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        return true;\n      },\n      isDark: function isDark() {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        return this.bvTable.dark;\n      },\n      isStacked: function isStacked() {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        return this.bvTable.isStacked;\n      },\n      isResponsive: function isResponsive() {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        return this.bvTable.isResponsive;\n      },\n      isStickyHeader: function isStickyHeader() {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        // Sticky headers are only supported in thead\n        return false;\n      },\n      hasStickyHeader: function hasStickyHeader() {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        // Needed to handle header background classes, due to lack of\n        // background color inheritance with Bootstrap v4 table CSS\n        return !this.isStacked && this.bvTable.stickyHeader;\n      },\n      tableVariant: function tableVariant()\n      /* istanbul ignore next: Not currently sniffed in tests */\n      {\n        // Sniffed by <b-tr> / <b-td> / <b-th>\n        return this.bvTable.tableVariant;\n      },\n      isTransitionGroup: function isTransitionGroup() {\n        return this.tbodyTransitionProps || this.tbodyTransitionHandlers;\n      },\n      tbodyAttrs: function tbodyAttrs() {\n        return _objectSpread2({\n          role: 'rowgroup'\n        }, this.$attrs);\n      },\n      tbodyProps: function tbodyProps() {\n        return this.tbodyTransitionProps ? _objectSpread2({}, this.tbodyTransitionProps, {\n          tag: 'tbody'\n        }) : {};\n      }\n    },\n    render: function render(h) {\n      var data = {\n        props: this.tbodyProps,\n        attrs: this.tbodyAttrs\n      };\n\n      if (this.isTransitionGroup) {\n        // We use native listeners if a transition group\n        // for any delegated events\n        data.on = this.tbodyTransitionHandlers || {};\n        data.nativeOn = this.$listeners || {};\n      } else {\n        // Otherwise we place any listeners on the tbody element\n        data.on = this.$listeners || {};\n      }\n\n      return h(this.isTransitionGroup ? 'transition-group' : 'tbody', data, this.normalizeSlot('default'));\n    }\n  });\n\n  var detailsSlotName = 'row-details';\n  var tbodyRowMixin = {\n    props: {\n      tbodyTrClass: {\n        type: [String, Array, Object, Function],\n        default: null\n      },\n      tbodyTrAttr: {\n        type: [Object, Function],\n        default: null\n      },\n      detailsTdClass: {\n        type: [String, Array, Object],\n        default: null\n      }\n    },\n    methods: {\n      // Methods for computing classes, attributes and styles for table cells\n      getTdValues: function getTdValues(item, key, tdValue, defValue) {\n        var parent = this.$parent;\n\n        if (tdValue) {\n          var value = get(item, key, '');\n\n          if (isFunction(tdValue)) {\n            return tdValue(value, key, item);\n          } else if (isString(tdValue) && isFunction(parent[tdValue])) {\n            return parent[tdValue](value, key, item);\n          }\n\n          return tdValue;\n        }\n\n        return defValue;\n      },\n      getThValues: function getThValues(item, key, thValue, type, defValue) {\n        var parent = this.$parent;\n\n        if (thValue) {\n          var value = get(item, key, '');\n\n          if (isFunction(thValue)) {\n            return thValue(value, key, item, type);\n          } else if (isString(thValue) && isFunction(parent[thValue])) {\n            return parent[thValue](value, key, item, type);\n          }\n\n          return thValue;\n        }\n\n        return defValue;\n      },\n      // Method to get the value for a field\n      getFormattedValue: function getFormattedValue(item, field) {\n        var key = field.key;\n        var formatter = this.getFieldFormatter(key);\n        var value = get(item, key, null);\n\n        if (isFunction(formatter)) {\n          value = formatter(value, key, item);\n        }\n\n        return isUndefinedOrNull(value) ? '' : value;\n      },\n      // Factory function methods\n      toggleDetailsFactory: function toggleDetailsFactory(hasDetailsSlot, item) {\n        var _this = this;\n\n        // Returns a function to toggle a row's details slot\n        return function () {\n          if (hasDetailsSlot) {\n            _this.$set(item, '_showDetails', !item._showDetails);\n          }\n        };\n      },\n      // Row event handlers\n      rowHovered: function rowHovered(evt) {\n        // `mouseenter` handler (non-bubbling)\n        // `this.tbodyRowEvtStopped` from tbody mixin\n        if (!this.tbodyRowEvtStopped(evt)) {\n          // `this.emitTbodyRowEvent` from tbody mixin\n          this.emitTbodyRowEvent('row-hovered', evt);\n        }\n      },\n      rowUnhovered: function rowUnhovered(evt) {\n        // `mouseleave` handler (non-bubbling)\n        // `this.tbodyRowEvtStopped` from tbody mixin\n        if (!this.tbodyRowEvtStopped(evt)) {\n          // `this.emitTbodyRowEvent` from tbody mixin\n          this.emitTbodyRowEvent('row-unhovered', evt);\n        }\n      },\n      // Render helpers\n      renderTbodyRowCell: function renderTbodyRowCell(field, colIndex, item, rowIndex) {\n        var _this2 = this;\n\n        // Renders a TD or TH for a row's field\n        var h = this.$createElement;\n        var hasDetailsSlot = this.hasNormalizedSlot(detailsSlotName);\n        var formatted = this.getFormattedValue(item, field);\n        var key = field.key;\n        var stickyColumn = !this.isStacked && (this.isResponsive || this.stickyHeader) && field.stickyColumn; // We only uses the helper components for sticky columns to\n        // improve performance of BTable/BTableLite by reducing the\n        // total number of vue instances created during render\n\n        var cellTag = stickyColumn ? field.isRowHeader ? BTh : BTd : field.isRowHeader ? 'th' : 'td';\n        var cellVariant = item._cellVariants && item._cellVariants[key] ? item._cellVariants[key] : field.variant || null;\n        var data = {\n          // For the Vue key, we concatenate the column index and\n          // field key (as field keys could be duplicated)\n          // TODO: Although we do prevent duplicate field keys...\n          //   So we could change this to: `row-${rowIndex}-cell-${key}`\n          key: \"row-\".concat(rowIndex, \"-cell-\").concat(colIndex, \"-\").concat(key),\n          class: [field.class ? field.class : '', this.getTdValues(item, key, field.tdClass, '')],\n          props: {},\n          attrs: _objectSpread2({\n            'aria-colindex': String(colIndex + 1)\n          }, field.isRowHeader ? this.getThValues(item, key, field.thAttr, 'row', {}) : this.getTdValues(item, key, field.tdAttr, {}))\n        };\n\n        if (stickyColumn) {\n          // We are using the helper BTd or BTh\n          data.props = {\n            stackedHeading: this.isStacked ? field.label : null,\n            stickyColumn: true,\n            variant: cellVariant\n          };\n        } else {\n          // Using native TD or TH element, so we need to\n          // add in the attributes and variant class\n          data.attrs['data-label'] = this.isStacked && !isUndefinedOrNull(field.label) ? toString$1(field.label) : null;\n          data.attrs.role = field.isRowHeader ? 'rowheader' : 'cell';\n          data.attrs.scope = field.isRowHeader ? 'row' : null; // Add in the variant class\n\n          if (cellVariant) {\n            data.class.push(\"\".concat(this.dark ? 'bg' : 'table', \"-\").concat(cellVariant));\n          }\n        }\n\n        var slotScope = {\n          item: item,\n          index: rowIndex,\n          field: field,\n          unformatted: get(item, key, ''),\n          value: formatted,\n          toggleDetails: this.toggleDetailsFactory(hasDetailsSlot, item),\n          detailsShowing: Boolean(item._showDetails)\n        }; // If table supports selectable mode, then add in the following scope\n        // this.supportsSelectableRows will be undefined if mixin isn't loaded\n\n        if (this.supportsSelectableRows) {\n          slotScope.rowSelected = this.isRowSelected(rowIndex);\n\n          slotScope.selectRow = function () {\n            return _this2.selectRow(rowIndex);\n          };\n\n          slotScope.unselectRow = function () {\n            return _this2.unselectRow(rowIndex);\n          };\n        } // The new `v-slot` syntax doesn't like a slot name starting with\n        // a square bracket and if using in-document HTML templates, the\n        // v-slot attributes are lower-cased by the browser.\n        // Switched to round bracket syntax to prevent confusion with\n        // dynamic slot name syntax.\n        // We look for slots in this order: `cell(${key})`, `cell(${key.toLowerCase()})`, 'cell()'\n        // Slot names are now cached by mixin tbody in `this.$_bodyFieldSlotNameCache`\n        // Will be `null` if no slot (or fallback slot) exists\n\n\n        var slotName = this.$_bodyFieldSlotNameCache[key];\n        var $childNodes = slotName ? this.normalizeSlot(slotName, slotScope) : toString$1(formatted);\n\n        if (this.isStacked) {\n          // We wrap in a DIV to ensure rendered as a single cell when visually stacked!\n          $childNodes = [h('div', [$childNodes])];\n        } // Render either a td or th cell\n\n\n        return h(cellTag, data, [$childNodes]);\n      },\n      renderTbodyRow: function renderTbodyRow(item, rowIndex) {\n        var _this3 = this;\n\n        // Renders an item's row (or rows if details supported)\n        var h = this.$createElement;\n        var fields = this.computedFields;\n        var tableStriped = this.striped;\n        var hasDetailsSlot = this.hasNormalizedSlot(detailsSlotName);\n        var rowShowDetails = item._showDetails && hasDetailsSlot;\n        var hasRowClickHandler = this.$listeners['row-clicked'] || this.hasSelectableRowClick; // We can return more than one TR if rowDetails enabled\n\n        var $rows = []; // Details ID needed for `aria-details` when details showing\n        // We set it to `null` when not showing so that attribute\n        // does not appear on the element\n\n        var detailsId = rowShowDetails ? this.safeId(\"_details_\".concat(rowIndex, \"_\")) : null; // For each item data field in row\n\n        var $tds = fields.map(function (field, colIndex) {\n          return _this3.renderTbodyRowCell(field, colIndex, item, rowIndex);\n        }); // Calculate the row number in the dataset (indexed from 1)\n\n        var ariaRowIndex = null;\n\n        if (this.currentPage && this.perPage && this.perPage > 0) {\n          ariaRowIndex = String((this.currentPage - 1) * this.perPage + rowIndex + 1);\n        } // Create a unique :key to help ensure that sub components are re-rendered rather than\n        // re-used, which can cause issues. If a primary key is not provided we use the rendered\n        // rows index within the tbody.\n        // See: https://github.com/bootstrap-vue/bootstrap-vue/issues/2410\n\n\n        var primaryKey = this.primaryKey;\n        var primaryKeyValue = toString$1(get(item, primaryKey)) || null;\n        var rowKey = primaryKeyValue || toString$1(rowIndex); // If primary key is provided, use it to generate a unique ID on each tbody > tr\n        // In the format of '{tableId}__row_{primaryKeyValue}'\n\n        var rowId = primaryKeyValue ? this.safeId(\"_row_\".concat(primaryKeyValue)) : null; // Selectable classes and attributes\n\n        var selectableClasses = this.selectableRowClasses ? this.selectableRowClasses(rowIndex) : {};\n        var selectableAttrs = this.selectableRowAttrs ? this.selectableRowAttrs(rowIndex) : {}; // Additional classes and attributes\n\n        var userTrClasses = isFunction(this.tbodyTrClass) ? this.tbodyTrClass(item, 'row') : this.tbodyTrClass;\n        var userTrAttrs = isFunction(this.tbodyTrAttr) ? this.tbodyTrAttr(item, 'row') : this.tbodyTrAttr; // Add the item row\n\n        $rows.push(h(BTr, {\n          key: \"__b-table-row-\".concat(rowKey, \"__\"),\n          ref: 'itemRows',\n          refInFor: true,\n          class: [userTrClasses, selectableClasses, rowShowDetails ? 'b-table-has-details' : ''],\n          props: {\n            variant: item._rowVariant || null\n          },\n          attrs: _objectSpread2({\n            id: rowId\n          }, userTrAttrs, {\n            // Users cannot override the following attributes\n            tabindex: hasRowClickHandler ? '0' : null,\n            'data-pk': primaryKeyValue || null,\n            'aria-details': detailsId,\n            'aria-owns': detailsId,\n            'aria-rowindex': ariaRowIndex\n          }, selectableAttrs),\n          on: {\n            // Note: These events are not A11Y friendly!\n            mouseenter: this.rowHovered,\n            mouseleave: this.rowUnhovered\n          }\n        }, $tds)); // Row Details slot\n\n        if (rowShowDetails) {\n          var detailsScope = {\n            item: item,\n            index: rowIndex,\n            fields: fields,\n            toggleDetails: this.toggleDetailsFactory(hasDetailsSlot, item)\n          }; // If table supports selectable mode, then add in the following scope\n          // this.supportsSelectableRows will be undefined if mixin isn't loaded\n\n          if (this.supportsSelectableRows) {\n            detailsScope.rowSelected = this.isRowSelected(rowIndex);\n\n            detailsScope.selectRow = function () {\n              return _this3.selectRow(rowIndex);\n            };\n\n            detailsScope.unselectRow = function () {\n              return _this3.unselectRow(rowIndex);\n            };\n          } // Render the details slot in a TD\n\n\n          var $details = h(BTd, {\n            props: {\n              colspan: fields.length\n            },\n            class: this.detailsTdClass\n          }, [this.normalizeSlot(detailsSlotName, detailsScope)]); // Add a hidden row to keep table row striping consistent when details showing\n          // Only added if the table is striped\n\n          if (tableStriped) {\n            $rows.push( // We don't use `BTr` here as we don't need the extra functionality\n            h('tr', {\n              key: \"__b-table-details-stripe__\".concat(rowKey),\n              staticClass: 'd-none',\n              attrs: {\n                'aria-hidden': 'true',\n                role: 'presentation'\n              }\n            }));\n          } // Add the actual details row\n\n\n          var userDetailsTrClasses = isFunction(this.tbodyTrClass) ? this.tbodyTrClass(item, detailsSlotName) : this.tbodyTrClass;\n          var userDetailsTrAttrs = isFunction(this.tbodyTrAttr) ? this.tbodyTrAttr(item, detailsSlotName) : this.tbodyTrAttr;\n          $rows.push(h(BTr, {\n            key: \"__b-table-details__\".concat(rowKey),\n            staticClass: 'b-table-details',\n            class: [userDetailsTrClasses],\n            props: {\n              variant: item._rowVariant || null\n            },\n            attrs: _objectSpread2({}, userDetailsTrAttrs, {\n              // Users cannot override the following attributes\n              id: detailsId,\n              tabindex: '-1'\n            })\n          }, [$details]));\n        } else if (hasDetailsSlot) {\n          // Only add the placeholder if a the table has a row-details slot defined (but not shown)\n          $rows.push(h());\n\n          if (tableStriped) {\n            // Add extra placeholder if table is striped\n            $rows.push(h());\n          }\n        } // Return the row(s)\n\n\n        return $rows;\n      }\n    }\n  };\n\n  var props$Y = _objectSpread2({}, props$X, {\n    tbodyClass: {\n      type: [String, Array, Object] // default: undefined\n\n    }\n  });\n\n  var tbodyMixin = {\n    mixins: [tbodyRowMixin],\n    props: props$Y,\n    methods: {\n      // Helper methods\n      getTbodyTrs: function getTbodyTrs() {\n        // Returns all the item TR elements (excludes detail and spacer rows)\n        // `this.$refs.itemRows` is an array of item TR components/elements\n        // Rows should all be B-TR components, but we map to TR elements\n        // Also note that `this.$refs.itemRows` may not always be in document order\n        var refs = this.$refs || {};\n        var tbody = refs.tbody ? refs.tbody.$el || refs.tbody : null;\n        var trs = (refs.itemRows || []).map(function (tr) {\n          return tr.$el || tr;\n        });\n        return tbody && tbody.children && tbody.children.length > 0 && trs && trs.length > 0 ? from(tbody.children).filter(function (tr) {\n          return arrayIncludes(trs, tr);\n        }) : [];\n      },\n      getTbodyTrIndex: function getTbodyTrIndex(el) {\n        // Returns index of a particular TBODY item TR\n        // We set `true` on closest to include self in result\n\n        /* istanbul ignore next: should not normally happen */\n        if (!isElement(el)) {\n          return -1;\n        }\n\n        var tr = el.tagName === 'TR' ? el : closest('tr', el, true);\n        return tr ? this.getTbodyTrs().indexOf(tr) : -1;\n      },\n      emitTbodyRowEvent: function emitTbodyRowEvent(type, evt) {\n        // Emits a row event, with the item object, row index and original event\n        if (type && this.hasListener(type) && evt && evt.target) {\n          var rowIndex = this.getTbodyTrIndex(evt.target);\n\n          if (rowIndex > -1) {\n            // The array of TRs correlate to the `computedItems` array\n            var item = this.computedItems[rowIndex];\n            this.$emit(type, item, rowIndex, evt);\n          }\n        }\n      },\n      tbodyRowEvtStopped: function tbodyRowEvtStopped(evt) {\n        return this.stopIfBusy && this.stopIfBusy(evt);\n      },\n      // Delegated row event handlers\n      onTbodyRowKeydown: function onTbodyRowKeydown(evt) {\n        // Keyboard navigation and row click emulation\n        var target = evt.target;\n\n        if (this.tbodyRowEvtStopped(evt) || target.tagName !== 'TR' || target !== document.activeElement || target.tabIndex !== 0) {\n          // Early exit if not an item row TR\n          return;\n        }\n\n        var keyCode = evt.keyCode;\n\n        if (arrayIncludes([KEY_CODES.ENTER, KEY_CODES.SPACE], keyCode)) {\n          // Emulated click for keyboard users, transfer to click handler\n          evt.stopPropagation();\n          evt.preventDefault();\n          this.onTBodyRowClicked(evt);\n        } else if (arrayIncludes([KEY_CODES.UP, KEY_CODES.DOWN, KEY_CODES.HOME, KEY_CODES.END], keyCode)) {\n          // Keyboard navigation\n          var rowIndex = this.getTbodyTrIndex(target);\n\n          if (rowIndex > -1) {\n            evt.stopPropagation();\n            evt.preventDefault();\n            var trs = this.getTbodyTrs();\n            var shift = evt.shiftKey;\n\n            if (keyCode === KEY_CODES.HOME || shift && keyCode === KEY_CODES.UP) {\n              // Focus first row\n              trs[0].focus();\n            } else if (keyCode === KEY_CODES.END || shift && keyCode === KEY_CODES.DOWN) {\n              // Focus last row\n              trs[trs.length - 1].focus();\n            } else if (keyCode === KEY_CODES.UP && rowIndex > 0) {\n              // Focus previous row\n              trs[rowIndex - 1].focus();\n            } else if (keyCode === KEY_CODES.DOWN && rowIndex < trs.length - 1) {\n              // Focus next row\n              trs[rowIndex + 1].focus();\n            }\n          }\n        }\n      },\n      onTBodyRowClicked: function onTBodyRowClicked(evt) {\n        if (this.tbodyRowEvtStopped(evt)) {\n          // If table is busy, then don't propagate\n          return;\n        } else if (filterEvent(evt) || textSelectionActive(this.$el)) {\n          // Clicked on a non-disabled control so ignore\n          // Or user is selecting text, so ignore\n          return;\n        }\n\n        this.emitTbodyRowEvent('row-clicked', evt);\n      },\n      onTbodyRowMiddleMouseRowClicked: function onTbodyRowMiddleMouseRowClicked(evt) {\n        if (!this.tbodyRowEvtStopped(evt) && evt.which === 2) {\n          this.emitTbodyRowEvent('row-middle-clicked', evt);\n        }\n      },\n      onTbodyRowContextmenu: function onTbodyRowContextmenu(evt) {\n        if (!this.tbodyRowEvtStopped(evt)) {\n          this.emitTbodyRowEvent('row-contextmenu', evt);\n        }\n      },\n      onTbodyRowDblClicked: function onTbodyRowDblClicked(evt) {\n        if (!this.tbodyRowEvtStopped(evt) && !filterEvent(evt)) {\n          this.emitTbodyRowEvent('row-dblclicked', evt);\n        }\n      },\n      // Note: Row hover handlers are handled by the tbody-row mixin\n      // As mouseenter/mouseleave events do not bubble\n      //\n      // Render Helper\n      renderTbody: function renderTbody() {\n        var _this = this;\n\n        // Render the tbody element and children\n        var items = this.computedItems; // Shortcut to `createElement` (could use `this._c()` instead)\n\n        var h = this.$createElement;\n        var hasRowClickHandler = this.hasListener('row-clicked') || this.hasSelectableRowClick; // Prepare the tbody rows\n\n        var $rows = []; // Add the item data rows or the busy slot\n\n        var $busy = this.renderBusy ? this.renderBusy() : null;\n\n        if ($busy) {\n          // If table is busy and a busy slot, then return only the busy \"row\" indicator\n          $rows.push($busy);\n        } else {\n          // Table isn't busy, or we don't have a busy slot\n          // Create a slot cache for improved performance when looking up cell slot names\n          // Values will be keyed by the field's `key` and will store the slot's name\n          // Slots could be dynamic (i.e. `v-if`), so we must compute on each render\n          // Used by tbody-row mixin render helper\n          var cache = {};\n          var defaultSlotName = this.hasNormalizedSlot('cell()') ? 'cell()' : null;\n          this.computedFields.forEach(function (field) {\n            var key = field.key;\n            var fullName = \"cell(\".concat(key, \")\");\n            var lowerName = \"cell(\".concat(key.toLowerCase(), \")\");\n            cache[key] = _this.hasNormalizedSlot(fullName) ? fullName : _this.hasNormalizedSlot(lowerName) ? lowerName : defaultSlotName;\n          }); // Created as a non-reactive property so to not trigger component updates\n          // Must be a fresh object each render\n\n          this.$_bodyFieldSlotNameCache = cache; // Add static top row slot (hidden in visibly stacked mode\n          // as we can't control `data-label` attr)\n\n          $rows.push(this.renderTopRow ? this.renderTopRow() : h()); // Render the rows\n\n          items.forEach(function (item, rowIndex) {\n            // Render the individual item row (rows if details slot)\n            $rows.push(_this.renderTbodyRow(item, rowIndex));\n          }); // Empty items / empty filtered row slot (only shows if `items.length < 1`)\n\n          $rows.push(this.renderEmpty ? this.renderEmpty() : h()); // Static bottom row slot (hidden in visibly stacked mode\n          // as we can't control `data-label` attr)\n\n          $rows.push(this.renderBottomRow ? this.renderBottomRow() : h());\n        } // Note: these events will only emit if a listener is registered\n\n\n        var handlers = {\n          auxclick: this.onTbodyRowMiddleMouseRowClicked,\n          // TODO:\n          //   Perhaps we do want to automatically prevent the\n          //   default context menu from showing if there is a\n          //   `row-contextmenu` listener registered\n          contextmenu: this.onTbodyRowContextmenu,\n          // The following event(s) is not considered A11Y friendly\n          dblclick: this.onTbodyRowDblClicked // Hover events (`mouseenter`/`mouseleave`) are handled by `tbody-row` mixin\n\n        }; // Add in click/keydown listeners if needed\n\n        if (hasRowClickHandler) {\n          handlers.click = this.onTBodyRowClicked;\n          handlers.keydown = this.onTbodyRowKeydown;\n        } // Assemble rows into the tbody\n\n\n        var $tbody = h(BTbody, {\n          ref: 'tbody',\n          class: this.tbodyClass || null,\n          props: {\n            tbodyTransitionProps: this.tbodyTransitionProps,\n            tbodyTransitionHandlers: this.tbodyTransitionHandlers\n          },\n          // BTbody transfers all native event listeners to the root element\n          // TODO: Only set the handlers if the table is not busy\n          on: handlers\n        }, $rows); // Return the assembled tbody\n\n        return $tbody;\n      }\n    }\n  };\n\n  var emptyMixin = {\n    props: {\n      showEmpty: {\n        type: Boolean,\n        default: false\n      },\n      emptyText: {\n        type: String,\n        default: 'There are no records to show'\n      },\n      emptyHtml: {\n        type: String\n      },\n      emptyFilteredText: {\n        type: String,\n        default: 'There are no records matching your request'\n      },\n      emptyFilteredHtml: {\n        type: String\n      }\n    },\n    methods: {\n      renderEmpty: function renderEmpty() {\n        var h = this.$createElement;\n        var items = this.computedItems;\n        var $empty;\n\n        if (this.showEmpty && (!items || items.length === 0) && !(this.computedBusy && this.hasNormalizedSlot('table-busy'))) {\n          $empty = this.normalizeSlot(this.isFiltered ? 'emptyfiltered' : 'empty', {\n            emptyFilteredHtml: this.emptyFilteredHtml,\n            emptyFilteredText: this.emptyFilteredText,\n            emptyHtml: this.emptyHtml,\n            emptyText: this.emptyText,\n            fields: this.computedFields,\n            // Not sure why this is included, as it will always be an empty array\n            items: this.computedItems\n          });\n\n          if (!$empty) {\n            $empty = h('div', {\n              class: ['text-center', 'my-2'],\n              domProps: this.isFiltered ? htmlOrText(this.emptyFilteredHtml, this.emptyFilteredText) : htmlOrText(this.emptyHtml, this.emptyText)\n            });\n          }\n\n          $empty = h(BTd, {\n            props: {\n              colspan: this.computedFields.length || null\n            }\n          }, [h('div', {\n            attrs: {\n              role: 'alert',\n              'aria-live': 'polite'\n            }\n          }, [$empty])]);\n          $empty = h(BTr, {\n            key: this.isFiltered ? 'b-empty-filtered-row' : 'b-empty-row',\n            staticClass: 'b-table-empty-row',\n            class: [isFunction(this.tbodyTrClass) ? this.tbodyTrClass(null, 'row-empty') : this.tbodyTrClass],\n            attrs: isFunction(this.tbodyTrAttr) ? this.tbodyTrAttr(null, 'row-empty') : this.tbodyTrAttr\n          }, [$empty]);\n        }\n\n        return $empty || h();\n      }\n    }\n  };\n\n  var slotName = 'top-row';\n  var topRowMixin = {\n    methods: {\n      renderTopRow: function renderTopRow() {\n        var h = this.$createElement; // Add static Top Row slot (hidden in visibly stacked mode as we can't control the data-label)\n        // If in *always* stacked mode, we don't bother rendering the row\n\n        if (!this.hasNormalizedSlot(slotName) || this.stacked === true || this.stacked === '') {\n          return h();\n        }\n\n        var fields = this.computedFields;\n        return h(BTr, {\n          key: 'b-top-row',\n          staticClass: 'b-table-top-row',\n          class: [isFunction(this.tbodyTrClass) ? this.tbodyTrClass(null, 'row-top') : this.tbodyTrClass],\n          attrs: isFunction(this.tbodyTrAttr) ? this.tbodyTrAttr(null, 'row-top') : this.tbodyTrAttr\n        }, [this.normalizeSlot(slotName, {\n          columns: fields.length,\n          fields: fields\n        })]);\n      }\n    }\n  };\n\n  var slotName$1 = 'bottom-row';\n  var bottomRowMixin = {\n    methods: {\n      renderBottomRow: function renderBottomRow() {\n        var h = this.$createElement; // Static bottom row slot (hidden in visibly stacked mode as we can't control the data-label)\n        // If in *always* stacked mode, we don't bother rendering the row\n\n        if (!this.hasNormalizedSlot(slotName$1) || this.stacked === true || this.stacked === '') {\n          return h();\n        }\n\n        var fields = this.computedFields;\n        return h(BTr, {\n          key: 'b-bottom-row',\n          staticClass: 'b-table-bottom-row',\n          class: [isFunction(this.tbodyTrClass) ? this.tbodyTrClass(null, 'row-bottom') : this.tbodyTrClass],\n          attrs: isFunction(this.tbodyTrAttr) ? this.tbodyTrAttr(null, 'row-bottom') : this.tbodyTrAttr\n        }, this.normalizeSlot(slotName$1, {\n          columns: fields.length,\n          fields: fields\n        }));\n      }\n    }\n  };\n\n  var busySlotName = 'table-busy';\n  var busyMixin = {\n    props: {\n      busy: {\n        type: Boolean,\n        default: false\n      }\n    },\n    data: function data() {\n      return {\n        localBusy: false\n      };\n    },\n    computed: {\n      computedBusy: function computedBusy() {\n        return this.busy || this.localBusy;\n      }\n    },\n    watch: {\n      localBusy: function localBusy(newVal, oldVal) {\n        if (newVal !== oldVal) {\n          this.$emit('update:busy', newVal);\n        }\n      }\n    },\n    methods: {\n      // Event handler helper\n      stopIfBusy: function stopIfBusy(evt) {\n        if (this.computedBusy) {\n          // If table is busy (via provider) then don't propagate\n          evt.preventDefault();\n          evt.stopPropagation();\n          return true;\n        }\n\n        return false;\n      },\n      // Render the busy indicator or return `null` if not busy\n      renderBusy: function renderBusy() {\n        var h = this.$createElement; // Return a busy indicator row, or `null` if not busy\n\n        if (this.computedBusy && this.hasNormalizedSlot(busySlotName)) {\n          // Show the busy slot\n          return h(BTr, {\n            key: 'table-busy-slot',\n            staticClass: 'b-table-busy-slot',\n            class: [isFunction(this.tbodyTrClass) ? this.tbodyTrClass(null, busySlotName) : this.tbodyTrClass],\n            attrs: isFunction(this.tbodyTrAttr) ? this.tbodyTrAttr(null, busySlotName) : this.tbodyTrAttr\n          }, [h(BTd, {\n            props: {\n              colspan: this.computedFields.length || null\n            }\n          }, [this.normalizeSlot(busySlotName)])]);\n        } else {\n          // We return `null` here so that we can determine if we need to\n          // render the table items rows or not\n          return null;\n        }\n      }\n    }\n  };\n\n  var selectableMixin = {\n    props: {\n      selectable: {\n        type: Boolean,\n        default: false\n      },\n      selectMode: {\n        type: String,\n        default: 'multi',\n        validator: function validator(val) {\n          return arrayIncludes(['range', 'multi', 'single'], val);\n        }\n      },\n      selectedVariant: {\n        type: String,\n        default: function _default() {\n          return getComponentConfig('BTable', 'selectedVariant');\n        }\n      },\n      noSelectOnClick: {\n        // Disable use of click handlers for row selection\n        type: Boolean,\n        default: false\n      }\n    },\n    data: function data() {\n      return {\n        selectedRows: [],\n        selectedLastRow: -1\n      };\n    },\n    computed: {\n      isSelectable: function isSelectable() {\n        return this.selectable && this.selectMode;\n      },\n      hasSelectableRowClick: function hasSelectableRowClick() {\n        return this.isSelectable && !this.noSelectOnClick;\n      },\n      supportsSelectableRows: function supportsSelectableRows() {\n        return true;\n      },\n      selectableHasSelection: function selectableHasSelection() {\n        return this.isSelectable && this.selectedRows && this.selectedRows.length > 0 && this.selectedRows.some(identity);\n      },\n      selectableIsMultiSelect: function selectableIsMultiSelect() {\n        return this.isSelectable && arrayIncludes(['range', 'multi'], this.selectMode);\n      },\n      selectableTableClasses: function selectableTableClasses() {\n        var _ref;\n\n        return _ref = {\n          'b-table-selectable': this.isSelectable\n        }, _defineProperty(_ref, \"b-table-select-\".concat(this.selectMode), this.isSelectable), _defineProperty(_ref, 'b-table-selecting', this.selectableHasSelection), _defineProperty(_ref, 'b-table-selectable-no-click', this.isSelectable && !this.hasSelectableRowClick), _ref;\n      },\n      selectableTableAttrs: function selectableTableAttrs() {\n        return {\n          // TODO:\n          //   Should this attribute not be included when no-select-on-click is set\n          //   since this attribute implies keyboard navigation?\n          'aria-multiselectable': !this.isSelectable ? null : this.selectableIsMultiSelect ? 'true' : 'false'\n        };\n      }\n    },\n    watch: {\n      computedItems: function computedItems(newVal, oldVal) {\n        // Reset for selectable\n        var equal = false;\n\n        if (this.isSelectable && this.selectedRows.length > 0) {\n          // Quick check against array length\n          equal = isArray(newVal) && isArray(oldVal) && newVal.length === oldVal.length;\n\n          for (var i = 0; equal && i < newVal.length; i++) {\n            // Look for the first non-loosely equal row, after ignoring reserved fields\n            equal = looseEqual(sanitizeRow(newVal[i]), sanitizeRow(oldVal[i]));\n          }\n        }\n\n        if (!equal) {\n          this.clearSelected();\n        }\n      },\n      selectable: function selectable(newVal) {\n        this.clearSelected();\n        this.setSelectionHandlers(newVal);\n      },\n      selectMode: function selectMode() {\n        this.clearSelected();\n      },\n      hasSelectableRowClick: function hasSelectableRowClick(newVal) {\n        this.clearSelected();\n        this.setSelectionHandlers(!newVal);\n      },\n      selectedRows: function selectedRows(_selectedRows, oldVal) {\n        var _this = this;\n\n        if (this.isSelectable && !looseEqual(_selectedRows, oldVal)) {\n          var items = []; // `.forEach()` skips over non-existent indices (on sparse arrays)\n\n          _selectedRows.forEach(function (v, idx) {\n            if (v) {\n              items.push(_this.computedItems[idx]);\n            }\n          });\n\n          this.$emit('row-selected', items);\n        }\n      }\n    },\n    beforeMount: function beforeMount() {\n      // Set up handlers if needed\n      if (this.isSelectable) {\n        this.setSelectionHandlers(true);\n      }\n    },\n    methods: {\n      // Public methods\n      selectRow: function selectRow(index) {\n        // Select a particular row (indexed based on computedItems)\n        if (this.isSelectable && isNumber(index) && index >= 0 && index < this.computedItems.length && !this.isRowSelected(index)) {\n          var selectedRows = this.selectableIsMultiSelect ? this.selectedRows.slice() : [];\n          selectedRows[index] = true;\n          this.selectedLastClicked = -1;\n          this.selectedRows = selectedRows;\n        }\n      },\n      unselectRow: function unselectRow(index) {\n        // Un-select a particular row (indexed based on `computedItems`)\n        if (this.isSelectable && isNumber(index) && this.isRowSelected(index)) {\n          var selectedRows = this.selectedRows.slice();\n          selectedRows[index] = false;\n          this.selectedLastClicked = -1;\n          this.selectedRows = selectedRows;\n        }\n      },\n      selectAllRows: function selectAllRows() {\n        var length = this.computedItems.length;\n\n        if (this.isSelectable && length > 0) {\n          this.selectedLastClicked = -1;\n          this.selectedRows = this.selectableIsMultiSelect ? range(length).map(function () {\n            return true;\n          }) : [true];\n        }\n      },\n      isRowSelected: function isRowSelected(index) {\n        // Determine if a row is selected (indexed based on `computedItems`)\n        return !!(isNumber(index) && this.selectedRows[index]);\n      },\n      clearSelected: function clearSelected() {\n        // Clear any active selected row(s)\n        this.selectedLastClicked = -1;\n        this.selectedRows = [];\n      },\n      // Internal private methods\n      selectableRowClasses: function selectableRowClasses(index) {\n        if (this.isSelectable && this.isRowSelected(index)) {\n          var variant = this.selectedVariant;\n          return _defineProperty({\n            'b-table-row-selected': true\n          }, \"\".concat(this.dark ? 'bg' : 'table', \"-\").concat(variant), variant);\n        } else {\n          return {};\n        }\n      },\n      selectableRowAttrs: function selectableRowAttrs(index) {\n        return {\n          'aria-selected': !this.isSelectable ? null : this.isRowSelected(index) ? 'true' : 'false'\n        };\n      },\n      setSelectionHandlers: function setSelectionHandlers(on) {\n        var method = on && !this.noSelectOnClick ? '$on' : '$off'; // Handle row-clicked event\n\n        this[method]('row-clicked', this.selectionHandler); // Clear selection on filter, pagination, and sort changes\n\n        this[method]('filtered', this.clearSelected);\n        this[method]('context-changed', this.clearSelected);\n      },\n      selectionHandler: function selectionHandler(item, index, evt) {\n        /* istanbul ignore if: should never happen */\n        if (!this.isSelectable || this.noSelectOnClick) {\n          // Don't do anything if table is not in selectable mode\n          this.clearSelected();\n          return;\n        }\n\n        var selectMode = this.selectMode;\n        var selectedRows = this.selectedRows.slice();\n        var selected = !selectedRows[index]; // Note 'multi' mode needs no special event handling\n\n        if (selectMode === 'single') {\n          selectedRows = [];\n        } else if (selectMode === 'range') {\n          if (this.selectedLastRow > -1 && evt.shiftKey) {\n            // range\n            for (var idx = Math.min(this.selectedLastRow, index); idx <= Math.max(this.selectedLastRow, index); idx++) {\n              selectedRows[idx] = true;\n            }\n\n            selected = true;\n          } else {\n            if (!(evt.ctrlKey || evt.metaKey)) {\n              // Clear range selection if any\n              selectedRows = [];\n              selected = true;\n            }\n\n            this.selectedLastRow = selected ? index : -1;\n          }\n        }\n\n        selectedRows[index] = selected;\n        this.selectedRows = selectedRows;\n      }\n    }\n  };\n\n  var providerMixin = {\n    mixins: [listenOnRootMixin],\n    props: {\n      // Prop override(s)\n      items: {\n        // Adds in 'Function' support\n        type: [Array, Function],\n        default: function _default()\n        /* istanbul ignore next */\n        {\n          return [];\n        }\n      },\n      // Additional props\n      noProviderPaging: {\n        type: Boolean,\n        default: false\n      },\n      noProviderSorting: {\n        type: Boolean,\n        default: false\n      },\n      noProviderFiltering: {\n        type: Boolean,\n        default: false\n      },\n      apiUrl: {\n        // Passthrough prop. Passed to the context object. Not used by b-table directly\n        type: String,\n        default: ''\n      }\n    },\n    computed: {\n      hasProvider: function hasProvider() {\n        return isFunction(this.items);\n      },\n      providerTriggerContext: function providerTriggerContext() {\n        // Used to trigger the provider function via a watcher. Only the fields that\n        // are needed for triggering a provider update are included. Note that the\n        // regular this.context is sent to the provider during fetches though, as they\n        // may need all the prop info.\n        var ctx = {\n          apiUrl: this.apiUrl,\n          filter: null,\n          sortBy: null,\n          sortDesc: null,\n          perPage: null,\n          currentPage: null\n        };\n\n        if (!this.noProviderFiltering) {\n          // Either a string, or could be an object or array.\n          ctx.filter = this.localFilter;\n        }\n\n        if (!this.noProviderSorting) {\n          ctx.sortBy = this.localSortBy;\n          ctx.sortDesc = this.localSortDesc;\n        }\n\n        if (!this.noProviderPaging) {\n          ctx.perPage = this.perPage;\n          ctx.currentPage = this.currentPage;\n        }\n\n        return clone(ctx);\n      }\n    },\n    watch: {\n      // Provider update triggering\n      items: function items(newVal) {\n        // If a new provider has been specified, trigger an update\n        if (this.hasProvider || isFunction(newVal)) {\n          this.$nextTick(this._providerUpdate);\n        }\n      },\n      providerTriggerContext: function providerTriggerContext(newVal, oldVal) {\n        // Trigger the provider to update as the relevant context values have changed.\n        if (!looseEqual(newVal, oldVal)) {\n          this.$nextTick(this._providerUpdate);\n        }\n      }\n    },\n    mounted: function mounted() {\n      var _this = this;\n\n      // Call the items provider if necessary\n      if (this.hasProvider && (!this.localItems || this.localItems.length === 0)) {\n        // Fetch on mount if localItems is empty\n        this._providerUpdate();\n      } // Listen for global messages to tell us to force refresh the table\n\n\n      this.listenOnRoot('bv::refresh::table', function (id) {\n        if (id === _this.id || id === _this) {\n          _this.refresh();\n        }\n      });\n    },\n    methods: {\n      refresh: function refresh() {\n        // Public Method: Force a refresh of the provider function\n        this.$off('refreshed', this.refresh);\n\n        if (this.computedBusy) {\n          // Can't force an update when forced busy by user (busy prop === true)\n          if (this.localBusy && this.hasProvider) {\n            // But if provider running (localBusy), re-schedule refresh once `refreshed` emitted\n            this.$on('refreshed', this.refresh);\n          }\n        } else {\n          this.clearSelected();\n\n          if (this.hasProvider) {\n            this.$nextTick(this._providerUpdate);\n          } else {\n            /* istanbul ignore next */\n            this.localItems = isArray(this.items) ? this.items.slice() : [];\n          }\n        }\n      },\n      // Provider related methods\n      _providerSetLocal: function _providerSetLocal(items) {\n        this.localItems = isArray(items) ? items.slice() : [];\n        this.localBusy = false;\n        this.$emit('refreshed'); // New root emit\n\n        if (this.id) {\n          this.emitOnRoot('bv::table::refreshed', this.id);\n        }\n      },\n      _providerUpdate: function _providerUpdate() {\n        var _this2 = this;\n\n        // Refresh the provider function items.\n        if (!this.hasProvider) {\n          // Do nothing if no provider\n          return;\n        } // If table is busy, wait until refreshed before calling again\n\n\n        if (this.computedBusy) {\n          // Schedule a new refresh once `refreshed` is emitted\n          this.$nextTick(this.refresh);\n          return;\n        } // Set internal busy state\n\n\n        this.localBusy = true; // Call provider function with context and optional callback after DOM is fully updated\n\n        this.$nextTick(function () {\n          try {\n            // Call provider function passing it the context and optional callback\n            var data = _this2.items(_this2.context, _this2._providerSetLocal);\n\n            if (isPromise(data)) {\n              // Provider returned Promise\n              data.then(function (items) {\n                // Provider resolved with items\n                _this2._providerSetLocal(items);\n              });\n            } else if (isArray(data)) {\n              // Provider returned Array data\n              _this2._providerSetLocal(data);\n            } else {\n              /* istanbul ignore if */\n              if (_this2.items.length !== 2) {\n                // Check number of arguments provider function requested\n                // Provider not using callback (didn't request second argument), so we clear\n                // busy state as most likely there was an error in the provider function\n\n                /* istanbul ignore next */\n                warn(\"Provider function didn't request callback and did not return a promise or data.\", 'BTable');\n                _this2.localBusy = false;\n              }\n            }\n          } catch (e)\n          /* istanbul ignore next */\n          {\n            // Provider function borked on us, so we spew out a warning\n            // and clear the busy state\n            warn(\"Provider function error [\".concat(e.name, \"] \").concat(e.message, \".\"), 'BTable');\n            _this2.localBusy = false;\n\n            _this2.$off('refreshed', _this2.refresh);\n          }\n        });\n      }\n    }\n  };\n\n  // Includes all main table styling options\n\n  var tableRendererMixin = {\n    // Don't place attributes on root element automatically,\n    // as table could be wrapped in responsive `<div>`\n    inheritAttrs: false,\n    provide: function provide() {\n      return {\n        bvTable: this\n      };\n    },\n    props: {\n      striped: {\n        type: Boolean,\n        default: false\n      },\n      bordered: {\n        type: Boolean,\n        default: false\n      },\n      borderless: {\n        type: Boolean,\n        default: false\n      },\n      outlined: {\n        type: Boolean,\n        default: false\n      },\n      dark: {\n        type: Boolean,\n        default: false\n      },\n      hover: {\n        type: Boolean,\n        default: false\n      },\n      small: {\n        type: Boolean,\n        default: false\n      },\n      fixed: {\n        type: Boolean,\n        default: false\n      },\n      responsive: {\n        type: [Boolean, String],\n        default: false\n      },\n      stickyHeader: {\n        // If a string, it is assumed to be the table `max-height` value\n        type: [Boolean, String],\n        default: false\n      },\n      noBorderCollapse: {\n        type: Boolean,\n        default: false\n      },\n      captionTop: {\n        type: Boolean,\n        default: false\n      },\n      tableVariant: {\n        type: String,\n        default: null\n      },\n      tableClass: {\n        type: [String, Array, Object],\n        default: null\n      }\n    },\n    computed: {\n      // Layout related computed props\n      isResponsive: function isResponsive() {\n        var responsive = this.responsive === '' ? true : this.responsive;\n        return this.isStacked ? false : responsive;\n      },\n      isStickyHeader: function isStickyHeader() {\n        var stickyHeader = this.stickyHeader === '' ? true : this.stickyHeader;\n        return this.isStacked ? false : stickyHeader;\n      },\n      wrapperClasses: function wrapperClasses() {\n        return [this.isStickyHeader ? 'b-table-sticky-header' : '', this.isResponsive === true ? 'table-responsive' : this.isResponsive ? \"table-responsive-\".concat(this.responsive) : ''].filter(identity);\n      },\n      wrapperStyles: function wrapperStyles() {\n        return this.isStickyHeader && !isBoolean(this.isStickyHeader) ? {\n          maxHeight: this.isStickyHeader\n        } : {};\n      },\n      tableClasses: function tableClasses() {\n        var hover = this.isTableSimple ? this.hover : this.hover && this.computedItems.length > 0 && !this.computedBusy;\n        return [// User supplied classes\n        this.tableClass, // Styling classes\n        {\n          'table-striped': this.striped,\n          'table-hover': hover,\n          'table-dark': this.dark,\n          'table-bordered': this.bordered,\n          'table-borderless': this.borderless,\n          'table-sm': this.small,\n          // The following are b-table custom styles\n          border: this.outlined,\n          'b-table-fixed': this.fixed,\n          'b-table-caption-top': this.captionTop,\n          'b-table-no-border-collapse': this.noBorderCollapse\n        }, this.tableVariant ? \"\".concat(this.dark ? 'bg' : 'table', \"-\").concat(this.tableVariant) : '', // Stacked table classes\n        this.stackedTableClasses, // Selectable classes\n        this.selectableTableClasses];\n      },\n      tableAttrs: function tableAttrs() {\n        // Preserve user supplied aria-describedby, if provided in `$attrs`\n        var adb = [(this.$attrs || {})['aria-describedby'], this.captionId].filter(identity).join(' ') || null;\n        var items = this.computedItems;\n        var filteredItems = this.filteredItems;\n        var fields = this.computedFields;\n        var selectableAttrs = this.selectableTableAttrs || {};\n        var ariaAttrs = this.isTableSimple ? {} : {\n          'aria-busy': this.computedBusy ? 'true' : 'false',\n          'aria-colcount': toString$1(fields.length),\n          'aria-describedby': adb\n        };\n        var rowCount = items && filteredItems && filteredItems.length > items.length ? toString$1(filteredItems.length) : null;\n        return _objectSpread2({\n          // We set `aria-rowcount` before merging in `$attrs`,\n          // in case user has supplied their own\n          'aria-rowcount': rowCount\n        }, this.$attrs, {\n          // Now we can override any `$attrs` here\n          id: this.safeId(),\n          role: 'table'\n        }, ariaAttrs, {}, selectableAttrs);\n      }\n    },\n    render: function render(h) {\n      var $content = [];\n\n      if (this.isTableSimple) {\n        $content.push(this.normalizeSlot('default'));\n      } else {\n        // Build the `<caption>` (from caption mixin)\n        $content.push(this.renderCaption ? this.renderCaption() : null); // Build the `<colgroup>`\n\n        $content.push(this.renderColgroup ? this.renderColgroup() : null); // Build the `<thead>`\n\n        $content.push(this.renderThead ? this.renderThead() : null); // Build the `<tbody>`\n\n        $content.push(this.renderTbody ? this.renderTbody() : null); // Build the `<tfoot>`\n\n        $content.push(this.renderTfoot ? this.renderTfoot() : null);\n      } // Assemble `<table>`\n\n\n      var $table = h('table', {\n        key: 'b-table',\n        staticClass: 'table b-table',\n        class: this.tableClasses,\n        attrs: this.tableAttrs\n      }, $content.filter(identity)); // Add responsive/sticky wrapper if needed and return table\n\n      return this.wrapperClasses.length > 0 ? h('div', {\n        key: 'wrap',\n        class: this.wrapperClasses,\n        style: this.wrapperStyles\n      }, [$table]) : $table;\n    }\n  };\n\n  // @vue/component\n\n  var BTable =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BTable',\n    // Order of mixins is important!\n    // They are merged from first to last, followed by this component.\n    mixins: [// Required Mixins\n    hasListenerMixin, idMixin, normalizeSlotMixin, itemsMixin, tableRendererMixin, stackedMixin, theadMixin, tfootMixin, tbodyMixin, // Features Mixins\n    stackedMixin, filteringMixin, sortingMixin, paginationMixin$1, captionMixin, colgroupMixin, selectableMixin, emptyMixin, topRowMixin, bottomRowMixin, busyMixin, providerMixin] // render function provided by table-renderer mixin\n\n  });\n\n  // @vue/component\n\n  var BTableLite =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BTableLite',\n    // Order of mixins is important!\n    // They are merged from first to last, followed by this component.\n    mixins: [// Required mixins\n    hasListenerMixin, idMixin, normalizeSlotMixin, itemsMixin, tableRendererMixin, stackedMixin, theadMixin, tfootMixin, tbodyMixin, // Features Mixins\n    // These are pretty lightweight, and are useful for lightweight tables\n    captionMixin, colgroupMixin] // render function provided by table-renderer mixin\n\n  });\n\n  // @vue/component\n\n  var BTableSimple =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BTableSimple',\n    // Order of mixins is important!\n    // They are merged from first to last, followed by this component.\n    mixins: [// Required mixins\n    idMixin, normalizeSlotMixin, tableRendererMixin, // feature mixin\n    // Stacked requires extra handling by users via\n    // the table cell `stacked-heading` prop\n    stackedMixin],\n    computed: {\n      isTableSimple: function isTableSimple() {\n        return true;\n      }\n    } // render function provided by table-renderer mixin\n\n  });\n\n  var TableLitePlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BTableLite: BTableLite\n    }\n  });\n  var TableSimplePlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BTableSimple: BTableSimple,\n      BTbody: BTbody,\n      BThead: BThead,\n      BTfoot: BTfoot,\n      BTr: BTr,\n      BTd: BTd,\n      BTh: BTh\n    }\n  });\n  var TablePlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BTable: BTable\n    },\n    plugins: {\n      TableLitePlugin: TableLitePlugin,\n      TableSimplePlugin: TableSimplePlugin\n    }\n  });\n\n  var navProps = omit(props$I, ['tabs', 'isNavBar', 'cardHeader']); // -- Utils --\n  // Filter function to filter out disabled tabs\n\n  var notDisabled = function notDisabled(tab) {\n    return !tab.disabled;\n  }; // --- Helper components ---\n  // @vue/component\n\n\n  var BTabButtonHelper =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BTabButtonHelper',\n    inject: {\n      bvTabs: {\n        default: function _default()\n        /* istanbul ignore next */\n        {\n          return {};\n        }\n      }\n    },\n    props: {\n      // Reference to the child <b-tab> instance\n      tab: {\n        default: null\n      },\n      tabs: {\n        type: Array,\n        default: function _default()\n        /* istanbul ignore next */\n        {\n          return [];\n        }\n      },\n      id: {\n        type: String,\n        default: null\n      },\n      controls: {\n        type: String,\n        default: null\n      },\n      tabIndex: {\n        type: Number,\n        default: null\n      },\n      posInSet: {\n        type: Number,\n        default: null\n      },\n      setSize: {\n        type: Number,\n        default: null\n      },\n      noKeyNav: {\n        type: Boolean,\n        default: false\n      }\n    },\n    methods: {\n      focus: function focus() {\n        if (this.$refs && this.$refs.link && this.$refs.link.focus) {\n          this.$refs.link.focus();\n        }\n      },\n      handleEvt: function handleEvt(evt) {\n        var stop = function stop() {\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        if (this.tab.disabled) {\n          /* istanbul ignore next */\n          return;\n        }\n\n        var type = evt.type;\n        var key = evt.keyCode;\n        var shift = evt.shiftKey;\n\n        if (type === 'click') {\n          stop();\n          this.$emit('click', evt);\n        } else if (type === 'keydown' && key === KEY_CODES.SPACE) {\n          // For ARIA tabs the SPACE key will also trigger a click/select\n          // Even with keyboard navigation disabled, SPACE should \"click\" the button\n          // See: https://github.com/bootstrap-vue/bootstrap-vue/issues/4323\n          stop();\n          this.$emit('click', evt);\n        } else if (type === 'keydown' && !this.noKeyNav) {\n          // For keyboard navigation\n          if (key === KEY_CODES.UP || key === KEY_CODES.LEFT || key === KEY_CODES.HOME) {\n            stop();\n\n            if (shift || key === KEY_CODES.HOME) {\n              this.$emit('first', evt);\n            } else {\n              this.$emit('prev', evt);\n            }\n          } else if (key === KEY_CODES.DOWN || key === KEY_CODES.RIGHT || key === KEY_CODES.END) {\n            stop();\n\n            if (shift || key === KEY_CODES.END) {\n              this.$emit('last', evt);\n            } else {\n              this.$emit('next', evt);\n            }\n          }\n        }\n      }\n    },\n    render: function render(h) {\n      var link = h(BLink, {\n        ref: 'link',\n        staticClass: 'nav-link',\n        class: [{\n          active: this.tab.localActive && !this.tab.disabled,\n          disabled: this.tab.disabled\n        }, this.tab.titleLinkClass, // Apply <b-tabs> `activeNavItemClass` styles when the tab is active\n        this.tab.localActive ? this.bvTabs.activeNavItemClass : null],\n        props: {\n          disabled: this.tab.disabled\n        },\n        attrs: {\n          role: 'tab',\n          id: this.id,\n          // Roving tab index when keynav enabled\n          tabindex: this.tabIndex,\n          'aria-selected': this.tab.localActive && !this.tab.disabled ? 'true' : 'false',\n          'aria-setsize': this.setSize,\n          'aria-posinset': this.posInSet,\n          'aria-controls': this.controls\n        },\n        on: {\n          click: this.handleEvt,\n          keydown: this.handleEvt\n        }\n      }, [this.tab.normalizeSlot('title') || this.tab.title]);\n      return h('li', {\n        staticClass: 'nav-item',\n        class: [this.tab.titleItemClass],\n        attrs: {\n          role: 'presentation'\n        }\n      }, [link]);\n    }\n  }); // @vue/component\n\n  var BTabs =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BTabs',\n    mixins: [idMixin, normalizeSlotMixin],\n    provide: function provide() {\n      return {\n        bvTabs: this\n      };\n    },\n    model: {\n      prop: 'value',\n      event: 'input'\n    },\n    props: _objectSpread2({}, navProps, {\n      tag: {\n        type: String,\n        default: 'div'\n      },\n      card: {\n        type: Boolean,\n        default: false\n      },\n      end: {\n        // Synonym for 'bottom'\n        type: Boolean,\n        default: false\n      },\n      noFade: {\n        type: Boolean,\n        default: false\n      },\n      noNavStyle: {\n        type: Boolean,\n        default: false\n      },\n      noKeyNav: {\n        type: Boolean,\n        default: false\n      },\n      lazy: {\n        // This prop is sniffed by the <b-tab> child\n        type: Boolean,\n        default: false\n      },\n      contentClass: {\n        type: [String, Array, Object],\n        default: null\n      },\n      navClass: {\n        type: [String, Array, Object],\n        default: null\n      },\n      navWrapperClass: {\n        type: [String, Array, Object],\n        default: null\n      },\n      activeNavItemClass: {\n        // Only applied to the currently active <b-nav-item>\n        type: [String, Array, Object],\n        default: null\n      },\n      activeTabClass: {\n        // Only applied to the currently active <b-tab>\n        // This prop is sniffed by the <b-tab> child\n        type: [String, Array, Object],\n        default: null\n      },\n      value: {\n        // v-model\n        type: Number,\n        default: null\n      }\n    }),\n    data: function data() {\n      var tabIdx = parseInt(this.value, 10);\n      tabIdx = isNaN(tabIdx) ? -1 : tabIdx;\n      return {\n        // Index of current tab\n        currentTab: tabIdx,\n        // Array of direct child <b-tab> instances, in DOM order\n        tabs: [],\n        // Array of child instances registered (for triggering reactive updates)\n        registeredTabs: [],\n        // Flag to know if we are mounted or not\n        isMounted: false\n      };\n    },\n    computed: {\n      fade: function fade() {\n        // This computed prop is sniffed by the tab child\n        return !this.noFade;\n      },\n      localNavClass: function localNavClass() {\n        var classes = [];\n\n        if (this.card && this.vertical) {\n          classes.push('card-header', 'h-100', 'border-bottom-0', 'rounded-0');\n        }\n\n        return [].concat(classes, [this.navClass]);\n      }\n    },\n    watch: {\n      currentTab: function currentTab(newVal) {\n        var index = -1; // Ensure only one tab is active at most\n\n        this.tabs.forEach(function (tab, idx) {\n          if (newVal === idx && !tab.disabled) {\n            tab.localActive = true;\n            index = idx;\n          } else {\n            tab.localActive = false;\n          }\n        }); // Update the v-model\n\n        this.$emit('input', index);\n      },\n      value: function value(newVal, oldVal) {\n        if (newVal !== oldVal) {\n          newVal = parseInt(newVal, 10);\n          newVal = isNaN(newVal) ? -1 : newVal;\n          oldVal = parseInt(oldVal, 10) || 0;\n          var tabs = this.tabs;\n\n          if (tabs[newVal] && !tabs[newVal].disabled) {\n            this.activateTab(tabs[newVal]);\n          } else {\n            // Try next or prev tabs\n            if (newVal < oldVal) {\n              this.previousTab();\n            } else {\n              this.nextTab();\n            }\n          }\n        }\n      },\n      registeredTabs: function registeredTabs() {\n        var _this = this;\n\n        // Each b-tab will register/unregister itself.\n        // We use this to detect when tabs are added/removed\n        // to trigger the update of the tabs.\n        this.$nextTick(function () {\n          requestAF(function () {\n            _this.updateTabs();\n          });\n        });\n      },\n      tabs: function tabs(newVal, oldVal) {\n        var _this2 = this;\n\n        // If tabs added, removed, or re-ordered, we emit a `changed` event.\n        // We use `tab._uid` instead of `tab.safeId()`, as the later is changed\n        // in a nextTick if no explicit ID is provided, causing duplicate emits.\n        if (!looseEqual(newVal.map(function (t) {\n          return t._uid;\n        }), oldVal.map(function (t) {\n          return t._uid;\n        }))) {\n          // In a nextTick to ensure currentTab has been set first.\n          this.$nextTick(function () {\n            // We emit shallow copies of the new and old arrays of tabs, to\n            // prevent users from potentially mutating the internal arrays.\n            _this2.$emit('changed', newVal.slice(), oldVal.slice());\n          });\n        }\n      },\n      isMounted: function isMounted(newVal) {\n        var _this3 = this;\n\n        // Trigger an update after mounted.  Needed for tabs inside lazy modals.\n        if (newVal) {\n          requestAF(function () {\n            _this3.updateTabs();\n          });\n        } // Enable or disable the observer\n\n\n        this.setObserver(newVal);\n      }\n    },\n    created: function created() {\n      var _this4 = this;\n\n      var tabIdx = parseInt(this.value, 10);\n      this.currentTab = isNaN(tabIdx) ? -1 : tabIdx;\n      this._bvObserver = null; // For SSR and to make sure only a single tab is shown on mount\n      // We wrap this in a `$nextTick()` to ensure the child tabs have been created\n\n      this.$nextTick(function () {\n        _this4.updateTabs();\n      });\n    },\n    mounted: function mounted() {\n      var _this5 = this;\n\n      // Call `updateTabs()` just in case...\n      this.updateTabs();\n      this.$nextTick(function () {\n        // Flag we are now mounted and to switch to DOM for tab probing.\n        // As this.$slots.default appears to lie about component instances\n        // after b-tabs is destroyed and re-instantiated.\n        // And this.$children does not respect DOM order.\n        _this5.isMounted = true;\n      });\n    },\n    deactivated: function deactivated()\n    /* istanbul ignore next */\n    {\n      this.isMounted = false;\n    },\n    activated: function activated()\n    /* istanbul ignore next */\n    {\n      var _this6 = this;\n\n      var tabIdx = parseInt(this.value, 10);\n      this.currentTab = isNaN(tabIdx) ? -1 : tabIdx;\n      this.$nextTick(function () {\n        _this6.updateTabs();\n\n        _this6.isMounted = true;\n      });\n    },\n    beforeDestroy: function beforeDestroy() {\n      this.isMounted = false;\n    },\n    destroyed: function destroyed() {\n      // Ensure no references to child instances exist\n      this.tabs = [];\n    },\n    methods: {\n      registerTab: function registerTab(tab) {\n        var _this7 = this;\n\n        if (!arrayIncludes(this.registeredTabs, tab)) {\n          this.registeredTabs.push(tab);\n          tab.$once('hook:destroyed', function () {\n            _this7.unregisterTab(tab);\n          });\n        }\n      },\n      unregisterTab: function unregisterTab(tab) {\n        this.registeredTabs = this.registeredTabs.slice().filter(function (t) {\n          return t !== tab;\n        });\n      },\n      setObserver: function setObserver(on) {\n        // DOM observer is needed to detect changes in order of tabs\n        if (on) {\n          // Make sure no existing observer running\n          this.setObserver(false);\n          var self = this;\n          /* istanbul ignore next: difficult to test mutation observer in JSDOM */\n\n          var handler = function handler() {\n            // We delay the update to ensure that `tab.safeId()` has\n            // updated with the final ID value.\n            self.$nextTick(function () {\n              requestAF(function () {\n                self.updateTabs();\n              });\n            });\n          }; // Watch for changes to <b-tab> sub components\n\n\n          this._bvObserver = observeDom(this.$refs.tabsContainer, handler, {\n            childList: true,\n            subtree: false,\n            attributes: true,\n            attributeFilter: ['id']\n          });\n        } else {\n          if (this._bvObserver && this._bvObserver.disconnect) {\n            this._bvObserver.disconnect();\n          }\n\n          this._bvObserver = null;\n        }\n      },\n      getTabs: function getTabs() {\n        // We use registeredTabs as the source of truth for child tab components. And we\n        // filter out any BTab components that are extended BTab with a root child BTab.\n        // https://github.com/bootstrap-vue/bootstrap-vue/issues/3260\n        var tabs = this.registeredTabs.filter(function (tab) {\n          return tab.$children.filter(function (t) {\n            return t._isTab;\n          }).length === 0;\n        }); // DOM Order of Tabs\n\n        var order = [];\n\n        if (this.isMounted && tabs.length > 0) {\n          // We rely on the DOM when mounted to get the 'true' order of the b-tab children.\n          // querySelectorAll(...) always returns elements in document order, regardless of\n          // order specified in the selector.\n          var selector = tabs.map(function (tab) {\n            return \"#\".concat(tab.safeId());\n          }).join(', ');\n          order = selectAll(selector, this.$el).map(function (el) {\n            return el.id;\n          }).filter(identity);\n        } // Stable sort keeps the original order if not found in the\n        // `order` array, which will be an empty array before mount.\n\n\n        return stableSort(tabs, function (a, b) {\n          return order.indexOf(a.safeId()) - order.indexOf(b.safeId());\n        });\n      },\n      // Update list of <b-tab> children\n      updateTabs: function updateTabs() {\n        // Probe tabs\n        var tabs = this.getTabs(); // Find *last* active non-disabled tab in current tabs\n        // We trust tab state over currentTab, in case tabs were added/removed/re-ordered\n\n        var tabIndex = tabs.indexOf(tabs.slice().reverse().find(function (tab) {\n          return tab.localActive && !tab.disabled;\n        })); // Else try setting to currentTab\n\n        if (tabIndex < 0) {\n          var currentTab = this.currentTab;\n\n          if (currentTab >= tabs.length) {\n            // Handle last tab being removed, so find the last non-disabled tab\n            tabIndex = tabs.indexOf(tabs.slice().reverse().find(notDisabled));\n          } else if (tabs[currentTab] && !tabs[currentTab].disabled) {\n            // Current tab is not disabled\n            tabIndex = currentTab;\n          }\n        } // Else find *first* non-disabled tab in current tabs\n\n\n        if (tabIndex < 0) {\n          tabIndex = tabs.indexOf(tabs.find(notDisabled));\n        } // Set the current tab state to active\n\n\n        tabs.forEach(function (tab) {\n          // tab.localActive = idx === tabIndex && !tab.disabled\n          tab.localActive = false;\n        });\n\n        if (tabs[tabIndex]) {\n          tabs[tabIndex].localActive = true;\n        } // Update the array of tab children\n\n\n        this.tabs = tabs; // Set the currentTab index (can be -1 if no non-disabled tabs)\n\n        this.currentTab = tabIndex;\n      },\n      // Find a button that controls a tab, given the tab reference\n      // Returns the button vm instance\n      getButtonForTab: function getButtonForTab(tab) {\n        return (this.$refs.buttons || []).find(function (btn) {\n          return btn.tab === tab;\n        });\n      },\n      // Force a button to re-render its content, given a <b-tab> instance\n      // Called by <b-tab> on `update()`\n      updateButton: function updateButton(tab) {\n        var button = this.getButtonForTab(tab);\n\n        if (button && button.$forceUpdate) {\n          button.$forceUpdate();\n        }\n      },\n      // Activate a tab given a <b-tab> instance\n      // Also accessed by <b-tab>\n      activateTab: function activateTab(tab) {\n        var result = false;\n\n        if (tab) {\n          var index = this.tabs.indexOf(tab);\n\n          if (!tab.disabled && index > -1 && index !== this.currentTab) {\n            var tabEvt = new BvEvent('activate-tab', {\n              cancelable: true,\n              vueTarget: this,\n              componentId: this.safeId()\n            });\n            this.$emit(tabEvt.type, index, this.currentTab, tabEvt);\n\n            if (!tabEvt.defaultPrevented) {\n              result = true;\n              this.currentTab = index;\n            }\n          }\n        } // Couldn't set tab, so ensure v-model is set to `this.currentTab`\n\n        /* istanbul ignore next: should rarely happen */\n\n\n        if (!result && this.currentTab !== this.value) {\n          this.$emit('input', this.currentTab);\n        }\n\n        return result;\n      },\n      // Deactivate a tab given a <b-tab> instance\n      // Accessed by <b-tab>\n      deactivateTab: function deactivateTab(tab) {\n        if (tab) {\n          // Find first non-disabled tab that isn't the one being deactivated\n          // If no tabs are available, then don't deactivate current tab\n          return this.activateTab(this.tabs.filter(function (t) {\n            return t !== tab;\n          }).find(notDisabled));\n        }\n        /* istanbul ignore next: should never/rarely happen */\n\n\n        return false;\n      },\n      // Focus a tab button given its <b-tab> instance\n      focusButton: function focusButton(tab) {\n        var _this8 = this;\n\n        // Wrap in `$nextTick()` to ensure DOM has completed rendering/updating before focusing\n        this.$nextTick(function () {\n          var button = _this8.getButtonForTab(tab);\n\n          if (button && button.focus) {\n            button.focus();\n          }\n        });\n      },\n      // Emit a click event on a specified <b-tab> component instance\n      emitTabClick: function emitTabClick(tab, evt) {\n        if (isEvent(evt) && tab && tab.$emit && !tab.disabled) {\n          tab.$emit('click', evt);\n        }\n      },\n      // Click handler\n      clickTab: function clickTab(tab, evt) {\n        this.activateTab(tab);\n        this.emitTabClick(tab, evt);\n      },\n      // Move to first non-disabled tab\n      firstTab: function firstTab(focus) {\n        var tab = this.tabs.find(notDisabled);\n\n        if (this.activateTab(tab) && focus) {\n          this.focusButton(tab);\n          this.emitTabClick(tab, focus);\n        }\n      },\n      // Move to previous non-disabled tab\n      previousTab: function previousTab(focus) {\n        var currentIndex = Math.max(this.currentTab, 0);\n        var tab = this.tabs.slice(0, currentIndex).reverse().find(notDisabled);\n\n        if (this.activateTab(tab) && focus) {\n          this.focusButton(tab);\n          this.emitTabClick(tab, focus);\n        }\n      },\n      // Move to next non-disabled tab\n      nextTab: function nextTab(focus) {\n        var currentIndex = Math.max(this.currentTab, -1);\n        var tab = this.tabs.slice(currentIndex + 1).find(notDisabled);\n\n        if (this.activateTab(tab) && focus) {\n          this.focusButton(tab);\n          this.emitTabClick(tab, focus);\n        }\n      },\n      // Move to last non-disabled tab\n      lastTab: function lastTab(focus) {\n        var tab = this.tabs.slice().reverse().find(notDisabled);\n\n        if (this.activateTab(tab) && focus) {\n          this.focusButton(tab);\n          this.emitTabClick(tab, focus);\n        }\n      }\n    },\n    render: function render(h) {\n      var _this9 = this;\n\n      var tabs = this.tabs; // Currently active tab\n\n      var activeTab = tabs.find(function (tab) {\n        return tab.localActive && !tab.disabled;\n      }); // Tab button to allow focusing when no active tab found (keynav only)\n\n      var fallbackTab = tabs.find(function (tab) {\n        return !tab.disabled;\n      }); // For each <b-tab> found create the tab buttons\n\n      var buttons = tabs.map(function (tab, index) {\n        var tabIndex = null; // Ensure at least one tab button is focusable when keynav enabled (if possible)\n\n        if (!_this9.noKeyNav) {\n          // Buttons are not in tab index unless active, or a fallback tab\n          tabIndex = -1;\n\n          if (activeTab === tab || !activeTab && fallbackTab === tab) {\n            // Place tab button in tab sequence\n            tabIndex = null;\n          }\n        }\n\n        return h(BTabButtonHelper, {\n          key: tab._uid || index,\n          ref: 'buttons',\n          // Needed to make `this.$refs.buttons` an array\n          refInFor: true,\n          props: {\n            tab: tab,\n            tabs: tabs,\n            id: tab.controlledBy || (tab.safeId ? tab.safeId(\"_BV_tab_button_\") : null),\n            controls: tab.safeId ? tab.safeId() : null,\n            tabIndex: tabIndex,\n            setSize: tabs.length,\n            posInSet: index + 1,\n            noKeyNav: _this9.noKeyNav\n          },\n          on: {\n            click: function click(evt) {\n              _this9.clickTab(tab, evt);\n            },\n            first: _this9.firstTab,\n            prev: _this9.previousTab,\n            next: _this9.nextTab,\n            last: _this9.lastTab\n          }\n        });\n      }); // Nav\n\n      var nav = h(BNav, {\n        ref: 'nav',\n        class: this.localNavClass,\n        attrs: {\n          role: 'tablist',\n          id: this.safeId('_BV_tab_controls_')\n        },\n        props: {\n          fill: this.fill,\n          justified: this.justified,\n          align: this.align,\n          tabs: !this.noNavStyle && !this.pills,\n          pills: !this.noNavStyle && this.pills,\n          vertical: this.vertical,\n          small: this.small,\n          cardHeader: this.card && !this.vertical\n        }\n      }, [this.normalizeSlot('tabs-start') || h(), buttons, this.normalizeSlot('tabs-end') || h()]);\n      nav = h('div', {\n        key: 'bv-tabs-nav',\n        class: [{\n          'card-header': this.card && !this.vertical && !this.end,\n          'card-footer': this.card && !this.vertical && this.end,\n          'col-auto': this.vertical\n        }, this.navWrapperClass]\n      }, [nav]);\n      var empty = h();\n\n      if (!tabs || tabs.length === 0) {\n        empty = h('div', {\n          key: 'bv-empty-tab',\n          class: ['tab-pane', 'active', {\n            'card-body': this.card\n          }]\n        }, this.normalizeSlot('empty'));\n      } // Main content section\n\n\n      var content = h('div', {\n        ref: 'tabsContainer',\n        key: 'bv-tabs-container',\n        staticClass: 'tab-content',\n        class: [{\n          col: this.vertical\n        }, this.contentClass],\n        attrs: {\n          id: this.safeId('_BV_tab_container_')\n        }\n      }, concat(this.normalizeSlot('default'), empty)); // Render final output\n\n      return h(this.tag, {\n        staticClass: 'tabs',\n        class: {\n          row: this.vertical,\n          'no-gutters': this.vertical && this.card\n        },\n        attrs: {\n          id: this.safeId()\n        }\n      }, [this.end ? content : h(), [nav], this.end ? h() : content]);\n    }\n  });\n\n  var BTab =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BTab',\n    mixins: [idMixin, normalizeSlotMixin],\n    inject: {\n      bvTabs: {\n        default: function _default() {\n          return {};\n        }\n      }\n    },\n    props: {\n      active: {\n        type: Boolean,\n        default: false\n      },\n      tag: {\n        type: String,\n        default: 'div'\n      },\n      buttonId: {\n        type: String,\n        default: ''\n      },\n      title: {\n        type: String,\n        default: ''\n      },\n      titleItemClass: {\n        // Sniffed by tabs.js and added to nav 'li.nav-item'\n        type: [String, Array, Object],\n        default: null\n      },\n      titleLinkClass: {\n        // Sniffed by tabs.js and added to nav 'a.nav-link'\n        type: [String, Array, Object],\n        default: null\n      },\n      disabled: {\n        type: Boolean,\n        default: false\n      },\n      noBody: {\n        type: Boolean,\n        default: false\n      },\n      lazy: {\n        type: Boolean,\n        default: false\n      }\n    },\n    data: function data() {\n      return {\n        localActive: this.active && !this.disabled,\n        show: false\n      };\n    },\n    computed: {\n      tabClasses: function tabClasses() {\n        return [{\n          active: this.localActive,\n          disabled: this.disabled,\n          'card-body': this.bvTabs.card && !this.noBody\n        }, // Apply <b-tabs> `activeTabClass` styles when this tab is active\n        this.localActive ? this.bvTabs.activeTabClass : null];\n      },\n      controlledBy: function controlledBy() {\n        return this.buttonId || this.safeId('__BV_tab_button__');\n      },\n      computedNoFade: function computedNoFade() {\n        return !(this.bvTabs.fade || false);\n      },\n      computedLazy: function computedLazy() {\n        return this.bvTabs.lazy || this.lazy;\n      },\n      _isTab: function _isTab() {\n        // For parent sniffing of child\n        return true;\n      }\n    },\n    watch: {\n      localActive: function localActive(newVal) {\n        // Make 'active' prop work with `.sync` modifier\n        this.$emit('update:active', newVal);\n      },\n      active: function active(newVal, oldVal) {\n        if (newVal !== oldVal) {\n          if (newVal) {\n            // If activated post mount\n            this.activate();\n          } else {\n            /* istanbul ignore next */\n            if (!this.deactivate()) {\n              // Tab couldn't be deactivated, so we reset the synced active prop\n              // Deactivation will fail if no other tabs to activate\n              this.$emit('update:active', this.localActive);\n            }\n          }\n        }\n      },\n      disabled: function disabled(newVal, oldVal) {\n        if (newVal !== oldVal) {\n          if (newVal && this.localActive && this.bvTabs.firstTab) {\n            this.localActive = false;\n            this.bvTabs.firstTab();\n          }\n        }\n      }\n    },\n    mounted: function mounted() {\n      // Inform b-tabs of our presence\n      this.registerTab(); // Initially show on mount if active and not disabled\n\n      this.show = this.localActive;\n    },\n    updated: function updated() {\n      // Force the tab button content to update (since slots are not reactive)\n      // Only done if we have a title slot, as the title prop is reactive\n      if (this.hasNormalizedSlot('title') && this.bvTabs.updateButton) {\n        this.bvTabs.updateButton(this);\n      }\n    },\n    destroyed: function destroyed() {\n      // inform b-tabs of our departure\n      this.unregisterTab();\n    },\n    methods: {\n      // Private methods\n      registerTab: function registerTab() {\n        // Inform `b-tabs` of our presence\n        this.bvTabs.registerTab && this.bvTabs.registerTab(this);\n      },\n      unregisterTab: function unregisterTab() {\n        // Inform `b-tabs` of our departure\n        this.bvTabs.unregisterTab && this.bvTabs.unregisterTab(this);\n      },\n      // Public methods\n      activate: function activate() {\n        if (this.bvTabs.activateTab && !this.disabled) {\n          return this.bvTabs.activateTab(this);\n        } else {\n          // Not inside a <b-tabs> component or tab is disabled\n          return false;\n        }\n      },\n      deactivate: function deactivate() {\n        if (this.bvTabs.deactivateTab && this.localActive) {\n          return this.bvTabs.deactivateTab(this);\n        } else {\n          // Not inside a <b-tabs> component or not active to begin with\n          return false;\n        }\n      }\n    },\n    render: function render(h) {\n      var content = h(this.tag, {\n        ref: 'panel',\n        staticClass: 'tab-pane',\n        class: this.tabClasses,\n        directives: [{\n          name: 'show',\n          rawName: 'v-show',\n          value: this.localActive,\n          expression: 'localActive'\n        }],\n        attrs: {\n          role: 'tabpanel',\n          id: this.safeId(),\n          'aria-hidden': this.localActive ? 'false' : 'true',\n          'aria-labelledby': this.controlledBy || null\n        }\n      }, // Render content lazily if requested\n      [this.localActive || !this.computedLazy ? this.normalizeSlot('default') : h()]);\n      return h(BVTransition, {\n        props: {\n          mode: 'out-in',\n          noFade: this.computedNoFade\n        }\n      }, [content]);\n    }\n  });\n\n  var TabsPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BTabs: BTabs,\n      BTab: BTab\n    }\n  });\n\n  function _typeof$1(obj) {\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof$1 = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof$1 = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof$1(obj);\n  }\n\n  function _toConsumableArray$1(arr) {\n    return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _nonIterableSpread$1();\n  }\n\n  function _arrayWithoutHoles$1(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n      return arr2;\n    }\n  }\n\n  function _iterableToArray$1(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n  }\n\n  function _nonIterableSpread$1() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n  }\n\n  var inBrowser = typeof window !== 'undefined';\n  function freeze$1(item) {\n    if (Array.isArray(item) || _typeof$1(item) === 'object') {\n      return Object.freeze(item);\n    }\n\n    return item;\n  }\n  function combinePassengers(transports) {\n    var slotProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return transports.reduce(function (passengers, transport) {\n      var temp = transport.passengers[0];\n      var newPassengers = typeof temp === 'function' ? temp(slotProps) : transport.passengers;\n      return passengers.concat(newPassengers);\n    }, []);\n  }\n  function stableSort$1(array, compareFn) {\n    return array.map(function (v, idx) {\n      return [idx, v];\n    }).sort(function (a, b) {\n      return compareFn(a[1], b[1]) || a[0] - b[0];\n    }).map(function (c) {\n      return c[1];\n    });\n  }\n  function pick(obj, keys) {\n    return keys.reduce(function (acc, key) {\n      if (obj.hasOwnProperty(key)) {\n        acc[key] = obj[key];\n      }\n\n      return acc;\n    }, {});\n  }\n\n  var transports = {};\n  var targets = {};\n  var sources = {};\n  var Wormhole = Vue.extend({\n    data: function data() {\n      return {\n        transports: transports,\n        targets: targets,\n        sources: sources,\n        trackInstances: inBrowser\n      };\n    },\n    methods: {\n      open: function open(transport) {\n        if (!inBrowser) return;\n        var to = transport.to,\n            from = transport.from,\n            passengers = transport.passengers,\n            _transport$order = transport.order,\n            order = _transport$order === void 0 ? Infinity : _transport$order;\n        if (!to || !from || !passengers) return;\n        var newTransport = {\n          to: to,\n          from: from,\n          passengers: freeze$1(passengers),\n          order: order\n        };\n        var keys = Object.keys(this.transports);\n\n        if (keys.indexOf(to) === -1) {\n          Vue.set(this.transports, to, []);\n        }\n\n        var currentIndex = this.$_getTransportIndex(newTransport); // Copying the array here so that the PortalTarget change event will actually contain two distinct arrays\n\n        var newTransports = this.transports[to].slice(0);\n\n        if (currentIndex === -1) {\n          newTransports.push(newTransport);\n        } else {\n          newTransports[currentIndex] = newTransport;\n        }\n\n        this.transports[to] = stableSort$1(newTransports, function (a, b) {\n          return a.order - b.order;\n        });\n      },\n      close: function close(transport) {\n        var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var to = transport.to,\n            from = transport.from;\n        if (!to || !from && force === false) return;\n\n        if (!this.transports[to]) {\n          return;\n        }\n\n        if (force) {\n          this.transports[to] = [];\n        } else {\n          var index = this.$_getTransportIndex(transport);\n\n          if (index >= 0) {\n            // Copying the array here so that the PortalTarget change event will actually contain two distinct arrays\n            var newTransports = this.transports[to].slice(0);\n            newTransports.splice(index, 1);\n            this.transports[to] = newTransports;\n          }\n        }\n      },\n      registerTarget: function registerTarget(target, vm, force) {\n        if (!inBrowser) return;\n\n        if (this.trackInstances && !force && this.targets[target]) {\n          console.warn(\"[portal-vue]: Target \".concat(target, \" already exists\"));\n        }\n\n        this.$set(this.targets, target, Object.freeze([vm]));\n      },\n      unregisterTarget: function unregisterTarget(target) {\n        this.$delete(this.targets, target);\n      },\n      registerSource: function registerSource(source, vm, force) {\n        if (!inBrowser) return;\n\n        if (this.trackInstances && !force && this.sources[source]) {\n          console.warn(\"[portal-vue]: source \".concat(source, \" already exists\"));\n        }\n\n        this.$set(this.sources, source, Object.freeze([vm]));\n      },\n      unregisterSource: function unregisterSource(source) {\n        this.$delete(this.sources, source);\n      },\n      hasTarget: function hasTarget(to) {\n        return !!(this.targets[to] && this.targets[to][0]);\n      },\n      hasSource: function hasSource(to) {\n        return !!(this.sources[to] && this.sources[to][0]);\n      },\n      hasContentFor: function hasContentFor(to) {\n        return !!this.transports[to] && !!this.transports[to].length;\n      },\n      // Internal\n      $_getTransportIndex: function $_getTransportIndex(_ref) {\n        var to = _ref.to,\n            from = _ref.from;\n\n        for (var i in this.transports[to]) {\n          if (this.transports[to][i].from === from) {\n            return +i;\n          }\n        }\n\n        return -1;\n      }\n    }\n  });\n  var wormhole = new Wormhole(transports);\n\n  var _id = 1;\n  var Portal = Vue.extend({\n    name: 'portal',\n    props: {\n      disabled: {\n        type: Boolean\n      },\n      name: {\n        type: String,\n        default: function _default() {\n          return String(_id++);\n        }\n      },\n      order: {\n        type: Number,\n        default: 0\n      },\n      slim: {\n        type: Boolean\n      },\n      slotProps: {\n        type: Object,\n        default: function _default() {\n          return {};\n        }\n      },\n      tag: {\n        type: String,\n        default: 'DIV'\n      },\n      to: {\n        type: String,\n        default: function _default() {\n          return String(Math.round(Math.random() * 10000000));\n        }\n      }\n    },\n    created: function created() {\n      var _this = this;\n\n      this.$nextTick(function () {\n        wormhole.registerSource(_this.name, _this);\n      });\n    },\n    mounted: function mounted() {\n      if (!this.disabled) {\n        this.sendUpdate();\n      }\n    },\n    updated: function updated() {\n      if (this.disabled) {\n        this.clear();\n      } else {\n        this.sendUpdate();\n      }\n    },\n    beforeDestroy: function beforeDestroy() {\n      wormhole.unregisterSource(this.name);\n      this.clear();\n    },\n    watch: {\n      to: function to(newValue, oldValue) {\n        oldValue && oldValue !== newValue && this.clear(oldValue);\n        this.sendUpdate();\n      }\n    },\n    methods: {\n      clear: function clear(target) {\n        var closer = {\n          from: this.name,\n          to: target || this.to\n        };\n        wormhole.close(closer);\n      },\n      normalizeSlots: function normalizeSlots() {\n        return this.$scopedSlots.default ? [this.$scopedSlots.default] : this.$slots.default;\n      },\n      normalizeOwnChildren: function normalizeOwnChildren(children) {\n        return typeof children === 'function' ? children(this.slotProps) : children;\n      },\n      sendUpdate: function sendUpdate() {\n        var slotContent = this.normalizeSlots();\n\n        if (slotContent) {\n          var transport = {\n            from: this.name,\n            to: this.to,\n            passengers: _toConsumableArray$1(slotContent),\n            order: this.order\n          };\n          wormhole.open(transport);\n        } else {\n          this.clear();\n        }\n      }\n    },\n    render: function render(h) {\n      var children = this.$slots.default || this.$scopedSlots.default || [];\n      var Tag = this.tag;\n\n      if (children && this.disabled) {\n        return children.length <= 1 && this.slim ? this.normalizeOwnChildren(children)[0] : h(Tag, [this.normalizeOwnChildren(children)]);\n      } else {\n        return this.slim ? h() : h(Tag, {\n          class: {\n            'v-portal': true\n          },\n          style: {\n            display: 'none'\n          },\n          key: 'v-portal-placeholder'\n        });\n      }\n    }\n  });\n\n  var PortalTarget = Vue.extend({\n    name: 'portalTarget',\n    props: {\n      multiple: {\n        type: Boolean,\n        default: false\n      },\n      name: {\n        type: String,\n        required: true\n      },\n      slim: {\n        type: Boolean,\n        default: false\n      },\n      slotProps: {\n        type: Object,\n        default: function _default() {\n          return {};\n        }\n      },\n      tag: {\n        type: String,\n        default: 'div'\n      },\n      transition: {\n        type: [String, Object, Function]\n      }\n    },\n    data: function data() {\n      return {\n        transports: wormhole.transports,\n        firstRender: true\n      };\n    },\n    created: function created() {\n      var _this = this;\n\n      this.$nextTick(function () {\n        wormhole.registerTarget(_this.name, _this);\n      });\n    },\n    watch: {\n      ownTransports: function ownTransports() {\n        this.$emit('change', this.children().length > 0);\n      },\n      name: function name(newVal, oldVal) {\n        /**\r\n         * TODO\r\n         * This should warn as well ...\r\n         */\n        wormhole.unregisterTarget(oldVal);\n        wormhole.registerTarget(newVal, this);\n      }\n    },\n    mounted: function mounted() {\n      var _this2 = this;\n\n      if (this.transition) {\n        this.$nextTick(function () {\n          // only when we have a transition, because it causes a re-render\n          _this2.firstRender = false;\n        });\n      }\n    },\n    beforeDestroy: function beforeDestroy() {\n      wormhole.unregisterTarget(this.name);\n    },\n    computed: {\n      ownTransports: function ownTransports() {\n        var transports = this.transports[this.name] || [];\n\n        if (this.multiple) {\n          return transports;\n        }\n\n        return transports.length === 0 ? [] : [transports[transports.length - 1]];\n      },\n      passengers: function passengers() {\n        return combinePassengers(this.ownTransports, this.slotProps);\n      }\n    },\n    methods: {\n      // can't be a computed prop because it has to \"react\" to $slot changes.\n      children: function children() {\n        return this.passengers.length !== 0 ? this.passengers : this.$scopedSlots.default ? this.$scopedSlots.default(this.slotProps) : this.$slots.default || [];\n      },\n      // can't be a computed prop because it has to \"react\" to this.children().\n      noWrapper: function noWrapper() {\n        var noWrapper = this.slim && !this.transition;\n\n        if (noWrapper && this.children().length > 1) {\n          console.warn('[portal-vue]: PortalTarget with `slim` option received more than one child element.');\n        }\n\n        return noWrapper;\n      }\n    },\n    render: function render(h) {\n      var noWrapper = this.noWrapper();\n      var children = this.children();\n      var Tag = this.transition || this.tag;\n      return noWrapper ? children[0] : this.slim && !Tag ? h() : h(Tag, {\n        props: {\n          // if we have a transition component, pass the tag if it exists\n          tag: this.transition && this.tag ? this.tag : undefined\n        },\n        class: {\n          'vue-portal-target': true\n        }\n      }, children);\n    }\n  });\n\n  var _id$1 = 0;\n  var portalProps = ['disabled', 'name', 'order', 'slim', 'slotProps', 'tag', 'to'];\n  var targetProps = ['multiple', 'transition'];\n  var MountingPortal = Vue.extend({\n    name: 'MountingPortal',\n    inheritAttrs: false,\n    props: {\n      append: {\n        type: [Boolean, String]\n      },\n      bail: {\n        type: Boolean\n      },\n      mountTo: {\n        type: String,\n        required: true\n      },\n      // Portal\n      disabled: {\n        type: Boolean\n      },\n      // name for the portal\n      name: {\n        type: String,\n        default: function _default() {\n          return 'mounted_' + String(_id$1++);\n        }\n      },\n      order: {\n        type: Number,\n        default: 0\n      },\n      slim: {\n        type: Boolean\n      },\n      slotProps: {\n        type: Object,\n        default: function _default() {\n          return {};\n        }\n      },\n      tag: {\n        type: String,\n        default: 'DIV'\n      },\n      // name for the target\n      to: {\n        type: String,\n        default: function _default() {\n          return String(Math.round(Math.random() * 10000000));\n        }\n      },\n      // Target\n      multiple: {\n        type: Boolean,\n        default: false\n      },\n      targetSlim: {\n        type: Boolean\n      },\n      targetSlotProps: {\n        type: Object,\n        default: function _default() {\n          return {};\n        }\n      },\n      targetTag: {\n        type: String,\n        default: 'div'\n      },\n      transition: {\n        type: [String, Object, Function]\n      }\n    },\n    created: function created() {\n      if (typeof document === 'undefined') return;\n      var el = document.querySelector(this.mountTo);\n\n      if (!el) {\n        console.error(\"[portal-vue]: Mount Point '\".concat(this.mountTo, \"' not found in document\"));\n        return;\n      }\n\n      var props = this.$props; // Target already exists\n\n      if (wormhole.targets[props.name]) {\n        if (props.bail) {\n          console.warn(\"[portal-vue]: Target \".concat(props.name, \" is already mounted.\\n        Aborting because 'bail: true' is set\"));\n        } else {\n          this.portalTarget = wormhole.targets[props.name];\n        }\n\n        return;\n      }\n\n      var append = props.append;\n\n      if (append) {\n        var type = typeof append === 'string' ? append : 'DIV';\n        var mountEl = document.createElement(type);\n        el.appendChild(mountEl);\n        el = mountEl;\n      } // get props for target from $props\n      // we have to rename a few of them\n\n\n      var _props = pick(this.$props, targetProps);\n\n      _props.slim = this.targetSlim;\n      _props.tag = this.targetTag;\n      _props.slotProps = this.targetSlotProps;\n      _props.name = this.to;\n      this.portalTarget = new PortalTarget({\n        el: el,\n        parent: this.$parent || this,\n        propsData: _props\n      });\n    },\n    beforeDestroy: function beforeDestroy() {\n      var target = this.portalTarget;\n\n      if (this.append) {\n        var el = target.$el;\n        el.parentNode.removeChild(el);\n      }\n\n      target.$destroy();\n    },\n    render: function render(h) {\n      if (!this.portalTarget) {\n        console.warn(\"[portal-vue] Target wasn't mounted\");\n        return h();\n      } // if there's no \"manual\" scoped slot, so we create a <Portal> ourselves\n\n\n      if (!this.$scopedSlots.manual) {\n        var props = pick(this.$props, portalProps);\n        return h(Portal, {\n          props: props,\n          attrs: this.$attrs,\n          on: this.$listeners,\n          scopedSlots: this.$scopedSlots\n        }, this.$slots.default);\n      } // else, we render the scoped slot\n\n\n      var content = this.$scopedSlots.manual({\n        to: this.to\n      }); // if user used <template> for the scoped slot\n      // content will be an array\n\n      if (Array.isArray(content)) {\n        content = content[0];\n      }\n\n      if (!content) return h();\n      return content;\n    }\n  });\n\n  var NAME$C = 'BToaster';\n  var props$Z = {\n    name: {\n      type: String,\n      required: true\n    },\n    ariaLive: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$C, 'ariaLive');\n      }\n    },\n    ariaAtomic: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$C, 'ariaAtomic');\n      } // Allowed: 'true' or 'false' or null\n\n    },\n    role: {\n      // Aria role\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$C, 'role');\n      }\n    }\n    /*\n    transition: {\n      type: [Boolean, String, Object],\n      default: false\n    }\n    */\n\n  }; // @vue/component\n\n  var DefaultTransition =\n  /*#__PURE__*/\n  Vue.extend({\n    data: function data() {\n      return {\n        // Transition classes base name\n        name: 'b-toaster'\n      };\n    },\n    methods: {\n      onAfterEnter: function onAfterEnter(el) {\n        var _this = this;\n\n        // Handle bug where enter-to class is not removed.\n        // Bug is related to portal-vue and transition-groups.\n        requestAF(function () {\n          removeClass(el, \"\".concat(_this.name, \"-enter-to\")); // The *-move class is also stuck on elements that moved,\n          // but there are no javascript hooks to handle after move.\n        });\n      }\n    },\n    render: function render(h) {\n      return h('transition-group', {\n        props: {\n          tag: 'div',\n          name: this.name\n        },\n        on: {\n          afterEnter: this.onAfterEnter\n        }\n      }, this.$slots.default);\n    }\n  }); // @vue/component\n\n  var BToaster =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$C,\n    props: props$Z,\n    data: function data() {\n      return {\n        // We don't render on SSR or if a an existing target found\n        doRender: false,\n        dead: false,\n        // Toaster names cannot change once created\n        staticName: this.name\n      };\n    },\n    beforeMount: function beforeMount() {\n      var _this2 = this;\n\n      this.staticName = this.name;\n      /* istanbul ignore if */\n\n      if (wormhole.hasTarget(this.staticName)) {\n        warn(\"A \\\"<portal-target>\\\" with name \\\"\".concat(this.name, \"\\\" already exists in the document.\"), 'BToaster');\n        this.dead = true;\n      } else {\n        this.doRender = true;\n        this.$once('hook:beforeDestroy', function () {\n          // Let toasts made with `this.$bvToast.toast()` know that this toaster\n          // is being destroyed and should should also destroy/hide themselves\n          _this2.$root.$emit('bv::toaster::destroyed', _this2.staticName);\n        });\n      }\n    },\n    destroyed: function destroyed() {\n      // Remove from DOM if needed\n\n      /* istanbul ignore next: difficult to test */\n      if (this.$el && this.$el.parentNode) {\n        this.$el.parentNode.removeChild(this.$el);\n      }\n    },\n    render: function render(h) {\n      var $toaster = h('div', {\n        class: ['d-none', {\n          'b-dead-toaster': this.dead\n        }]\n      });\n\n      if (this.doRender) {\n        var $target = h(PortalTarget, {\n          staticClass: 'b-toaster-slot',\n          props: {\n            name: this.staticName,\n            multiple: true,\n            tag: 'div',\n            slim: false,\n            // transition: this.transition || DefaultTransition\n            transition: DefaultTransition\n          }\n        });\n        $toaster = h('div', {\n          staticClass: 'b-toaster',\n          class: [this.staticName],\n          attrs: {\n            id: this.staticName,\n            role: this.role || null,\n            // Fallback to null to make sure attribute doesn't exist\n            'aria-live': this.ariaLive,\n            'aria-atomic': this.ariaAtomic\n          }\n        }, [$target]);\n      }\n\n      return $toaster;\n    }\n  });\n\n  var NAME$D = 'BToast';\n  var MIN_DURATION = 1000; // --- Props ---\n\n  var props$_ = {\n    id: {\n      // Even though the ID prop is provided by idMixin, we\n      // add it here for $bvToast props filtering\n      type: String,\n      default: null\n    },\n    title: {\n      type: String,\n      default: null\n    },\n    toaster: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$D, 'toaster');\n      }\n    },\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    variant: {\n      type: String,\n      default: function _default() {\n        return getComponentConfig(NAME$D, 'variant');\n      }\n    },\n    isStatus: {\n      // Switches role to 'status' and aria-live to 'polite'\n      type: Boolean,\n      default: false\n    },\n    appendToast: {\n      type: Boolean,\n      default: false\n    },\n    noAutoHide: {\n      type: Boolean,\n      default: false\n    },\n    autoHideDelay: {\n      type: [Number, String],\n      default: function _default() {\n        return getComponentConfig(NAME$D, 'autoHideDelay');\n      }\n    },\n    noCloseButton: {\n      type: Boolean,\n      default: false\n    },\n    noFade: {\n      type: Boolean,\n      default: false\n    },\n    noHoverPause: {\n      type: Boolean,\n      default: false\n    },\n    solid: {\n      type: Boolean,\n      default: false\n    },\n    toastClass: {\n      type: [String, Object, Array],\n      default: function _default() {\n        return getComponentConfig(NAME$D, 'toastClass');\n      }\n    },\n    headerClass: {\n      type: [String, Object, Array],\n      default: function _default() {\n        return getComponentConfig(NAME$D, 'headerClass');\n      }\n    },\n    bodyClass: {\n      type: [String, Object, Array],\n      default: function _default() {\n        return getComponentConfig(NAME$D, 'bodyClass');\n      }\n    },\n    href: {\n      type: String,\n      default: null\n    },\n    to: {\n      type: [String, Object],\n      default: null\n    },\n    static: {\n      // Render the toast in place, rather than in a portal-target\n      type: Boolean,\n      default: false\n    }\n  }; // @vue/component\n\n  var BToast =\n  /*#__PURE__*/\n  Vue.extend({\n    name: NAME$D,\n    mixins: [idMixin, listenOnRootMixin, normalizeSlotMixin, scopedStyleAttrsMixin],\n    inheritAttrs: false,\n    model: {\n      prop: 'visible',\n      event: 'change'\n    },\n    props: props$_,\n    data: function data() {\n      return {\n        isMounted: false,\n        doRender: false,\n        localShow: false,\n        isTransitioning: false,\n        isHiding: false,\n        order: 0,\n        timer: null,\n        dismissStarted: 0,\n        resumeDismiss: 0\n      };\n    },\n    computed: {\n      bToastClasses: function bToastClasses() {\n        return _defineProperty({\n          'b-toast-solid': this.solid,\n          'b-toast-append': this.appendToast,\n          'b-toast-prepend': !this.appendToast\n        }, \"b-toast-\".concat(this.variant), this.variant);\n      },\n      slotScope: function slotScope() {\n        return {\n          hide: this.hide\n        };\n      },\n      computedDuration: function computedDuration() {\n        // Minimum supported duration is 1 second\n        return Math.max(toInteger(this.autoHideDelay) || 0, MIN_DURATION);\n      },\n      computedToaster: function computedToaster() {\n        return String(this.toaster);\n      },\n      transitionHandlers: function transitionHandlers() {\n        return {\n          beforeEnter: this.onBeforeEnter,\n          afterEnter: this.onAfterEnter,\n          beforeLeave: this.onBeforeLeave,\n          afterLeave: this.onAfterLeave\n        };\n      }\n    },\n    watch: {\n      visible: function visible(newVal) {\n        newVal ? this.show() : this.hide();\n      },\n      localShow: function localShow(newVal) {\n        if (newVal !== this.visible) {\n          this.$emit('change', newVal);\n        }\n      },\n      toaster: function toaster()\n      /* istanbul ignore next */\n      {\n        // If toaster target changed, make sure toaster exists\n        this.$nextTick(this.ensureToaster);\n      },\n      static: function _static(newVal)\n      /* istanbul ignore next */\n      {\n        // If static changes to true, and the toast is showing,\n        // ensure the toaster target exists\n        if (newVal && this.localShow) {\n          this.ensureToaster();\n        }\n      }\n    },\n    mounted: function mounted() {\n      var _this = this;\n\n      this.isMounted = true;\n      this.$nextTick(function () {\n        if (_this.visible) {\n          requestAF(function () {\n            _this.show();\n          });\n        }\n      }); // Listen for global $root show events\n\n      this.listenOnRoot('bv::show::toast', function (id) {\n        if (id === _this.safeId()) {\n          _this.show();\n        }\n      }); // Listen for global $root hide events\n\n      this.listenOnRoot('bv::hide::toast', function (id) {\n        if (!id || id === _this.safeId()) {\n          _this.hide();\n        }\n      }); // Make sure we hide when toaster is destroyed\n\n      /* istanbul ignore next: difficult to test */\n\n      this.listenOnRoot('bv::toaster::destroyed', function (toaster) {\n        /* istanbul ignore next */\n        if (toaster === _this.computedToaster) {\n          /* istanbul ignore next */\n          _this.hide();\n        }\n      });\n    },\n    beforeDestroy: function beforeDestroy() {\n      this.clearDismissTimer();\n    },\n    methods: {\n      show: function show() {\n        var _this2 = this;\n\n        if (!this.localShow) {\n          this.ensureToaster();\n          var showEvt = this.buildEvent('show');\n          this.emitEvent(showEvt);\n          this.dismissStarted = this.resumeDismiss = 0;\n          this.order = Date.now() * (this.appendToast ? 1 : -1);\n          this.isHiding = false;\n          this.doRender = true;\n          this.$nextTick(function () {\n            // We show the toast after we have rendered the portal and b-toast wrapper\n            // so that screen readers will properly announce the toast\n            requestAF(function () {\n              _this2.localShow = true;\n            });\n          });\n        }\n      },\n      hide: function hide() {\n        var _this3 = this;\n\n        if (this.localShow) {\n          var hideEvt = this.buildEvent('hide');\n          this.emitEvent(hideEvt);\n          this.setHoverHandler(false);\n          this.dismissStarted = this.resumeDismiss = 0;\n          this.clearDismissTimer();\n          this.isHiding = true;\n          requestAF(function () {\n            _this3.localShow = false;\n          });\n        }\n      },\n      buildEvent: function buildEvent(type) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return new BvEvent(type, _objectSpread2({\n          cancelable: false,\n          target: this.$el || null,\n          relatedTarget: null\n        }, options, {\n          vueTarget: this,\n          componentId: this.safeId()\n        }));\n      },\n      emitEvent: function emitEvent(bvEvt) {\n        var type = bvEvt.type;\n        this.$root.$emit(\"bv::toast:\".concat(type), bvEvt);\n        this.$emit(type, bvEvt);\n      },\n      ensureToaster: function ensureToaster() {\n        if (this.static) {\n          return;\n        }\n\n        if (!wormhole.hasTarget(this.computedToaster)) {\n          var div = document.createElement('div');\n          document.body.appendChild(div);\n          var toaster = new BToaster({\n            parent: this.$root,\n            propsData: {\n              name: this.computedToaster\n            }\n          });\n          toaster.$mount(div);\n        }\n      },\n      startDismissTimer: function startDismissTimer() {\n        this.clearDismissTimer();\n\n        if (!this.noAutoHide) {\n          this.timer = setTimeout(this.hide, this.resumeDismiss || this.computedDuration);\n          this.dismissStarted = Date.now();\n          this.resumeDismiss = 0;\n        }\n      },\n      clearDismissTimer: function clearDismissTimer() {\n        clearTimeout(this.timer);\n        this.timer = null;\n      },\n      setHoverHandler: function setHoverHandler(on) {\n        var el = this.$refs['b-toast'];\n        eventOnOff(on, el, 'mouseenter', this.onPause, EVENT_OPTIONS_NO_CAPTURE);\n        eventOnOff(on, el, 'mouseleave', this.onUnPause, EVENT_OPTIONS_NO_CAPTURE);\n      },\n      onPause: function onPause() {\n        // Determine time remaining, and then pause timer\n        if (this.noAutoHide || this.noHoverPause || !this.timer || this.resumeDismiss) {\n          return;\n        }\n\n        var passed = Date.now() - this.dismissStarted;\n\n        if (passed > 0) {\n          this.clearDismissTimer();\n          this.resumeDismiss = Math.max(this.computedDuration - passed, MIN_DURATION);\n        }\n      },\n      onUnPause: function onUnPause() {\n        // Restart timer with max of time remaining or 1 second\n        if (this.noAutoHide || this.noHoverPause || !this.resumeDismiss) {\n          this.resumeDismiss = this.dismissStarted = 0;\n          return;\n        }\n\n        this.startDismissTimer();\n      },\n      onLinkClick: function onLinkClick() {\n        var _this4 = this;\n\n        // We delay the close to allow time for the\n        // browser to process the link click\n        this.$nextTick(function () {\n          requestAF(function () {\n            _this4.hide();\n          });\n        });\n      },\n      onBeforeEnter: function onBeforeEnter() {\n        this.isTransitioning = true;\n      },\n      onAfterEnter: function onAfterEnter() {\n        this.isTransitioning = false;\n        var hiddenEvt = this.buildEvent('shown');\n        this.emitEvent(hiddenEvt);\n        this.startDismissTimer();\n        this.setHoverHandler(true);\n      },\n      onBeforeLeave: function onBeforeLeave() {\n        this.isTransitioning = true;\n      },\n      onAfterLeave: function onAfterLeave() {\n        this.isTransitioning = false;\n        this.order = 0;\n        this.resumeDismiss = this.dismissStarted = 0;\n        var hiddenEvt = this.buildEvent('hidden');\n        this.emitEvent(hiddenEvt);\n        this.doRender = false;\n      },\n      makeToast: function makeToast(h) {\n        var _this5 = this;\n\n        // Render helper for generating the toast\n        // Assemble the header content\n        var $headerContent = [];\n        var $title = this.normalizeSlot('toast-title', this.slotScope);\n\n        if ($title) {\n          $headerContent.push($title);\n        } else if (this.title) {\n          $headerContent.push(h('strong', {\n            staticClass: 'mr-2'\n          }, this.title));\n        }\n\n        if (!this.noCloseButton) {\n          $headerContent.push(h(BButtonClose, {\n            staticClass: 'ml-auto mb-1',\n            on: {\n              click: function click() {\n                _this5.hide();\n              }\n            }\n          }));\n        } // Assemble the header (if needed)\n\n\n        var $header = h();\n\n        if ($headerContent.length > 0) {\n          $header = h('header', {\n            staticClass: 'toast-header',\n            class: this.headerClass\n          }, $headerContent);\n        } // Toast body\n\n\n        var isLink = this.href || this.to;\n        var $body = h(isLink ? BLink : 'div', {\n          staticClass: 'toast-body',\n          class: this.bodyClass,\n          props: isLink ? {\n            to: this.to,\n            href: this.href\n          } : {},\n          on: isLink ? {\n            click: this.onLinkClick\n          } : {}\n        }, [this.normalizeSlot('default', this.slotScope) || h()]); // Build the toast\n\n        var $toast = h('div', {\n          key: \"toast-\".concat(this._uid),\n          ref: 'toast',\n          staticClass: 'toast',\n          class: this.toastClass,\n          attrs: _objectSpread2({}, this.$attrs, {\n            tabindex: '0',\n            id: this.safeId()\n          })\n        }, [$header, $body]);\n        return $toast;\n      }\n    },\n    render: function render(h) {\n      if (!this.doRender || !this.isMounted) {\n        return h();\n      }\n\n      var name = \"b-toast-\".concat(this._uid); // If scoped styles are applied and the toast is not static,\n      // make sure the scoped style data attribute is applied\n\n      var scopedStyleAttrs = !this.static ? this.scopedStyleAttrs : {};\n      return h(Portal, {\n        props: {\n          name: name,\n          to: this.computedToaster,\n          order: this.order,\n          slim: true,\n          disabled: this.static\n        }\n      }, [h('div', {\n        key: name,\n        ref: 'b-toast',\n        staticClass: 'b-toast',\n        class: this.bToastClasses,\n        attrs: _objectSpread2({}, scopedStyleAttrs, {\n          id: this.safeId('_toast_outer'),\n          role: this.isHiding ? null : this.isStatus ? 'status' : 'alert',\n          'aria-live': this.isHiding ? null : this.isStatus ? 'polite' : 'assertive',\n          'aria-atomic': this.isHiding ? null : 'true'\n        })\n      }, [h(BVTransition, {\n        props: {\n          noFade: this.noFade\n        },\n        on: this.transitionHandlers\n      }, [this.localShow ? this.makeToast(h) : h()])])]);\n    }\n  });\n\n  var PROP_NAME$3 = '$bvToast';\n  var PROP_NAME_PRIV$1 = '_bv__toast'; // Base toast props that are allowed\n  // Some may be ignored or overridden on some message boxes\n  // Prop ID is allowed, but really only should be used for testing\n  // We need to add it in explicitly as it comes from the `idMixin`\n\n  var BASE_PROPS$1 = ['id'].concat(_toConsumableArray(keys(omit(props$_, ['static', 'visible'])))); // Map prop names to toast slot names\n\n  var propsToSlots$1 = {\n    toastContent: 'default',\n    title: 'toast-title'\n  }; // --- Utility methods ---\n  // Method to filter only recognized props that are not undefined\n\n  var filterOptions$1 = function filterOptions(options) {\n    return BASE_PROPS$1.reduce(function (memo, key) {\n      if (!isUndefined(options[key])) {\n        memo[key] = options[key];\n      }\n\n      return memo;\n    }, {});\n  }; // Method to install `$bvToast` VM injection\n\n\n  var plugin$1 = function plugin(Vue) {\n    // Create a private sub-component constructor that\n    // extends BToast and self-destructs after hidden\n    // @vue/component\n    var BToastPop = Vue.extend({\n      name: 'BToastPop',\n      extends: BToast,\n      destroyed: function destroyed() {\n        // Make sure we not in document any more\n        if (this.$el && this.$el.parentNode) {\n          this.$el.parentNode.removeChild(this.$el);\n        }\n      },\n      mounted: function mounted() {\n        var self = this; // Self destruct handler\n\n        var handleDestroy = function handleDestroy() {\n          // Ensure the toast has been force hidden\n          self.localShow = false;\n          self.doRender = false;\n          self.$nextTick(function () {\n            self.$nextTick(function () {\n              // In a `requestAF()` to release control back to application\n              // and to allow the portal-target time to remove the content\n              requestAF(function () {\n                self.$destroy();\n              });\n            });\n          });\n        }; // Self destruct if parent destroyed\n\n\n        this.$parent.$once('hook:destroyed', handleDestroy); // Self destruct after hidden\n\n        this.$once('hidden', handleDestroy); // Self destruct when toaster is destroyed\n\n        this.listenOnRoot('bv::toaster::destroyed', function (toaster) {\n          /* istanbul ignore next: hard to test */\n          if (toaster === self.toaster) {\n            handleDestroy();\n          }\n        });\n      }\n    }); // Private method to generate the on-demand toast\n\n    var makeToast = function makeToast(props, $parent) {\n      if (warnNotClient(PROP_NAME$3)) {\n        /* istanbul ignore next */\n        return;\n      } // Create an instance of `BToastPop` component\n\n\n      var toast = new BToastPop({\n        // We set parent as the local VM so these toasts can emit events on the\n        // app `$root`, and it ensures `BToast` is destroyed when parent is destroyed\n        parent: $parent,\n        propsData: _objectSpread2({}, filterOptions$1(getComponentConfig('BToast') || {}), {}, omit(props, keys(propsToSlots$1)), {\n          // Props that can't be overridden\n          static: false,\n          visible: true\n        })\n      }); // Convert certain props to slots\n\n      keys(propsToSlots$1).forEach(function (prop) {\n        var value = props[prop];\n\n        if (!isUndefined(value)) {\n          // Can be a string, or array of VNodes\n          if (prop === 'title' && isString(value)) {\n            // Special case for title if it is a string, we wrap in a <strong>\n            value = [$parent.$createElement('strong', {\n              class: 'mr-2'\n            }, value)];\n          }\n\n          toast.$slots[propsToSlots$1[prop]] = concat(value);\n        }\n      }); // Create a mount point (a DIV) and mount it (which triggers the show)\n\n      var div = document.createElement('div');\n      document.body.appendChild(div);\n      toast.$mount(div);\n    }; // Declare BvToast instance property class\n\n\n    var BvToast =\n    /*#__PURE__*/\n    function () {\n      function BvToast(vm) {\n        _classCallCheck(this, BvToast);\n\n        // Assign the new properties to this instance\n        assign(this, {\n          _vm: vm,\n          _root: vm.$root\n        }); // Set these properties as read-only and non-enumerable\n\n        defineProperties(this, {\n          _vm: readonlyDescriptor(),\n          _root: readonlyDescriptor()\n        });\n      } // --- Public Instance methods ---\n      // Opens a user defined toast and returns immediately\n\n\n      _createClass(BvToast, [{\n        key: \"toast\",\n        value: function toast(content) {\n          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n          if (!content || warnNotClient(PROP_NAME$3)) {\n            /* istanbul ignore next */\n            return;\n          }\n\n          makeToast(_objectSpread2({}, filterOptions$1(options), {\n            toastContent: content\n          }), this._vm);\n        } // shows a `<b-toast>` component with the specified ID\n\n      }, {\n        key: \"show\",\n        value: function show(id) {\n          if (id) {\n            this._root.$emit('bv::show::toast', id);\n          }\n        } // Hide a toast with specified ID, or if not ID all toasts\n\n      }, {\n        key: \"hide\",\n        value: function hide() {\n          var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n          this._root.$emit('bv::hide::toast', id);\n        }\n      }]);\n\n      return BvToast;\n    }(); // Add our instance mixin\n\n\n    Vue.mixin({\n      beforeCreate: function beforeCreate() {\n        // Because we need access to `$root` for `$emits`, and VM for parenting,\n        // we have to create a fresh instance of `BvToast` for each VM\n        this[PROP_NAME_PRIV$1] = new BvToast(this);\n      }\n    }); // Define our read-only `$bvToast` instance property\n    // Placed in an if just in case in HMR mode\n    // eslint-disable-next-line no-prototype-builtins\n\n    if (!Vue.prototype.hasOwnProperty(PROP_NAME$3)) {\n      defineProperty(Vue.prototype, PROP_NAME$3, {\n        get: function get() {\n          /* istanbul ignore next */\n          if (!this || !this[PROP_NAME_PRIV$1]) {\n            warn(\"\\\"\".concat(PROP_NAME$3, \"\\\" must be accessed from a Vue instance \\\"this\\\" context.\"), 'BToast');\n          }\n\n          return this[PROP_NAME_PRIV$1];\n        }\n      });\n    }\n  };\n\n  var BVToastPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    plugins: {\n      plugin: plugin$1\n    }\n  });\n\n  var ToastPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BToast: BToast,\n      BToaster: BToaster\n    },\n    // $bvToast injection\n    plugins: {\n      BVToastPlugin: BVToastPlugin\n    }\n  });\n\n  var BV_TOOLTIP = '__BV_Tooltip__'; // Default trigger\n\n  var DefaultTrigger$1 = 'hover focus'; // Valid event triggers\n\n  var validTriggers$1 = {\n    focus: true,\n    hover: true,\n    click: true,\n    blur: true,\n    manual: true\n  }; // Directive modifier test regular expressions. Pre-compile for performance\n\n  var htmlRE$1 = /^html$/i;\n  var noninteractiveRE = /^noninteractive$/i;\n  var noFadeRE$1 = /^nofade$/i;\n  var placementRE$1 = /^(auto|top(left|right)?|bottom(left|right)?|left(top|bottom)?|right(top|bottom)?)$/i;\n  var boundaryRE$1 = /^(window|viewport|scrollParent)$/i;\n  var delayRE$1 = /^d\\d+$/i;\n  var delayShowRE$1 = /^ds\\d+$/i;\n  var delayHideRE$1 = /^dh\\d+$/i;\n  var offsetRE$1 = /^o-?\\d+$/i;\n  var variantRE$1 = /^v-.+$/i;\n  var spacesRE$1 = /\\s+/; // Build a Tooltip config based on bindings (if any)\n  // Arguments and modifiers take precedence over passed value config object\n\n  var parseBindings$1 = function parseBindings(bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    // We start out with a basic config\n    var NAME = 'BTooltip'; // Default config\n\n    var config = {\n      title: undefined,\n      trigger: '',\n      // Default set below if needed\n      placement: 'top',\n      fallbackPlacement: 'flip',\n      container: false,\n      // Default of body\n      animation: true,\n      offset: 0,\n      id: null,\n      html: false,\n      interactive: true,\n      disabled: false,\n      delay: getComponentConfig(NAME, 'delay'),\n      boundary: String(getComponentConfig(NAME, 'boundary')),\n      boundaryPadding: parseInt(getComponentConfig(NAME, 'boundaryPadding'), 10) || 0,\n      variant: getComponentConfig(NAME, 'variant'),\n      customClass: getComponentConfig(NAME, 'customClass')\n    }; // Process `bindings.value`\n\n    if (isString(bindings.value) || isNumber(bindings.value)) {\n      // Value is tooltip content (HTML optionally supported)\n      config.title = bindings.value;\n    } else if (isFunction(bindings.value)) {\n      // Title generator function\n      config.title = bindings.value;\n    } else if (isPlainObject(bindings.value)) {\n      // Value is config object, so merge\n      config = _objectSpread2({}, config, {}, bindings.value);\n    } // If title is not provided, try title attribute\n\n\n    if (isUndefined(config.title)) {\n      // Try attribute\n      var data = vnode.data || {};\n      config.title = data.attrs && !isUndefinedOrNull(data.attrs.title) ? data.attrs.title : undefined;\n    } // Normalize delay\n\n\n    if (!isPlainObject(config.delay)) {\n      config.delay = {\n        show: parseInt(config.delay, 10) || 0,\n        hide: parseInt(config.delay, 10) || 0\n      };\n    } // If argument, assume element ID of container element\n\n\n    if (bindings.arg) {\n      // Element ID specified as arg\n      // We must prepend '#' to become a CSS selector\n      config.container = \"#\".concat(bindings.arg);\n    } // Process modifiers\n\n\n    keys(bindings.modifiers).forEach(function (mod) {\n      if (htmlRE$1.test(mod)) {\n        // Title allows HTML\n        config.html = true;\n      } else if (noninteractiveRE.test(mod)) {\n        // Noninteractive\n        config.interactive = false;\n      } else if (noFadeRE$1.test(mod)) {\n        // No animation\n        config.animation = false;\n      } else if (placementRE$1.test(mod)) {\n        // Placement of tooltip\n        config.placement = mod;\n      } else if (boundaryRE$1.test(mod)) {\n        // Boundary of tooltip\n        mod = mod === 'scrollparent' ? 'scrollParent' : mod;\n        config.boundary = mod;\n      } else if (delayRE$1.test(mod)) {\n        // Delay value\n        var delay = parseInt(mod.slice(1), 10) || 0;\n        config.delay.show = delay;\n        config.delay.hide = delay;\n      } else if (delayShowRE$1.test(mod)) {\n        // Delay show value\n        config.delay.show = parseInt(mod.slice(2), 10) || 0;\n      } else if (delayHideRE$1.test(mod)) {\n        // Delay hide value\n        config.delay.hide = parseInt(mod.slice(2), 10) || 0;\n      } else if (offsetRE$1.test(mod)) {\n        // Offset value, negative allowed\n        config.offset = parseInt(mod.slice(1), 10) || 0;\n      } else if (variantRE$1.test(mod)) {\n        // Variant\n        config.variant = mod.slice(2) || null;\n      }\n    }); // Special handling of event trigger modifiers trigger is\n    // a space separated list\n\n    var selectedTriggers = {}; // Parse current config object trigger\n\n    concat(config.trigger || '').filter(identity).join(' ').trim().toLowerCase().split(spacesRE$1).forEach(function (trigger) {\n      if (validTriggers$1[trigger]) {\n        selectedTriggers[trigger] = true;\n      }\n    }); // Parse modifiers for triggers\n\n    keys(bindings.modifiers).forEach(function (mod) {\n      mod = mod.toLowerCase();\n\n      if (validTriggers$1[mod]) {\n        // If modifier is a valid trigger\n        selectedTriggers[mod] = true;\n      }\n    }); // Sanitize triggers\n\n    config.trigger = keys(selectedTriggers).join(' ');\n\n    if (config.trigger === 'blur') {\n      // Blur by itself is useless, so convert it to 'focus'\n      config.trigger = 'focus';\n    }\n\n    if (!config.trigger) {\n      // Use default trigger\n      config.trigger = DefaultTrigger$1;\n    } // Return the config\n\n\n    return config;\n  }; // Add/update Tooltip on our element\n\n\n  var applyTooltip = function applyTooltip(el, bindings, vnode) {\n    if (!isBrowser) {\n      /* istanbul ignore next */\n      return;\n    }\n\n    var config = parseBindings$1(bindings, vnode);\n\n    if (!el[BV_TOOLTIP]) {\n      var $parent = vnode.context;\n      el[BV_TOOLTIP] = new BVTooltip({\n        parent: $parent,\n        // Add the parent's scoped style attribute data\n        _scopeId: getScopeId($parent, undefined)\n      });\n      el[BV_TOOLTIP].__bv_prev_data__ = {};\n      el[BV_TOOLTIP].$on('show', function ()\n      /* istanbul ignore next: for now */\n      {\n        // Before showing the tooltip, we update the title if it is a function\n        if (isFunction(config.title)) {\n          el[BV_TOOLTIP].updateData({\n            title: config.title(el)\n          });\n        }\n      });\n    }\n\n    var data = {\n      title: config.title,\n      triggers: config.trigger,\n      placement: config.placement,\n      fallbackPlacement: config.fallbackPlacement,\n      variant: config.variant,\n      customClass: config.customClass,\n      container: config.container,\n      boundary: config.boundary,\n      delay: config.delay,\n      offset: config.offset,\n      noFade: !config.animation,\n      id: config.id,\n      interactive: config.interactive,\n      disabled: config.disabled,\n      html: config.html\n    };\n    var oldData = el[BV_TOOLTIP].__bv_prev_data__;\n    el[BV_TOOLTIP].__bv_prev_data__ = data;\n\n    if (!looseEqual(data, oldData)) {\n      // We only update the instance if data has changed\n      var newData = {\n        target: el\n      };\n      keys(data).forEach(function (prop) {\n        // We only pass data properties that have changed\n        if (data[prop] !== oldData[prop]) {\n          // if title is a function, we execute it here\n          newData[prop] = prop === 'title' && isFunction(data[prop]) ? data[prop](el) : data[prop];\n        }\n      });\n      el[BV_TOOLTIP].updateData(newData);\n    }\n  }; // Remove Tooltip on our element\n\n\n  var removeTooltip = function removeTooltip(el) {\n    if (el[BV_TOOLTIP]) {\n      el[BV_TOOLTIP].$destroy();\n      el[BV_TOOLTIP] = null;\n    }\n\n    delete el[BV_TOOLTIP];\n  }; // Export our directive\n\n\n  var VBTooltip = {\n    bind: function bind(el, bindings, vnode) {\n      applyTooltip(el, bindings, vnode);\n    },\n    // We use `componentUpdated` here instead of `update`, as the former\n    // waits until the containing component and children have finished updating\n    componentUpdated: function componentUpdated(el, bindings, vnode) {\n      // Performed in a `$nextTick()` to prevent render update loops\n      vnode.context.$nextTick(function () {\n        applyTooltip(el, bindings, vnode);\n      });\n    },\n    unbind: function unbind(el) {\n      removeTooltip(el);\n    }\n  };\n\n  var VBTooltipPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    directives: {\n      VBTooltip: VBTooltip\n    }\n  });\n\n  var TooltipPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    components: {\n      BTooltip: BTooltip\n    },\n    plugins: {\n      VBTooltipPlugin: VBTooltipPlugin\n    }\n  });\n\n  var componentsPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    plugins: {\n      AlertPlugin: AlertPlugin,\n      BadgePlugin: BadgePlugin,\n      BreadcrumbPlugin: BreadcrumbPlugin,\n      ButtonPlugin: ButtonPlugin,\n      ButtonGroupPlugin: ButtonGroupPlugin,\n      ButtonToolbarPlugin: ButtonToolbarPlugin,\n      CalendarPlugin: CalendarPlugin,\n      CardPlugin: CardPlugin,\n      CarouselPlugin: CarouselPlugin,\n      CollapsePlugin: CollapsePlugin,\n      DropdownPlugin: DropdownPlugin,\n      EmbedPlugin: EmbedPlugin,\n      FormPlugin: FormPlugin,\n      FormCheckboxPlugin: FormCheckboxPlugin,\n      FormDatepickerPlugin: FormDatepickerPlugin,\n      FormFilePlugin: FormFilePlugin,\n      FormGroupPlugin: FormGroupPlugin,\n      FormInputPlugin: FormInputPlugin,\n      FormRadioPlugin: FormRadioPlugin,\n      FormSelectPlugin: FormSelectPlugin,\n      FormSpinbuttonPlugin: FormSpinbuttonPlugin,\n      FormTagsPlugin: FormTagsPlugin,\n      FormTextareaPlugin: FormTextareaPlugin,\n      ImagePlugin: ImagePlugin,\n      InputGroupPlugin: InputGroupPlugin,\n      JumbotronPlugin: JumbotronPlugin,\n      LayoutPlugin: LayoutPlugin,\n      LinkPlugin: LinkPlugin,\n      ListGroupPlugin: ListGroupPlugin,\n      MediaPlugin: MediaPlugin,\n      ModalPlugin: ModalPlugin,\n      NavPlugin: NavPlugin,\n      NavbarPlugin: NavbarPlugin,\n      PaginationPlugin: PaginationPlugin,\n      PaginationNavPlugin: PaginationNavPlugin,\n      PopoverPlugin: PopoverPlugin,\n      ProgressPlugin: ProgressPlugin,\n      SpinnerPlugin: SpinnerPlugin,\n      TablePlugin: TablePlugin,\n      TabsPlugin: TabsPlugin,\n      ToastPlugin: ToastPlugin,\n      TooltipPlugin: TooltipPlugin\n    }\n  });\n\n  var VBHoverPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    directives: {\n      VBHover: VBHover\n    }\n  });\n\n  var VBModalPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    directives: {\n      VBModal: VBModal\n    }\n  });\n\n  /*\n   * Constants / Defaults\n   */\n\n  var NAME$E = 'v-b-scrollspy';\n  var ACTIVATE_EVENT = 'bv::scrollspy::activate';\n  var Default = {\n    element: 'body',\n    offset: 10,\n    method: 'auto',\n    throttle: 75\n  };\n  var DefaultType = {\n    element: '(string|element|component)',\n    offset: 'number',\n    method: 'string',\n    throttle: 'number'\n  };\n  var ClassName = {\n    DROPDOWN_ITEM: 'dropdown-item',\n    ACTIVE: 'active'\n  };\n  var Selector$2 = {\n    ACTIVE: '.active',\n    NAV_LIST_GROUP: '.nav, .list-group',\n    NAV_LINKS: '.nav-link',\n    NAV_ITEMS: '.nav-item',\n    LIST_ITEMS: '.list-group-item',\n    DROPDOWN: '.dropdown, .dropup',\n    DROPDOWN_ITEMS: '.dropdown-item',\n    DROPDOWN_TOGGLE: '.dropdown-toggle'\n  };\n  var OffsetMethod = {\n    OFFSET: 'offset',\n    POSITION: 'position'\n  }; // HREFs must end with a hash followed by at least one non-hash character.\n  // HREFs in the links are assumed to point to non-external links.\n  // Comparison to the current page base URL is not performed!\n\n  var HREF_REGEX = /^.*(#[^#]+)$/; // Transition Events\n\n  var TransitionEndEvents$1 = ['webkitTransitionEnd', 'transitionend', 'otransitionend', 'oTransitionEnd'];\n  /*\n   * Utility Methods\n   */\n  // Better var type detection\n\n  var toType$1 = function toType(obj)\n  /* istanbul ignore next: not easy to test */\n  {\n    return toString(obj).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n  }; // Check config properties for expected types\n\n\n  var typeCheckConfig = function typeCheckConfig(componentName, config, configTypes)\n  /* istanbul ignore next: not easy to test */\n  {\n    for (var property in configTypes) {\n      if (Object.prototype.hasOwnProperty.call(configTypes, property)) {\n        var expectedTypes = configTypes[property];\n        var value = config[property];\n        var valueType = value && isElement(value) ? 'element' : toType$1(value); // handle Vue instances\n\n        valueType = value && value._isVue ? 'component' : valueType;\n\n        if (!new RegExp(expectedTypes).test(valueType)) {\n          /* istanbul ignore next */\n          warn(\"\".concat(componentName, \": Option \\\"\").concat(property, \"\\\" provided type \\\"\").concat(valueType, \"\\\" but expected type \\\"\").concat(expectedTypes, \"\\\"\"));\n        }\n      }\n    }\n  };\n  /*\n   * ------------------------------------------------------------------------\n   * Class Definition\n   * ------------------------------------------------------------------------\n   */\n\n  /* istanbul ignore next: not easy to test */\n\n\n  var ScrollSpy\n  /* istanbul ignore next: not easy to test */\n  =\n  /*#__PURE__*/\n  function () {\n    function ScrollSpy(element, config, $root) {\n      _classCallCheck(this, ScrollSpy);\n\n      // The element we activate links in\n      this.$el = element;\n      this.$scroller = null;\n      this.$selector = [Selector$2.NAV_LINKS, Selector$2.LIST_ITEMS, Selector$2.DROPDOWN_ITEMS].join(',');\n      this.$offsets = [];\n      this.$targets = [];\n      this.$activeTarget = null;\n      this.$scrollHeight = 0;\n      this.$resizeTimeout = null;\n      this.$obs_scroller = null;\n      this.$obs_targets = null;\n      this.$root = $root || null;\n      this.$config = null;\n      this.updateConfig(config);\n    }\n\n    _createClass(ScrollSpy, [{\n      key: \"updateConfig\",\n      value: function updateConfig(config, $root) {\n        if (this.$scroller) {\n          // Just in case out scroll element has changed\n          this.unlisten();\n          this.$scroller = null;\n        }\n\n        var cfg = _objectSpread2({}, this.constructor.Default, {}, config);\n\n        if ($root) {\n          this.$root = $root;\n        }\n\n        typeCheckConfig(this.constructor.Name, cfg, this.constructor.DefaultType);\n        this.$config = cfg;\n\n        if (this.$root) {\n          var self = this;\n          this.$root.$nextTick(function () {\n            self.listen();\n          });\n        } else {\n          this.listen();\n        }\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.unlisten();\n        clearTimeout(this.$resizeTimeout);\n        this.$resizeTimeout = null;\n        this.$el = null;\n        this.$config = null;\n        this.$scroller = null;\n        this.$selector = null;\n        this.$offsets = null;\n        this.$targets = null;\n        this.$activeTarget = null;\n        this.$scrollHeight = null;\n      }\n    }, {\n      key: \"listen\",\n      value: function listen() {\n        var _this = this;\n\n        var scroller = this.getScroller();\n\n        if (scroller && scroller.tagName !== 'BODY') {\n          eventOn(scroller, 'scroll', this, EVENT_OPTIONS_NO_CAPTURE);\n        }\n\n        eventOn(window, 'scroll', this, EVENT_OPTIONS_NO_CAPTURE);\n        eventOn(window, 'resize', this, EVENT_OPTIONS_NO_CAPTURE);\n        eventOn(window, 'orientationchange', this, EVENT_OPTIONS_NO_CAPTURE);\n        TransitionEndEvents$1.forEach(function (evtName) {\n          eventOn(window, evtName, _this, EVENT_OPTIONS_NO_CAPTURE);\n        });\n        this.setObservers(true); // Schedule a refresh\n\n        this.handleEvent('refresh');\n      }\n    }, {\n      key: \"unlisten\",\n      value: function unlisten() {\n        var _this2 = this;\n\n        var scroller = this.getScroller();\n        this.setObservers(false);\n\n        if (scroller && scroller.tagName !== 'BODY') {\n          eventOff(scroller, 'scroll', this, EVENT_OPTIONS_NO_CAPTURE);\n        }\n\n        eventOff(window, 'scroll', this, EVENT_OPTIONS_NO_CAPTURE);\n        eventOff(window, 'resize', this, EVENT_OPTIONS_NO_CAPTURE);\n        eventOff(window, 'orientationchange', this, EVENT_OPTIONS_NO_CAPTURE);\n        TransitionEndEvents$1.forEach(function (evtName) {\n          eventOff(window, evtName, _this2, EVENT_OPTIONS_NO_CAPTURE);\n        });\n      }\n    }, {\n      key: \"setObservers\",\n      value: function setObservers(on) {\n        var _this3 = this;\n\n        // We observe both the scroller for content changes, and the target links\n        if (this.$obs_scroller) {\n          this.$obs_scroller.disconnect();\n          this.$obs_scroller = null;\n        }\n\n        if (this.$obs_targets) {\n          this.$obs_targets.disconnect();\n          this.$obs_targets = null;\n        }\n\n        if (on) {\n          this.$obs_targets = observeDom(this.$el, function () {\n            _this3.handleEvent('mutation');\n          }, {\n            subtree: true,\n            childList: true,\n            attributes: true,\n            attributeFilter: ['href']\n          });\n          this.$obs_scroller = observeDom(this.getScroller(), function () {\n            _this3.handleEvent('mutation');\n          }, {\n            subtree: true,\n            childList: true,\n            characterData: true,\n            attributes: true,\n            attributeFilter: ['id', 'style', 'class']\n          });\n        }\n      } // General event handler\n\n    }, {\n      key: \"handleEvent\",\n      value: function handleEvent(evt) {\n        var type = isString(evt) ? evt : evt.type;\n        var self = this;\n\n        var resizeThrottle = function resizeThrottle() {\n          if (!self.$resizeTimeout) {\n            self.$resizeTimeout = setTimeout(function () {\n              self.refresh();\n              self.process();\n              self.$resizeTimeout = null;\n            }, self.$config.throttle);\n          }\n        };\n\n        if (type === 'scroll') {\n          if (!this.$obs_scroller) {\n            // Just in case we are added to the DOM before the scroll target is\n            // We re-instantiate our listeners, just in case\n            this.listen();\n          }\n\n          this.process();\n        } else if (/(resize|orientationchange|mutation|refresh)/.test(type)) {\n          // Postpone these events by throttle time\n          resizeThrottle();\n        }\n      } // Refresh the list of target links on the element we are applied to\n\n    }, {\n      key: \"refresh\",\n      value: function refresh() {\n        var _this4 = this;\n\n        var scroller = this.getScroller();\n\n        if (!scroller) {\n          return;\n        }\n\n        var autoMethod = scroller !== scroller.window ? OffsetMethod.POSITION : OffsetMethod.OFFSET;\n        var method = this.$config.method === 'auto' ? autoMethod : this.$config.method;\n        var methodFn = method === OffsetMethod.POSITION ? position : offset;\n        var offsetBase = method === OffsetMethod.POSITION ? this.getScrollTop() : 0;\n        this.$offsets = [];\n        this.$targets = [];\n        this.$scrollHeight = this.getScrollHeight(); // Find all the unique link HREFs that we will control\n\n        selectAll(this.$selector, this.$el) // Get HREF value\n        .map(function (link) {\n          return getAttr(link, 'href');\n        }) // Filter out HREFs that do not match our RegExp\n        .filter(function (href) {\n          return href && HREF_REGEX.test(href || '');\n        }) // Find all elements with ID that match HREF hash\n        .map(function (href) {\n          // Convert HREF into an ID (including # at beginning)\n          var id = href.replace(HREF_REGEX, '$1').trim();\n\n          if (!id) {\n            return null;\n          } // Find the element with the ID specified by id\n\n\n          var el = select(id, scroller);\n\n          if (el && isVisible(el)) {\n            return {\n              offset: parseInt(methodFn(el).top, 10) + offsetBase,\n              target: id\n            };\n          }\n\n          return null;\n        }).filter(Boolean) // Sort them by their offsets (smallest first)\n        .sort(function (a, b) {\n          return a.offset - b.offset;\n        }) // record only unique targets/offsets\n        .reduce(function (memo, item) {\n          if (!memo[item.target]) {\n            _this4.$offsets.push(item.offset);\n\n            _this4.$targets.push(item.target);\n\n            memo[item.target] = true;\n          }\n\n          return memo;\n        }, {}); // Return this for easy chaining\n\n        return this;\n      } // Handle activating/clearing\n\n    }, {\n      key: \"process\",\n      value: function process() {\n        var scrollTop = this.getScrollTop() + this.$config.offset;\n        var scrollHeight = this.getScrollHeight();\n        var maxScroll = this.$config.offset + scrollHeight - this.getOffsetHeight();\n\n        if (this.$scrollHeight !== scrollHeight) {\n          this.refresh();\n        }\n\n        if (scrollTop >= maxScroll) {\n          var target = this.$targets[this.$targets.length - 1];\n\n          if (this.$activeTarget !== target) {\n            this.activate(target);\n          }\n\n          return;\n        }\n\n        if (this.$activeTarget && scrollTop < this.$offsets[0] && this.$offsets[0] > 0) {\n          this.$activeTarget = null;\n          this.clear();\n          return;\n        }\n\n        for (var i = this.$offsets.length; i--;) {\n          var isActiveTarget = this.$activeTarget !== this.$targets[i] && scrollTop >= this.$offsets[i] && (isUndefined(this.$offsets[i + 1]) || scrollTop < this.$offsets[i + 1]);\n\n          if (isActiveTarget) {\n            this.activate(this.$targets[i]);\n          }\n        }\n      }\n    }, {\n      key: \"getScroller\",\n      value: function getScroller() {\n        if (this.$scroller) {\n          return this.$scroller;\n        }\n\n        var scroller = this.$config.element;\n\n        if (!scroller) {\n          return null;\n        } else if (isElement(scroller.$el)) {\n          scroller = scroller.$el;\n        } else if (isString(scroller)) {\n          scroller = select(scroller);\n        }\n\n        if (!scroller) {\n          return null;\n        }\n\n        this.$scroller = scroller.tagName === 'BODY' ? window : scroller;\n        return this.$scroller;\n      }\n    }, {\n      key: \"getScrollTop\",\n      value: function getScrollTop() {\n        var scroller = this.getScroller();\n        return scroller === window ? scroller.pageYOffset : scroller.scrollTop;\n      }\n    }, {\n      key: \"getScrollHeight\",\n      value: function getScrollHeight() {\n        return this.getScroller().scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n      }\n    }, {\n      key: \"getOffsetHeight\",\n      value: function getOffsetHeight() {\n        var scroller = this.getScroller();\n        return scroller === window ? window.innerHeight : getBCR(scroller).height;\n      }\n    }, {\n      key: \"activate\",\n      value: function activate(target) {\n        var _this5 = this;\n\n        this.$activeTarget = target;\n        this.clear(); // Grab the list of target links (<a href=\"{$target}\">)\n\n        var links = selectAll(this.$selector // Split out the base selectors\n        .split(',') // Map to a selector that matches links with HREF ending in the ID (including '#')\n        .map(function (selector) {\n          return \"\".concat(selector, \"[href$=\\\"\").concat(target, \"\\\"]\");\n        }) // Join back into a single selector string\n        .join(','), this.$el);\n        links.forEach(function (link) {\n          if (hasClass(link, ClassName.DROPDOWN_ITEM)) {\n            // This is a dropdown item, so find the .dropdown-toggle and set its state\n            var dropdown = closest(Selector$2.DROPDOWN, link);\n\n            if (dropdown) {\n              _this5.setActiveState(select(Selector$2.DROPDOWN_TOGGLE, dropdown), true);\n            } // Also set this link's state\n\n\n            _this5.setActiveState(link, true);\n          } else {\n            // Set triggered link as active\n            _this5.setActiveState(link, true);\n\n            if (matches(link.parentElement, Selector$2.NAV_ITEMS)) {\n              // Handle nav-link inside nav-item, and set nav-item active\n              _this5.setActiveState(link.parentElement, true);\n            } // Set triggered links parents as active\n            // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\n\n\n            var el = link;\n\n            while (el) {\n              el = closest(Selector$2.NAV_LIST_GROUP, el);\n              var sibling = el ? el.previousElementSibling : null;\n\n              if (sibling && matches(sibling, \"\".concat(Selector$2.NAV_LINKS, \", \").concat(Selector$2.LIST_ITEMS))) {\n                _this5.setActiveState(sibling, true);\n              } // Handle special case where nav-link is inside a nav-item\n\n\n              if (sibling && matches(sibling, Selector$2.NAV_ITEMS)) {\n                _this5.setActiveState(select(Selector$2.NAV_LINKS, sibling), true); // Add active state to nav-item as well\n\n\n                _this5.setActiveState(sibling, true);\n              }\n            }\n          }\n        }); // Signal event to via $root, passing ID of activated target and reference to array of links\n\n        if (links && links.length > 0 && this.$root) {\n          this.$root.$emit(ACTIVATE_EVENT, target, links);\n        }\n      }\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        var _this6 = this;\n\n        selectAll(\"\".concat(this.$selector, \", \").concat(Selector$2.NAV_ITEMS), this.$el).filter(function (el) {\n          return hasClass(el, ClassName.ACTIVE);\n        }).forEach(function (el) {\n          return _this6.setActiveState(el, false);\n        });\n      }\n    }, {\n      key: \"setActiveState\",\n      value: function setActiveState(el, active) {\n        if (!el) {\n          return;\n        }\n\n        if (active) {\n          addClass(el, ClassName.ACTIVE);\n        } else {\n          removeClass(el, ClassName.ACTIVE);\n        }\n      }\n    }], [{\n      key: \"Name\",\n      get: function get() {\n        return NAME$E;\n      }\n    }, {\n      key: \"Default\",\n      get: function get() {\n        return Default;\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return DefaultType;\n      }\n    }]);\n\n    return ScrollSpy;\n  }();\n\n  var BV_SCROLLSPY = '__BV_ScrollSpy__'; // Pre-compiled regular expressions\n\n  var onlyDigitsRE = /^\\d+$/;\n  var offsetRE$2 = /^(auto|position|offset)$/; // Build a ScrollSpy config based on bindings (if any)\n  // Arguments and modifiers take precedence over passed value config object\n\n  /* istanbul ignore next: not easy to test */\n\n  var parseBindings$2 = function parseBindings(bindings)\n  /* istanbul ignore next: not easy to test */\n  {\n    var config = {}; // If argument, assume element ID\n\n    if (bindings.arg) {\n      // Element ID specified as arg\n      // We must prepend '#' to become a CSS selector\n      config.element = \"#\".concat(bindings.arg);\n    } // Process modifiers\n\n\n    keys(bindings.modifiers).forEach(function (mod) {\n      if (onlyDigitsRE.test(mod)) {\n        // Offset value\n        config.offset = parseInt(mod, 10);\n      } else if (offsetRE$2.test(mod)) {\n        // Offset method\n        config.method = mod;\n      }\n    }); // Process value\n\n    if (isString(bindings.value)) {\n      // Value is a CSS ID or selector\n      config.element = bindings.value;\n    } else if (isNumber(bindings.value)) {\n      // Value is offset\n      config.offset = Math.round(bindings.value);\n    } else if (isObject(bindings.value)) {\n      // Value is config object\n      // Filter the object based on our supported config options\n      keys(bindings.value).filter(function (k) {\n        return !!ScrollSpy.DefaultType[k];\n      }).forEach(function (k) {\n        config[k] = bindings.value[k];\n      });\n    }\n\n    return config;\n  }; // Add or update ScrollSpy on our element\n\n\n  var applyScrollspy = function applyScrollspy(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    if (!isBrowser) {\n      /* istanbul ignore next */\n      return;\n    }\n\n    var config = parseBindings$2(bindings);\n\n    if (el[BV_SCROLLSPY]) {\n      el[BV_SCROLLSPY].updateConfig(config, vnode.context.$root);\n    } else {\n      el[BV_SCROLLSPY] = new ScrollSpy(el, config, vnode.context.$root);\n    }\n  }; // Remove ScrollSpy on our element\n\n  /* istanbul ignore next: not easy to test */\n\n\n  var removeScrollspy = function removeScrollspy(el)\n  /* istanbul ignore next: not easy to test */\n  {\n    if (el[BV_SCROLLSPY]) {\n      el[BV_SCROLLSPY].dispose();\n      el[BV_SCROLLSPY] = null;\n      delete el[BV_SCROLLSPY];\n    }\n  };\n  /*\n   * Export our directive\n   */\n\n\n  var VBScrollspy = {\n    bind: function bind(el, bindings, vnode)\n    /* istanbul ignore next: not easy to test */\n    {\n      applyScrollspy(el, bindings, vnode);\n    },\n    inserted: function inserted(el, bindings, vnode)\n    /* istanbul ignore next: not easy to test */\n    {\n      applyScrollspy(el, bindings, vnode);\n    },\n    update: function update(el, bindings, vnode)\n    /* istanbul ignore next: not easy to test */\n    {\n      if (bindings.value !== bindings.oldValue) {\n        applyScrollspy(el, bindings, vnode);\n      }\n    },\n    componentUpdated: function componentUpdated(el, bindings, vnode)\n    /* istanbul ignore next: not easy to test */\n    {\n      if (bindings.value !== bindings.oldValue) {\n        applyScrollspy(el, bindings, vnode);\n      }\n    },\n    unbind: function unbind(el)\n    /* istanbul ignore next: not easy to test */\n    {\n      removeScrollspy(el);\n    }\n  };\n\n  var VBScrollspyPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    directives: {\n      VBScrollspy: VBScrollspy\n    }\n  });\n\n  var VBTogglePlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    directives: {\n      VBToggle: VBToggle\n    }\n  });\n\n  var VBVisiblePlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    directives: {\n      VBVisible: VBVisible\n    }\n  });\n\n  var directivesPlugin =\n  /*#__PURE__*/\n  pluginFactory({\n    plugins: {\n      VBHoverPlugin: VBHoverPlugin,\n      VBModalPlugin: VBModalPlugin,\n      VBPopoverPlugin: VBPopoverPlugin,\n      VBScrollspyPlugin: VBScrollspyPlugin,\n      VBTogglePlugin: VBTogglePlugin,\n      VBTooltipPlugin: VBTooltipPlugin,\n      VBVisiblePlugin: VBVisiblePlugin\n    }\n  });\n\n  var RX_ICON_PREFIX = /^BIcon/; // Helper BIcon component\n  // Requires the requested icon component to be installed\n\n  var BIcon =\n  /*#__PURE__*/\n  Vue.extend({\n    name: 'BIcon',\n    functional: true,\n    props: _objectSpread2({\n      icon: {\n        type: String,\n        default: null\n      }\n    }, commonIconProps, {\n      stacked: {\n        type: Boolean,\n        default: false\n      }\n    }),\n    render: function render(h, _ref) {\n      var data = _ref.data,\n          props = _ref.props,\n          parent = _ref.parent;\n      var icon = pascalCase(trim(props.icon || '')).replace(RX_ICON_PREFIX, '');\n      var iconName = \"BIcon\".concat(icon); // If parent context exists, we check to see if the icon has been registered\n      // Either locally in the parent component, or globally at the `$root` level\n      // If not registered, we render a blank icon\n\n      var components = ((parent || {}).$options || {}).components;\n      var componentRefOrName = icon && components ? components[iconName] || BIconBlank : icon ? iconName : BIconBlank;\n      return h(componentRefOrName, a(data, {\n        props: _objectSpread2({}, props, {\n          icon: null\n        })\n      }));\n    }\n  });\n\n  var NAME$F = 'BootstrapVue'; // --- BootstrapVue installer ---\n\n  var install =\n  /*#__PURE__*/\n  installFactory({\n    plugins: {\n      componentsPlugin: componentsPlugin,\n      directivesPlugin: directivesPlugin\n    }\n  }); // --- BootstrapVue plugin ---\n\n  var BootstrapVue =\n  /*#__PURE__*/\n  {\n    install: install,\n    NAME: NAME$F\n  }; // --- Named exports for BvConfigPlugin ---\n\n  // Main entry point for the browser build\n\n  vueUse(BootstrapVue);\n\n  return BootstrapVue;\n\n})));\n//# sourceMappingURL=bootstrap-vue.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/bootstrap-vue/dist/bootstrap-vue.js\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/***/ ((module) => {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/vue/dist/vue.esm.js":
/*!******************************************!*\
  !*** ./node_modules/vue/dist/vue.esm.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*!\n * Vue.js v2.6.12\n * (c) 2014-2020 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a string containing static keys from compiler modules.\n */\nfunction genStaticKeys (modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || [])\n  }, []).join(',')\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof __webpack_require__.g !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = __webpack_require__.g['process'] && __webpack_require__.g['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (true) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if ( true && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (target) {\n  targetStack.push(target);\n  Dep.target = target;\n}\n\nfunction popTarget () {\n  targetStack.pop();\n  Dep.target = targetStack[targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      protoAugment(value, arrayMethods);\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if ( true && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (true) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n       true && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n     true && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (true) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (true) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (true) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if ( true && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    true\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if ( true && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (true) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar isUsingMicroTask = false;\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n  isUsingMicroTask = true;\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n  isUsingMicroTask = true;\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Technically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\nvar mark;\nvar measure;\n\nif (true) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (true) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals. ' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n       true && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  if (def instanceof VNode) {\n    def = def.data.hook || (def.data.hook = {});\n  }\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (true) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (true) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {}\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (true) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      (slots.default || (slots.default = [])).push(child);\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length));\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i);\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if ( true && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n       true && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n       true && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if ( true && key !== '' && key !== null) {\n      // null is a special value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (true) {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (true) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n     true && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if ( true &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      if ( true && isDef(data) && isDef(data.nativeOn)) {\n        warn(\n          (\"The .native modifier for v-on is only valid on components but it was used on <\" + tag + \">.\"),\n          context\n        );\n      }\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (true) {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {}\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack because all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if ( true && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if ( true && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n       true && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                 true\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : 0\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (true) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (true) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if ( true && config.performance && mark) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((\"vue \" + name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((\"vue \" + name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before () {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (true) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (true) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (true) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if ( true && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if ( true && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  true\n    ? expOrFn.toString()\n    : 0;\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n       true && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (true) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {}\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n     true && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (true) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n       true && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if ( true && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (true) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if ( true &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (true) {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (true) {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (true) {\n      initProxy(vm);\n    } else {}\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if ( true &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if ( true && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if ( true && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (true) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.12';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select,progress');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');\n\nvar convertEnumeratedValue = function (key, value) {\n  return isFalsyAttrValue(value) || value === 'false'\n    ? 'false'\n    // allow arbitrary string value for contenteditable\n    : key === 'contenteditable' && isValidContentEditableValue(value)\n      ? value\n      : 'true'\n};\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode && childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode && parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return renderClass(data.staticClass, data.class)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template,blockquote,iframe,tfoot'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isPreTag = function (tag) { return tag === 'pre'; };\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n       true && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setStyleScope (node, scopeId) {\n  node.setAttribute(scopeId, '');\n}\n\nvar nodeOps = /*#__PURE__*/Object.freeze({\n  createElement: createElement$1,\n  createElementNS: createElementNS,\n  createTextNode: createTextNode,\n  createComment: createComment,\n  insertBefore: insertBefore,\n  removeChild: removeChild,\n  appendChild: appendChild,\n  parentNode: parentNode,\n  nextSibling: nextSibling,\n  tagName: tagName,\n  setTextContent: setTextContent,\n  setStyleScope: setStyleScope\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!isDef(key)) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (!Array.isArray(refs[key])) {\n        refs[key] = [ref];\n      } else if (refs[key].indexOf(ref) < 0) {\n        // $flow-disable-line\n        refs[key].push(ref);\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        isDef(a.data) === isDef(b.data) &&\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove$$1 () {\n      if (--remove$$1.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove$$1.listeners = listeners;\n    return remove$$1\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  function isUnknownElement$$1 (vnode, inVPre) {\n    return (\n      !inVPre &&\n      !vnode.ns &&\n      !(\n        config.ignoredElements.length &&\n        config.ignoredElements.some(function (ignore) {\n          return isRegExp(ignore)\n            ? ignore.test(vnode.tag)\n            : ignore === vnode.tag\n        })\n      ) &&\n      config.isUnknownElement(vnode.tag)\n    )\n  }\n\n  var creatingElmInVPre = 0;\n\n  function createElm (\n    vnode,\n    insertedVnodeQueue,\n    parentElm,\n    refElm,\n    nested,\n    ownerArray,\n    index\n  ) {\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n      // This vnode was used in a previous render!\n      // now it's used as a new node, overwriting its elm would cause\n      // potential patch errors down the road when it's used as an insertion\n      // reference node. Instead, we clone the node on-demand before creating\n      // associated DOM element for it.\n      vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (true) {\n        if (data && data.pre) {\n          creatingElmInVPre++;\n        }\n        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if ( true && data && data.pre) {\n        creatingElmInVPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        insert(parentElm, vnode.elm, refElm);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref$$1) {\n    if (isDef(parent)) {\n      if (isDef(ref$$1)) {\n        if (nodeOps.parentNode(ref$$1) === parent) {\n          nodeOps.insertBefore(parent, elm, ref$$1);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      if (true) {\n        checkDuplicateKeys(children);\n      }\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    if (isDef(i = vnode.fnScopeId)) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    } else {\n      var ancestor = vnode;\n      while (ancestor) {\n        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n          nodeOps.setStyleScope(vnode.elm, i);\n        }\n        ancestor = ancestor.parent;\n      }\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      i !== vnode.fnContext &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    if (true) {\n      checkDuplicateKeys(newCh);\n    }\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n        } else {\n          vnodeToMove = oldCh[idxInOld];\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n          }\n        }\n        newStartVnode = newCh[++newStartIdx];\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function checkDuplicateKeys (children) {\n    var seenKeys = {};\n    for (var i = 0; i < children.length; i++) {\n      var vnode = children[i];\n      var key = vnode.key;\n      if (isDef(key)) {\n        if (seenKeys[key]) {\n          warn(\n            (\"Duplicate keys detected: '\" + key + \"'. This may cause an update error.\"),\n            vnode.context\n          );\n        } else {\n          seenKeys[key] = true;\n        }\n      }\n    }\n  }\n\n  function findIdxInOld (node, oldCh, start, end) {\n    for (var i = start; i < end; i++) {\n      var c = oldCh[i];\n      if (isDef(c) && sameVnode(node, c)) { return i }\n    }\n  }\n\n  function patchVnode (\n    oldVnode,\n    vnode,\n    insertedVnodeQueue,\n    ownerArray,\n    index,\n    removeOnly\n  ) {\n    if (oldVnode === vnode) {\n      return\n    }\n\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n      // clone reused vnode\n      vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    var elm = vnode.elm = oldVnode.elm;\n\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\n      if (isDef(vnode.asyncFactory.resolved)) {\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n      } else {\n        vnode.isAsyncPlaceholder = true;\n      }\n      return\n    }\n\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (true) {\n          checkDuplicateKeys(ch);\n        }\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var hydrationBailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  // Note: style is excluded because it relies on initial clone for future\n  // deep updates (#7063).\n  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {\n    var i;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    inVPre = inVPre || (data && data.pre);\n    vnode.elm = elm;\n\n    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n      vnode.isAsyncPlaceholder = true;\n      return true\n    }\n    // assert node match\n    if (true) {\n      if (!assertNodeMatch(elm, vnode, inVPre)) {\n        return false\n      }\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          // v-html and domProps: innerHTML\n          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\n            if (i !== elm.innerHTML) {\n              /* istanbul ignore if */\n              if ( true &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('server innerHTML: ', i);\n                console.warn('client innerHTML: ', elm.innerHTML);\n              }\n              return false\n            }\n          } else {\n            // iterate and compare children lists\n            var childrenMatch = true;\n            var childNode = elm.firstChild;\n            for (var i$1 = 0; i$1 < children.length; i$1++) {\n              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {\n                childrenMatch = false;\n                break\n              }\n              childNode = childNode.nextSibling;\n            }\n            // if childNode is not null, it means the actual childNodes list is\n            // longer than the virtual children list.\n            if (!childrenMatch || childNode) {\n              /* istanbul ignore if */\n              if ( true &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n              }\n              return false\n            }\n          }\n        }\n      }\n      if (isDef(data)) {\n        var fullInvoke = false;\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            fullInvoke = true;\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n        if (!fullInvoke && data['class']) {\n          // ensure collecting deps for deep class bindings for future updates\n          traverse(data['class']);\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode, inVPre) {\n    if (isDef(vnode.tag)) {\n      return vnode.tag.indexOf('vue-component') === 0 || (\n        !isUnknownElement$$1(vnode, inVPre) &&\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (true) {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm = nodeOps.parentNode(oldElm);\n\n        // create new node\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        // update parent placeholder node element, recursively\n        if (isDef(vnode.parent)) {\n          var ancestor = vnode.parent;\n          var patchable = isPatchable(vnode);\n          while (ancestor) {\n            for (var i = 0; i < cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor);\n            }\n            ancestor.elm = vnode.elm;\n            if (patchable) {\n              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                cbs.create[i$1](emptyNode, ancestor);\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the \"inserted\" hook.\n              var insert = ancestor.data.hook.insert;\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                  insert.fns[i$2]();\n                }\n              }\n            } else {\n              registerRef(ancestor);\n            }\n            ancestor = ancestor.parent;\n          }\n        }\n\n        // destroy old node\n        if (isDef(parentElm)) {\n          removeVnodes([oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      dir.oldArg = oldDir.arg;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode, 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode, 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    // $flow-disable-line\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      // $flow-disable-line\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  // $flow-disable-line\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n];\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  var opts = vnode.componentOptions;\n  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\n    return\n  }\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  // #6666: IE/Edge forces progress value down to 1 before setting a max\n  /* istanbul ignore if */\n  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (el.tagName.indexOf('-') > -1) {\n    baseSetAttr(el, key, value);\n  } else if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // technically allowfullscreen is a boolean attribute for <iframe>,\n      // but Flash expects a value of \"true\" when used on <embed> tag\n      value = key === 'allowfullscreen' && el.tagName === 'EMBED'\n        ? 'true'\n        : key;\n      el.setAttribute(key, value);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, convertEnumeratedValue(key, value));\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    baseSetAttr(el, key, value);\n  }\n}\n\nfunction baseSetAttr (el, key, value) {\n  if (isFalsyAttrValue(value)) {\n    el.removeAttribute(key);\n  } else {\n    // #7138: IE10 & 11 fires input event when setting placeholder on\n    // <textarea>... block the first input event and remove the blocker\n    // immediately.\n    /* istanbul ignore if */\n    if (\n      isIE && !isIE9 &&\n      el.tagName === 'TEXTAREA' &&\n      key === 'placeholder' && value !== '' && !el.__ieph\n    ) {\n      var blocker = function (e) {\n        e.stopImmediatePropagation();\n        el.removeEventListener('input', blocker);\n      };\n      el.addEventListener('input', blocker);\n      // $flow-disable-line\n      el.__ieph = true; /* IE placeholder patched */\n    }\n    el.setAttribute(key, value);\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\nfunction parseFilters (exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\n    } else if (\n      c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C &&\n      exp.charCodeAt(i - 1) !== 0x7C &&\n      !curly && !square && !paren\n    ) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break         // \"\n        case 0x27: inSingle = true; break         // '\n        case 0x60: inTemplateString = true; break // `\n        case 0x28: paren++; break                 // (\n        case 0x29: paren--; break                 // )\n        case 0x5B: square++; break                // [\n        case 0x5D: square--; break                // ]\n        case 0x7B: curly++; break                 // {\n        case 0x7D: curly--; break                 // }\n      }\n      if (c === 0x2f) { // /\n        var j = i - 1;\n        var p = (void 0);\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') { break }\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter () {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression\n}\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + (args !== ')' ? ',' + args : args))\n  }\n}\n\n/*  */\n\n\n\n/* eslint-disable no-unused-vars */\nfunction baseWarn (msg, range) {\n  console.error((\"[Vue compiler]: \" + msg));\n}\n/* eslint-enable no-unused-vars */\n\nfunction pluckModuleFunction (\n  modules,\n  key\n) {\n  return modules\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\n    : []\n}\n\nfunction addProp (el, name, value, range, dynamic) {\n  (el.props || (el.props = [])).push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));\n  el.plain = false;\n}\n\nfunction addAttr (el, name, value, range, dynamic) {\n  var attrs = dynamic\n    ? (el.dynamicAttrs || (el.dynamicAttrs = []))\n    : (el.attrs || (el.attrs = []));\n  attrs.push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));\n  el.plain = false;\n}\n\n// add a raw attr (use this in preTransforms)\nfunction addRawAttr (el, name, value, range) {\n  el.attrsMap[name] = value;\n  el.attrsList.push(rangeSetItem({ name: name, value: value }, range));\n}\n\nfunction addDirective (\n  el,\n  name,\n  rawName,\n  value,\n  arg,\n  isDynamicArg,\n  modifiers,\n  range\n) {\n  (el.directives || (el.directives = [])).push(rangeSetItem({\n    name: name,\n    rawName: rawName,\n    value: value,\n    arg: arg,\n    isDynamicArg: isDynamicArg,\n    modifiers: modifiers\n  }, range));\n  el.plain = false;\n}\n\nfunction prependModifierMarker (symbol, name, dynamic) {\n  return dynamic\n    ? (\"_p(\" + name + \",\\\"\" + symbol + \"\\\")\")\n    : symbol + name // mark the event as captured\n}\n\nfunction addHandler (\n  el,\n  name,\n  value,\n  modifiers,\n  important,\n  warn,\n  range,\n  dynamic\n) {\n  modifiers = modifiers || emptyObject;\n  // warn prevent and passive modifier\n  /* istanbul ignore if */\n  if (\n     true && warn &&\n    modifiers.prevent && modifiers.passive\n  ) {\n    warn(\n      'passive and prevent can\\'t be used together. ' +\n      'Passive handler can\\'t prevent default event.',\n      range\n    );\n  }\n\n  // normalize click.right and click.middle since they don't actually fire\n  // this is technically browser-specific, but at least for now browsers are\n  // the only target envs that have right/middle clicks.\n  if (modifiers.right) {\n    if (dynamic) {\n      name = \"(\" + name + \")==='click'?'contextmenu':(\" + name + \")\";\n    } else if (name === 'click') {\n      name = 'contextmenu';\n      delete modifiers.right;\n    }\n  } else if (modifiers.middle) {\n    if (dynamic) {\n      name = \"(\" + name + \")==='click'?'mouseup':(\" + name + \")\";\n    } else if (name === 'click') {\n      name = 'mouseup';\n    }\n  }\n\n  // check capture modifier\n  if (modifiers.capture) {\n    delete modifiers.capture;\n    name = prependModifierMarker('!', name, dynamic);\n  }\n  if (modifiers.once) {\n    delete modifiers.once;\n    name = prependModifierMarker('~', name, dynamic);\n  }\n  /* istanbul ignore if */\n  if (modifiers.passive) {\n    delete modifiers.passive;\n    name = prependModifierMarker('&', name, dynamic);\n  }\n\n  var events;\n  if (modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n\n  var newHandler = rangeSetItem({ value: value.trim(), dynamic: dynamic }, range);\n  if (modifiers !== emptyObject) {\n    newHandler.modifiers = modifiers;\n  }\n\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n\n  el.plain = false;\n}\n\nfunction getRawBindingAttr (\n  el,\n  name\n) {\n  return el.rawAttrsMap[':' + name] ||\n    el.rawAttrsMap['v-bind:' + name] ||\n    el.rawAttrsMap[name]\n}\n\nfunction getBindingAttr (\n  el,\n  name,\n  getStatic\n) {\n  var dynamicValue =\n    getAndRemoveAttr(el, ':' + name) ||\n    getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue)\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue)\n    }\n  }\n}\n\n// note: this only removes the attr from the Array (attrsList) so that it\n// doesn't get processed by processAttrs.\n// By default it does NOT remove it from the map (attrsMap) because the map is\n// needed during codegen.\nfunction getAndRemoveAttr (\n  el,\n  name,\n  removeFromMap\n) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break\n      }\n    }\n  }\n  if (removeFromMap) {\n    delete el.attrsMap[name];\n  }\n  return val\n}\n\nfunction getAndRemoveAttrByRegex (\n  el,\n  name\n) {\n  var list = el.attrsList;\n  for (var i = 0, l = list.length; i < l; i++) {\n    var attr = list[i];\n    if (name.test(attr.name)) {\n      list.splice(i, 1);\n      return attr\n    }\n  }\n}\n\nfunction rangeSetItem (\n  item,\n  range\n) {\n  if (range) {\n    if (range.start != null) {\n      item.start = range.start;\n    }\n    if (range.end != null) {\n      item.end = range.end;\n    }\n  }\n  return item\n}\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\nfunction genComponentModel (\n  el,\n  value,\n  modifiers\n) {\n  var ref = modifiers || {};\n  var number = ref.number;\n  var trim = ref.trim;\n\n  var baseValueExpression = '$$v';\n  var valueExpression = baseValueExpression;\n  if (trim) {\n    valueExpression =\n      \"(typeof \" + baseValueExpression + \" === 'string'\" +\n      \"? \" + baseValueExpression + \".trim()\" +\n      \": \" + baseValueExpression + \")\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n  var assignment = genAssignmentCode(value, valueExpression);\n\n  el.model = {\n    value: (\"(\" + value + \")\"),\n    expression: JSON.stringify(value),\n    callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\n  };\n}\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\nfunction genAssignmentCode (\n  value,\n  assignment\n) {\n  var res = parseModel(value);\n  if (res.key === null) {\n    return (value + \"=\" + assignment)\n  } else {\n    return (\"$set(\" + (res.exp) + \", \" + (res.key) + \", \" + assignment + \")\")\n  }\n}\n\n/**\n * Parse a v-model expression into a base path and a final key segment.\n * Handles both dot-path and possible square brackets.\n *\n * Possible cases:\n *\n * - test\n * - test[key]\n * - test[test1[key]]\n * - test[\"a\"][key]\n * - xxx.test[a[a].test1[key]]\n * - test.xxx.a[\"asa\"][test1[key]]\n *\n */\n\nvar len, str, chr, index$1, expressionPos, expressionEndPos;\n\n\n\nfunction parseModel (val) {\n  // Fix https://github.com/vuejs/vue/pull/7730\n  // allow v-model=\"obj.val \" (trailing whitespace)\n  val = val.trim();\n  len = val.length;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    index$1 = val.lastIndexOf('.');\n    if (index$1 > -1) {\n      return {\n        exp: val.slice(0, index$1),\n        key: '\"' + val.slice(index$1 + 1) + '\"'\n      }\n    } else {\n      return {\n        exp: val,\n        key: null\n      }\n    }\n  }\n\n  str = val;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.slice(0, expressionPos),\n    key: val.slice(expressionPos + 1, expressionEndPos)\n  }\n}\n\nfunction next () {\n  return str.charCodeAt(++index$1)\n}\n\nfunction eof () {\n  return index$1 >= len\n}\n\nfunction isStringStart (chr) {\n  return chr === 0x22 || chr === 0x27\n}\n\nfunction parseBracket (chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue\n    }\n    if (chr === 0x5B) { inBracket++; }\n    if (chr === 0x5D) { inBracket--; }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break\n    }\n  }\n}\n\nfunction parseString (chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break\n    }\n  }\n}\n\n/*  */\n\nvar warn$1;\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\nfunction model (\n  el,\n  dir,\n  _warn\n) {\n  warn$1 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n\n  if (true) {\n    // inputs with type=\"file\" are read only and setting the input's\n    // value will throw an error.\n    if (tag === 'input' && type === 'file') {\n      warn$1(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\n        \"File inputs are read only. Use a v-on:change listener instead.\",\n        el.rawAttrsMap['v-model']\n      );\n    }\n  }\n\n  if (el.component) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers);\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (true) {\n    warn$1(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n      \"v-model is not supported on this element type. \" +\n      'If you are working with contenteditable, it\\'s recommended to ' +\n      'wrap a library dedicated for that purpose inside a custom component.',\n      el.rawAttrsMap['v-model']\n    );\n  }\n\n  // ensure runtime directive metadata\n  return true\n}\n\nfunction genCheckboxModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked',\n    \"Array.isArray(\" + value + \")\" +\n    \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\n      trueValueBinding === 'true'\n        ? (\":(\" + value + \")\")\n        : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n    )\n  );\n  addHandler(el, 'change',\n    \"var $$a=\" + value + \",\" +\n        '$$el=$event.target,' +\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n    'if(Array.isArray($$a)){' +\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n          '$$i=_i($$a,$$v);' +\n      \"if($$el.checked){$$i<0&&(\" + (genAssignmentCode(value, '$$a.concat([$$v])')) + \")}\" +\n      \"else{$$i>-1&&(\" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + \")}\" +\n    \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\",\n    null, true\n  );\n}\n\nfunction genRadioModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\n  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genSelect (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var selectedVal = \"Array.prototype.filter\" +\n    \".call($event.target.options,function(o){return o.selected})\" +\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\";\n\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n  var code = \"var $$selectedVal = \" + selectedVal + \";\";\n  code = code + \" \" + (genAssignmentCode(value, assignment));\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction genDefaultModel (\n  el,\n  value,\n  modifiers\n) {\n  var type = el.attrsMap.type;\n\n  // warn if v-bind:value conflicts with v-model\n  // except for inputs with v-bind:type\n  if (true) {\n    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];\n    var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\n    if (value$1 && !typeBinding) {\n      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';\n      warn$1(\n        binding + \"=\\\"\" + value$1 + \"\\\" conflicts with v-model on the same element \" +\n        'because the latter already expands to a value binding internally',\n        el.rawAttrsMap[binding]\n      );\n    }\n  }\n\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var needCompositionGuard = !lazy && type !== 'range';\n  var event = lazy\n    ? 'change'\n    : type === 'range'\n      ? RANGE_TOKEN\n      : 'input';\n\n  var valueExpression = '$event.target.value';\n  if (trim) {\n    valueExpression = \"$event.target.value.trim()\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  addProp(el, 'value', (\"(\" + value + \")\"));\n  addHandler(el, event, code, null, true);\n  if (trim || number) {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    var event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  // This was originally intended to fix #4521 but no longer necessary\n  // after 2.5. Keeping it for backwards compat with generated code from < 2.4\n  /* istanbul ignore if */\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction createOnceHandler$1 (event, handler, capture) {\n  var _target = target$1; // save current target element in closure\n  return function onceHandler () {\n    var res = handler.apply(null, arguments);\n    if (res !== null) {\n      remove$2(event, onceHandler, capture, _target);\n    }\n  }\n}\n\n// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp\n// implementation and does not fire microtasks in between event propagation, so\n// safe to exclude.\nvar useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);\n\nfunction add$1 (\n  name,\n  handler,\n  capture,\n  passive\n) {\n  // async edge case #6566: inner click event triggers patch, event handler\n  // attached to outer element during patch, and triggered again. This\n  // happens because browsers fire microtask ticks between event propagation.\n  // the solution is simple: we save the timestamp when a handler is attached,\n  // and the handler would only fire if the event passed to it was fired\n  // AFTER it was attached.\n  if (useMicrotaskFix) {\n    var attachedTimestamp = currentFlushTimestamp;\n    var original = handler;\n    handler = original._wrapper = function (e) {\n      if (\n        // no bubbling, should always fire.\n        // this is just a safety net in case event.timeStamp is unreliable in\n        // certain weird environments...\n        e.target === e.currentTarget ||\n        // event is fired after handler attachment\n        e.timeStamp >= attachedTimestamp ||\n        // bail for environments that have buggy event.timeStamp implementations\n        // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState\n        // #9681 QtWebEngine event.timeStamp is negative value\n        e.timeStamp <= 0 ||\n        // #9448 bail if event is fired in another document in a multi-page\n        // electron/nw.js app, since event.timeStamp will be using a different\n        // starting reference\n        e.target.ownerDocument !== document\n      ) {\n        return original.apply(this, arguments)\n      }\n    };\n  }\n  target$1.addEventListener(\n    name,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  name,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(\n    name,\n    handler._wrapper || handler,\n    capture\n  );\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);\n  target$1 = undefined;\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nvar svgContainer;\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (!(key in props)) {\n      elm[key] = '';\n    }\n  }\n\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n      // #6601 work around Chrome version <= 55 bug where single textNode\n      // replaced by innerHTML/textContent retains its parentNode property\n      if (elm.childNodes.length === 1) {\n        elm.removeChild(elm.childNodes[0]);\n      }\n    }\n\n    if (key === 'value' && elm.tagName !== 'PROGRESS') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, strCur)) {\n        elm.value = strCur;\n      }\n    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {\n      // IE doesn't support innerHTML for SVG elements\n      svgContainer = svgContainer || document.createElement('div');\n      svgContainer.innerHTML = \"<svg>\" + cur + \"</svg>\";\n      var svg = svgContainer.firstChild;\n      while (elm.firstChild) {\n        elm.removeChild(elm.firstChild);\n      }\n      while (svg.firstChild) {\n        elm.appendChild(svg.firstChild);\n      }\n    } else if (\n      // skip the update if old and new VDOM state is the same.\n      // `value` is handled separately because the DOM value may be temporarily\n      // out of sync with VDOM state due to focus, composition and modifiers.\n      // This  #4521 by skipping the unnecessary `checked` update.\n      cur !== oldProps[key]\n    ) {\n      // some property updates can throw\n      // e.g. `value` on <progress> w/ non-finite value\n      try {\n        elm[key] = cur;\n      } catch (e) {}\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (elm, checkVal) {\n  return (!elm.composing && (\n    elm.tagName === 'OPTION' ||\n    isNotInFocusAndDirty(elm, checkVal) ||\n    isDirtyWithModifiers(elm, checkVal)\n  ))\n}\n\nfunction isNotInFocusAndDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is\n  // not equal to the updated value\n  var notInFocus = true;\n  // #6157\n  // work around IE bug when accessing document.activeElement in an iframe\n  try { notInFocus = document.activeElement !== elm; } catch (e) {}\n  return notInFocus && elm.value !== checkVal\n}\n\nfunction isDirtyWithModifiers (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if (isDef(modifiers)) {\n    if (modifiers.number) {\n      return toNumber(value) !== toNumber(newVal)\n    }\n    if (modifiers.trim) {\n      return value.trim() !== newVal.trim()\n    }\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (\n        childNode && childNode.data &&\n        (styleData = normalizeStyleData(childNode.data))\n      ) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\n\nvar emptyStyle;\nvar normalize = cached(function (prop) {\n  emptyStyle = emptyStyle || document.createElement('div').style;\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in emptyStyle)) {\n    return prop\n  }\n  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < vendorNames.length; i++) {\n    var name = vendorNames[i] + capName;\n    if (name in emptyStyle) {\n      return name\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likely wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\nvar whitespaceRE = /\\s+/;\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n    if (!el.classList.length) {\n      el.removeAttribute('class');\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    cur = cur.trim();\n    if (cur) {\n      el.setAttribute('class', cur);\n    } else {\n      el.removeAttribute('class');\n    }\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def$$1) {\n  if (!def$$1) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def$$1 === 'object') {\n    var res = {};\n    if (def$$1.css !== false) {\n      extend(res, autoCssTransition(def$$1.name || 'v'));\n    }\n    extend(res, def$$1);\n    return res\n  } else if (typeof def$$1 === 'string') {\n    return autoCssTransition(def$$1)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser\n  ? window.requestAnimationFrame\n    ? window.requestAnimationFrame.bind(window)\n    : setTimeout\n  : /* istanbul ignore next */ function (fn) { return fn(); };\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n  if (transitionClasses.indexOf(cls) < 0) {\n    transitionClasses.push(cls);\n    addClass(el, cls);\n  }\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  // JSDOM may return undefined for transition properties\n  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');\n  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');\n  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\n// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers\n// in a locale-dependent way, using a comma instead of a dot.\n// If comma is not replaced with a dot, the input will be rounded down (i.e. acting\n// as a floor function) causing unexpected behaviors\nfunction toMs (s) {\n  return Number(s.slice(0, -1).replace(',', '.')) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    context = transitionNode.context;\n    transitionNode = transitionNode.parent;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if ( true && explicitEnterDuration != null) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode, 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled) {\n        addTransitionClass(el, toClass);\n        if (!userWantsControl) {\n          if (isValidDuration(explicitEnterDuration)) {\n            setTimeout(cb, explicitEnterDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data) || el.nodeType !== 1) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb)) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if ( true && isDef(explicitLeaveDuration)) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show && el.parentNode) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled) {\n          addTransitionClass(el, leaveToClass);\n          if (!userWantsControl) {\n            if (isValidDuration(explicitLeaveDuration)) {\n              setTimeout(cb, explicitLeaveDuration);\n            } else {\n              whenTransitionEnds(el, type, cb);\n            }\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar directive = {\n  inserted: function inserted (el, binding, vnode, oldVnode) {\n    if (vnode.tag === 'select') {\n      // #6903\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\n        mergeVNodeHook(vnode, 'postpatch', function () {\n          directive.componentUpdated(el, binding, vnode);\n        });\n      } else {\n        setSelected(el, binding, vnode.context);\n      }\n      el._vOptions = [].map.call(el.options, getValue);\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        el.addEventListener('compositionstart', onCompositionStart);\n        el.addEventListener('compositionend', onCompositionEnd);\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var prevOptions = el._vOptions;\n      var curOptions = el._vOptions = [].map.call(el.options, getValue);\n      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {\n        // trigger change event if\n        // no matching option found for at least one value\n        var needReset = el.multiple\n          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })\n          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\n        if (needReset) {\n          trigger(el, 'change');\n        }\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  actuallySetSelected(el, binding, vm);\n  /* istanbul ignore if */\n  if (isIE || isEdge) {\n    setTimeout(function () {\n      actuallySetSelected(el, binding, vm);\n    }, 0);\n  }\n}\n\nfunction actuallySetSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n     true && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  return options.every(function (o) { return !looseEqual(o, value); })\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition$$1) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (!value === !oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    if (transition$$1) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: directive,\n  show: show\n};\n\n/*  */\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };\n\nvar isVShowDirective = function (d) { return d.name === 'show'; };\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(isNotTextNode);\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if ( true && children.length > 1) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if ( true &&\n      mode && mode !== 'in-out' && mode !== 'out-in'\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? child.isComment\n        ? id + 'comment'\n        : id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(isVShowDirective)) {\n      child.data.show = true;\n    }\n\n    if (\n      oldChild &&\n      oldChild.data &&\n      !isSameChild(child, oldChild) &&\n      !isAsyncPlaceholder(oldChild) &&\n      // #6687 component root is a comment node\n      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)\n    ) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild.data.transition = extend({}, data);\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        if (isAsyncPlaceholder(child)) {\n          return oldRawChild\n        }\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n};\n\n/*  */\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  beforeMount: function beforeMount () {\n    var this$1 = this;\n\n    var update = this._update;\n    this._update = function (vnode, hydrating) {\n      var restoreActiveInstance = setActiveInstance(this$1);\n      // force removing pass\n      this$1.__patch__(\n        this$1._vnode,\n        this$1.kept,\n        false, // hydrating\n        true // removeOnly (!important, avoids unnecessary moves)\n      );\n      this$1._vnode = this$1.kept;\n      restoreActiveInstance();\n      update.call(this$1, vnode, hydrating);\n    };\n  },\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (true) {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    // assign to this to avoid being removed in tree-shaking\n    // $flow-disable-line\n    this._reflow = document.body.offsetHeight;\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (e && e.target !== el) {\n            return\n          }\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      /* istanbul ignore if */\n      if (this._hasMove) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n};\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue.config.mustUseProp = mustUseProp;\nVue.config.isReservedTag = isReservedTag;\nVue.config.isReservedAttr = isReservedAttr;\nVue.config.getTagNamespace = getTagNamespace;\nVue.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue.options.directives, platformDirectives);\nextend(Vue.options.components, platformComponents);\n\n// install platform patch function\nVue.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nif (inBrowser) {\n  setTimeout(function () {\n    if (config.devtools) {\n      if (devtools) {\n        devtools.emit('init', Vue);\n      } else if (\n        true\n      ) {\n        console[console.info ? 'info' : 'log'](\n          'Download the Vue Devtools extension for a better development experience:\\n' +\n          'https://github.com/vuejs/vue-devtools'\n        );\n      }\n    }\n    if ( true &&\n      config.productionTip !== false &&\n      typeof console !== 'undefined'\n    ) {\n      console[console.info ? 'info' : 'log'](\n        \"You are running Vue in development mode.\\n\" +\n        \"Make sure to turn on production mode when deploying for production.\\n\" +\n        \"See more tips at https://vuejs.org/guide/deployment.html\"\n      );\n    }\n  }, 0);\n}\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\n});\n\n\n\nfunction parseText (\n  text,\n  delimiters\n) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return\n  }\n  var tokens = [];\n  var rawTokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index, tokenValue;\n  while ((match = tagRE.exec(text))) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      rawTokens.push(tokenValue = text.slice(lastIndex, index));\n      tokens.push(JSON.stringify(tokenValue));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push((\"_s(\" + exp + \")\"));\n    rawTokens.push({ '@binding': exp });\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    rawTokens.push(tokenValue = text.slice(lastIndex));\n    tokens.push(JSON.stringify(tokenValue));\n  }\n  return {\n    expression: tokens.join('+'),\n    tokens: rawTokens\n  }\n}\n\n/*  */\n\nfunction transformNode (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if ( true && staticClass) {\n    var res = parseText(staticClass, options.delimiters);\n    if (res) {\n      warn(\n        \"class=\\\"\" + staticClass + \"\\\": \" +\n        'Interpolation inside attributes has been removed. ' +\n        'Use v-bind or the colon shorthand instead. For example, ' +\n        'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.',\n        el.rawAttrsMap['class']\n      );\n    }\n  }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData (el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + (el.staticClass) + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + (el.classBinding) + \",\";\n  }\n  return data\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData\n};\n\n/*  */\n\nfunction transformNode$1 (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    if (true) {\n      var res = parseText(staticStyle, options.delimiters);\n      if (res) {\n        warn(\n          \"style=\\\"\" + staticStyle + \"\\\": \" +\n          'Interpolation inside attributes has been removed. ' +\n          'Use v-bind or the colon shorthand instead. For example, ' +\n          'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.',\n          el.rawAttrsMap['style']\n        );\n      }\n    }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$1 (el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + (el.styleBinding) + \"),\";\n  }\n  return data\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$1\n};\n\n/*  */\n\nvar decoder;\n\nvar he = {\n  decode: function decode (html) {\n    decoder = decoder || document.createElement('div');\n    decoder.innerHTML = html;\n    return decoder.textContent\n  }\n};\n\n/*  */\n\nvar isUnaryTag = makeMap(\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n  'link,meta,param,source,track,wbr'\n);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap(\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n);\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap(\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n  'title,tr,track'\n);\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n// Regular Expressions for parsing tags and attributes\nvar attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\nvar dynamicArgAttribute = /^\\s*((?:v-[\\w-]+:|@|:|#)\\[[^=]+\\][^\\s\"'<>\\/=]*)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\nvar ncname = \"[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z\" + (unicodeRegExp.source) + \"]*\";\nvar qnameCapture = \"((?:\" + ncname + \"\\\\:)?\" + ncname + \")\";\nvar startTagOpen = new RegExp((\"^<\" + qnameCapture));\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp((\"^<\\\\/\" + qnameCapture + \"[^>]*>\"));\nvar doctype = /^<!DOCTYPE [^>]+>/i;\n// #7298: escape - to avoid being passed as HTML comment when inlined in page\nvar comment = /^<!\\--/;\nvar conditionalComment = /^<!\\[/;\n\n// Special Elements (can contain anything)\nvar isPlainTextElement = makeMap('script,style,textarea', true);\nvar reCache = {};\n\nvar decodingMap = {\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&amp;': '&',\n  '&#10;': '\\n',\n  '&#9;': '\\t',\n  '&#39;': \"'\"\n};\nvar encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;\n\n// #5992\nvar isIgnoreNewlineTag = makeMap('pre,textarea', true);\nvar shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\\n'; };\n\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\n  return value.replace(re, function (match) { return decodingMap[match]; })\n}\n\nfunction parseHTML (html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a plaintext content element like script/style\n    if (!lastTag || !isPlainTextElement(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('-->');\n\n          if (commentEnd >= 0) {\n            if (options.shouldKeepComment) {\n              options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);\n            }\n            advance(commentEnd + 3);\n            continue\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[1], curIndex, index);\n          continue\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {\n            advance(1);\n          }\n          continue\n        }\n      }\n\n      var text = (void 0), rest = (void 0), next = (void 0);\n      if (textEnd >= 0) {\n        rest = html.slice(textEnd);\n        while (\n          !endTag.test(rest) &&\n          !startTagOpen.test(rest) &&\n          !comment.test(rest) &&\n          !conditionalComment.test(rest)\n        ) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest.indexOf('<', 1);\n          if (next < 0) { break }\n          textEnd += next;\n          rest = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n      }\n\n      if (text) {\n        advance(text.length);\n      }\n\n      if (options.chars && text) {\n        options.chars(text, index - text.length, index);\n      }\n    } else {\n      var endTagLength = 0;\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\n          text = text\n            .replace(/<!\\--([\\s\\S]*?)-->/g, '$1') // #7298\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (shouldIgnoreFirstNewline(stackedTag, text)) {\n          text = text.slice(1);\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return ''\n      });\n      index += html.length - rest$1.length;\n      html = rest$1;\n      parseEndTag(stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last) {\n      options.chars && options.chars(html);\n      if ( true && !stack.length && options.warn) {\n        options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"), { start: index + html.length });\n      }\n      break\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance (n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag () {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {\n        attr.start = index;\n        advance(attr[0].length);\n        attr.end = index;\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match\n      }\n    }\n  }\n\n  function handleStartTag (match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag(lastTag);\n      }\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\n        parseEndTag(tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      var value = args[3] || args[4] || args[5] || '';\n      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'\n        ? options.shouldDecodeNewlinesForHref\n        : options.shouldDecodeNewlines;\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(value, shouldDecodeNewlines)\n      };\n      if ( true && options.outputSourceRange) {\n        attrs[i].start = args.start + args[0].match(/^\\s*/).length;\n        attrs[i].end = args.end;\n      }\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs, start: match.start, end: match.end });\n      lastTag = tagName;\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag (tagName, start, end) {\n    var pos, lowerCasedTagName;\n    if (start == null) { start = index; }\n    if (end == null) { end = index; }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase();\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if ( true &&\n          (i > pos || !tagName) &&\n          options.warn\n        ) {\n          options.warn(\n            (\"tag <\" + (stack[i].tag) + \"> has no matching end tag.\"),\n            { start: stack[i].start, end: stack[i].end }\n          );\n        }\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nvar onRE = /^@|^v-on:/;\nvar dirRE = /^v-|^@|^:|^#/;\nvar forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/;\nvar forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\nvar stripParensRE = /^\\(|\\)$/g;\nvar dynamicArgRE = /^\\[.*\\]$/;\n\nvar argRE = /:(.*)$/;\nvar bindRE = /^:|^\\.|^v-bind:/;\nvar modifierRE = /\\.[^.\\]]+(?=[^\\]]*$)/g;\n\nvar slotRE = /^v-slot(:|$)|^#/;\n\nvar lineBreakRE = /[\\r\\n]/;\nvar whitespaceRE$1 = /\\s+/g;\n\nvar invalidAttributeRE = /[\\s\"'<>\\/=]/;\n\nvar decodeHTMLCached = cached(he.decode);\n\nvar emptySlotScopeToken = \"_empty_\";\n\n// configurable state\nvar warn$2;\nvar delimiters;\nvar transforms;\nvar preTransforms;\nvar postTransforms;\nvar platformIsPreTag;\nvar platformMustUseProp;\nvar platformGetTagNamespace;\nvar maybeComponent;\n\nfunction createASTElement (\n  tag,\n  attrs,\n  parent\n) {\n  return {\n    type: 1,\n    tag: tag,\n    attrsList: attrs,\n    attrsMap: makeAttrsMap(attrs),\n    rawAttrsMap: {},\n    parent: parent,\n    children: []\n  }\n}\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse (\n  template,\n  options\n) {\n  warn$2 = options.warn || baseWarn;\n\n  platformIsPreTag = options.isPreTag || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformGetTagNamespace = options.getTagNamespace || no;\n  var isReservedTag = options.isReservedTag || no;\n  maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };\n\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n\n  delimiters = options.delimiters;\n\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var whitespaceOption = options.whitespace;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n\n  function warnOnce (msg, range) {\n    if (!warned) {\n      warned = true;\n      warn$2(msg, range);\n    }\n  }\n\n  function closeElement (element) {\n    trimEndingWhitespace(element);\n    if (!inVPre && !element.processed) {\n      element = processElement(element, options);\n    }\n    // tree management\n    if (!stack.length && element !== root) {\n      // allow root elements with v-if, v-else-if and v-else\n      if (root.if && (element.elseif || element.else)) {\n        if (true) {\n          checkRootConstraints(element);\n        }\n        addIfCondition(root, {\n          exp: element.elseif,\n          block: element\n        });\n      } else if (true) {\n        warnOnce(\n          \"Component template should contain exactly one root element. \" +\n          \"If you are using v-if on multiple elements, \" +\n          \"use v-else-if to chain them instead.\",\n          { start: element.start }\n        );\n      }\n    }\n    if (currentParent && !element.forbidden) {\n      if (element.elseif || element.else) {\n        processIfConditions(element, currentParent);\n      } else {\n        if (element.slotScope) {\n          // scoped slot\n          // keep it in the children list so that v-else(-if) conditions can\n          // find it as the prev node.\n          var name = element.slotTarget || '\"default\"'\n          ;(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        }\n        currentParent.children.push(element);\n        element.parent = currentParent;\n      }\n    }\n\n    // final children cleanup\n    // filter out scoped slots\n    element.children = element.children.filter(function (c) { return !(c).slotScope; });\n    // remove trailing whitespace node again\n    trimEndingWhitespace(element);\n\n    // check pre state\n    if (element.pre) {\n      inVPre = false;\n    }\n    if (platformIsPreTag(element.tag)) {\n      inPre = false;\n    }\n    // apply post-transforms\n    for (var i = 0; i < postTransforms.length; i++) {\n      postTransforms[i](element, options);\n    }\n  }\n\n  function trimEndingWhitespace (el) {\n    // remove trailing whitespace node\n    if (!inPre) {\n      var lastNode;\n      while (\n        (lastNode = el.children[el.children.length - 1]) &&\n        lastNode.type === 3 &&\n        lastNode.text === ' '\n      ) {\n        el.children.pop();\n      }\n    }\n  }\n\n  function checkRootConstraints (el) {\n    if (el.tag === 'slot' || el.tag === 'template') {\n      warnOnce(\n        \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\n        'contain multiple nodes.',\n        { start: el.start }\n      );\n    }\n    if (el.attrsMap.hasOwnProperty('v-for')) {\n      warnOnce(\n        'Cannot use v-for on stateful component root element because ' +\n        'it renders multiple elements.',\n        el.rawAttrsMap['v-for']\n      );\n    }\n  }\n\n  parseHTML(template, {\n    warn: warn$2,\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,\n    shouldKeepComment: options.comments,\n    outputSourceRange: options.outputSourceRange,\n    start: function start (tag, attrs, unary, start$1, end) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = createASTElement(tag, attrs, currentParent);\n      if (ns) {\n        element.ns = ns;\n      }\n\n      if (true) {\n        if (options.outputSourceRange) {\n          element.start = start$1;\n          element.end = end;\n          element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {\n            cumulated[attr.name] = attr;\n            return cumulated\n          }, {});\n        }\n        attrs.forEach(function (attr) {\n          if (invalidAttributeRE.test(attr.name)) {\n            warn$2(\n              \"Invalid dynamic argument expression: attribute names cannot contain \" +\n              \"spaces, quotes, <, >, / or =.\",\n              {\n                start: attr.start + attr.name.indexOf(\"[\"),\n                end: attr.start + attr.name.length\n              }\n            );\n          }\n        });\n      }\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n         true && warn$2(\n          'Templates should only be responsible for mapping the state to the ' +\n          'UI. Avoid placing tags with side-effects in your templates, such as ' +\n          \"<\" + tag + \">\" + ', as they will not be parsed.',\n          { start: element.start }\n        );\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        element = preTransforms[i](element, options) || element;\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else if (!element.processed) {\n        // structural directives\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n      }\n\n      if (!root) {\n        root = element;\n        if (true) {\n          checkRootConstraints(root);\n        }\n      }\n\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      } else {\n        closeElement(element);\n      }\n    },\n\n    end: function end (tag, start, end$1) {\n      var element = stack[stack.length - 1];\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      if ( true && options.outputSourceRange) {\n        element.end = end$1;\n      }\n      closeElement(element);\n    },\n\n    chars: function chars (text, start, end) {\n      if (!currentParent) {\n        if (true) {\n          if (text === template) {\n            warnOnce(\n              'Component template requires a root element, rather than just text.',\n              { start: start }\n            );\n          } else if ((text = text.trim())) {\n            warnOnce(\n              (\"text \\\"\" + text + \"\\\" outside root element will be ignored.\"),\n              { start: start }\n            );\n          }\n        }\n        return\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE &&\n        currentParent.tag === 'textarea' &&\n        currentParent.attrsMap.placeholder === text\n      ) {\n        return\n      }\n      var children = currentParent.children;\n      if (inPre || text.trim()) {\n        text = isTextTag(currentParent) ? text : decodeHTMLCached(text);\n      } else if (!children.length) {\n        // remove the whitespace-only node right after an opening tag\n        text = '';\n      } else if (whitespaceOption) {\n        if (whitespaceOption === 'condense') {\n          // in condense mode, remove the whitespace node if it contains\n          // line break, otherwise condense to a single space\n          text = lineBreakRE.test(text) ? '' : ' ';\n        } else {\n          text = ' ';\n        }\n      } else {\n        text = preserveWhitespace ? ' ' : '';\n      }\n      if (text) {\n        if (!inPre && whitespaceOption === 'condense') {\n          // condense consecutive whitespaces into single space\n          text = text.replace(whitespaceRE$1, ' ');\n        }\n        var res;\n        var child;\n        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {\n          child = {\n            type: 2,\n            expression: res.expression,\n            tokens: res.tokens,\n            text: text\n          };\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\n          child = {\n            type: 3,\n            text: text\n          };\n        }\n        if (child) {\n          if ( true && options.outputSourceRange) {\n            child.start = start;\n            child.end = end;\n          }\n          children.push(child);\n        }\n      }\n    },\n    comment: function comment (text, start, end) {\n      // adding anything as a sibling to the root node is forbidden\n      // comments should still be allowed, but ignored\n      if (currentParent) {\n        var child = {\n          type: 3,\n          text: text,\n          isComment: true\n        };\n        if ( true && options.outputSourceRange) {\n          child.start = start;\n          child.end = end;\n        }\n        currentParent.children.push(child);\n      }\n    }\n  });\n  return root\n}\n\nfunction processPre (el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs (el) {\n  var list = el.attrsList;\n  var len = list.length;\n  if (len) {\n    var attrs = el.attrs = new Array(len);\n    for (var i = 0; i < len; i++) {\n      attrs[i] = {\n        name: list[i].name,\n        value: JSON.stringify(list[i].value)\n      };\n      if (list[i].start != null) {\n        attrs[i].start = list[i].start;\n        attrs[i].end = list[i].end;\n      }\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processElement (\n  element,\n  options\n) {\n  processKey(element);\n\n  // determine whether this is a plain element after\n  // removing structural attributes\n  element.plain = (\n    !element.key &&\n    !element.scopedSlots &&\n    !element.attrsList.length\n  );\n\n  processRef(element);\n  processSlotContent(element);\n  processSlotOutlet(element);\n  processComponent(element);\n  for (var i = 0; i < transforms.length; i++) {\n    element = transforms[i](element, options) || element;\n  }\n  processAttrs(element);\n  return element\n}\n\nfunction processKey (el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    if (true) {\n      if (el.tag === 'template') {\n        warn$2(\n          \"<template> cannot be keyed. Place the key on real elements instead.\",\n          getRawBindingAttr(el, 'key')\n        );\n      }\n      if (el.for) {\n        var iterator = el.iterator2 || el.iterator1;\n        var parent = el.parent;\n        if (iterator && iterator === exp && parent && parent.tag === 'transition-group') {\n          warn$2(\n            \"Do not use v-for index as key on <transition-group> children, \" +\n            \"this is the same as not using keys.\",\n            getRawBindingAttr(el, 'key'),\n            true /* tip */\n          );\n        }\n      }\n    }\n    el.key = exp;\n  }\n}\n\nfunction processRef (el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor (el) {\n  var exp;\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n    var res = parseFor(exp);\n    if (res) {\n      extend(el, res);\n    } else if (true) {\n      warn$2(\n        (\"Invalid v-for expression: \" + exp),\n        el.rawAttrsMap['v-for']\n      );\n    }\n  }\n}\n\n\n\nfunction parseFor (exp) {\n  var inMatch = exp.match(forAliasRE);\n  if (!inMatch) { return }\n  var res = {};\n  res.for = inMatch[2].trim();\n  var alias = inMatch[1].trim().replace(stripParensRE, '');\n  var iteratorMatch = alias.match(forIteratorRE);\n  if (iteratorMatch) {\n    res.alias = alias.replace(forIteratorRE, '').trim();\n    res.iterator1 = iteratorMatch[1].trim();\n    if (iteratorMatch[2]) {\n      res.iterator2 = iteratorMatch[2].trim();\n    }\n  } else {\n    res.alias = alias;\n  }\n  return res\n}\n\nfunction processIf (el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions (el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else if (true) {\n    warn$2(\n      \"v-\" + (el.elseif ? ('else-if=\"' + el.elseif + '\"') : 'else') + \" \" +\n      \"used on element <\" + (el.tag) + \"> without corresponding v-if.\",\n      el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']\n    );\n  }\n}\n\nfunction findPrevElement (children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i]\n    } else {\n      if ( true && children[i].text !== ' ') {\n        warn$2(\n          \"text \\\"\" + (children[i].text.trim()) + \"\\\" between v-if and v-else(-if) \" +\n          \"will be ignored.\",\n          children[i]\n        );\n      }\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition (el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce (el) {\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\n  if (once$$1 != null) {\n    el.once = true;\n  }\n}\n\n// handle content being passed to a component as slot,\n// e.g. <template slot=\"xxx\">, <div slot-scope=\"xxx\">\nfunction processSlotContent (el) {\n  var slotScope;\n  if (el.tag === 'template') {\n    slotScope = getAndRemoveAttr(el, 'scope');\n    /* istanbul ignore if */\n    if ( true && slotScope) {\n      warn$2(\n        \"the \\\"scope\\\" attribute for scoped slots have been deprecated and \" +\n        \"replaced by \\\"slot-scope\\\" since 2.5. The new \\\"slot-scope\\\" attribute \" +\n        \"can also be used on plain elements in addition to <template> to \" +\n        \"denote scoped slots.\",\n        el.rawAttrsMap['scope'],\n        true\n      );\n    }\n    el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');\n  } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {\n    /* istanbul ignore if */\n    if ( true && el.attrsMap['v-for']) {\n      warn$2(\n        \"Ambiguous combined usage of slot-scope and v-for on <\" + (el.tag) + \"> \" +\n        \"(v-for takes higher priority). Use a wrapper <template> for the \" +\n        \"scoped slot to make it clearer.\",\n        el.rawAttrsMap['slot-scope'],\n        true\n      );\n    }\n    el.slotScope = slotScope;\n  }\n\n  // slot=\"xxx\"\n  var slotTarget = getBindingAttr(el, 'slot');\n  if (slotTarget) {\n    el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n    el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']);\n    // preserve slot as an attribute for native shadow DOM compat\n    // only for non-scoped slots.\n    if (el.tag !== 'template' && !el.slotScope) {\n      addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));\n    }\n  }\n\n  // 2.6 v-slot syntax\n  {\n    if (el.tag === 'template') {\n      // v-slot on <template>\n      var slotBinding = getAndRemoveAttrByRegex(el, slotRE);\n      if (slotBinding) {\n        if (true) {\n          if (el.slotTarget || el.slotScope) {\n            warn$2(\n              \"Unexpected mixed usage of different slot syntaxes.\",\n              el\n            );\n          }\n          if (el.parent && !maybeComponent(el.parent)) {\n            warn$2(\n              \"<template v-slot> can only appear at the root level inside \" +\n              \"the receiving component\",\n              el\n            );\n          }\n        }\n        var ref = getSlotName(slotBinding);\n        var name = ref.name;\n        var dynamic = ref.dynamic;\n        el.slotTarget = name;\n        el.slotTargetDynamic = dynamic;\n        el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf\n      }\n    } else {\n      // v-slot on component, denotes default slot\n      var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);\n      if (slotBinding$1) {\n        if (true) {\n          if (!maybeComponent(el)) {\n            warn$2(\n              \"v-slot can only be used on components or <template>.\",\n              slotBinding$1\n            );\n          }\n          if (el.slotScope || el.slotTarget) {\n            warn$2(\n              \"Unexpected mixed usage of different slot syntaxes.\",\n              el\n            );\n          }\n          if (el.scopedSlots) {\n            warn$2(\n              \"To avoid scope ambiguity, the default slot should also use \" +\n              \"<template> syntax when there are other named slots.\",\n              slotBinding$1\n            );\n          }\n        }\n        // add the component's children to its default slot\n        var slots = el.scopedSlots || (el.scopedSlots = {});\n        var ref$1 = getSlotName(slotBinding$1);\n        var name$1 = ref$1.name;\n        var dynamic$1 = ref$1.dynamic;\n        var slotContainer = slots[name$1] = createASTElement('template', [], el);\n        slotContainer.slotTarget = name$1;\n        slotContainer.slotTargetDynamic = dynamic$1;\n        slotContainer.children = el.children.filter(function (c) {\n          if (!c.slotScope) {\n            c.parent = slotContainer;\n            return true\n          }\n        });\n        slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken;\n        // remove children as they are returned from scopedSlots now\n        el.children = [];\n        // mark el non-plain so data gets generated\n        el.plain = false;\n      }\n    }\n  }\n}\n\nfunction getSlotName (binding) {\n  var name = binding.name.replace(slotRE, '');\n  if (!name) {\n    if (binding.name[0] !== '#') {\n      name = 'default';\n    } else if (true) {\n      warn$2(\n        \"v-slot shorthand syntax requires a slot name.\",\n        binding\n      );\n    }\n  }\n  return dynamicArgRE.test(name)\n    // dynamic [name]\n    ? { name: name.slice(1, -1), dynamic: true }\n    // static name\n    : { name: (\"\\\"\" + name + \"\\\"\"), dynamic: false }\n}\n\n// handle <slot/> outlets\nfunction processSlotOutlet (el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if ( true && el.key) {\n      warn$2(\n        \"`key` does not work on <slot> because slots are abstract outlets \" +\n        \"and can possibly expand into multiple elements. \" +\n        \"Use the key on a wrapping element instead.\",\n        getRawBindingAttr(el, 'key')\n      );\n    }\n  }\n}\n\nfunction processComponent (el) {\n  var binding;\n  if ((binding = getBindingAttr(el, 'is'))) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs (el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, modifiers, syncGen, isDynamic;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name.replace(dirRE, ''));\n      // support .foo shorthand syntax for the .prop modifier\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isDynamic = dynamicArgRE.test(name);\n        if (isDynamic) {\n          name = name.slice(1, -1);\n        }\n        if (\n           true &&\n          value.trim().length === 0\n        ) {\n          warn$2(\n            (\"The value for a v-bind expression cannot be empty. Found in \\\"v-bind:\" + name + \"\\\"\")\n          );\n        }\n        if (modifiers) {\n          if (modifiers.prop && !isDynamic) {\n            name = camelize(name);\n            if (name === 'innerHtml') { name = 'innerHTML'; }\n          }\n          if (modifiers.camel && !isDynamic) {\n            name = camelize(name);\n          }\n          if (modifiers.sync) {\n            syncGen = genAssignmentCode(value, \"$event\");\n            if (!isDynamic) {\n              addHandler(\n                el,\n                (\"update:\" + (camelize(name))),\n                syncGen,\n                null,\n                false,\n                warn$2,\n                list[i]\n              );\n              if (hyphenate(name) !== camelize(name)) {\n                addHandler(\n                  el,\n                  (\"update:\" + (hyphenate(name))),\n                  syncGen,\n                  null,\n                  false,\n                  warn$2,\n                  list[i]\n                );\n              }\n            } else {\n              // handler w/ dynamic event name\n              addHandler(\n                el,\n                (\"\\\"update:\\\"+(\" + name + \")\"),\n                syncGen,\n                null,\n                false,\n                warn$2,\n                list[i],\n                true // dynamic\n              );\n            }\n          }\n        }\n        if ((modifiers && modifiers.prop) || (\n          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)\n        )) {\n          addProp(el, name, value, list[i], isDynamic);\n        } else {\n          addAttr(el, name, value, list[i], isDynamic);\n        }\n      } else if (onRE.test(name)) { // v-on\n        name = name.replace(onRE, '');\n        isDynamic = dynamicArgRE.test(name);\n        if (isDynamic) {\n          name = name.slice(1, -1);\n        }\n        addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);\n      } else { // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        var arg = argMatch && argMatch[1];\n        isDynamic = false;\n        if (arg) {\n          name = name.slice(0, -(arg.length + 1));\n          if (dynamicArgRE.test(arg)) {\n            arg = arg.slice(1, -1);\n            isDynamic = true;\n          }\n        }\n        addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);\n        if ( true && name === 'model') {\n          checkForAliasModel(el, value);\n        }\n      }\n    } else {\n      // literal attribute\n      if (true) {\n        var res = parseText(value, delimiters);\n        if (res) {\n          warn$2(\n            name + \"=\\\"\" + value + \"\\\": \" +\n            'Interpolation inside attributes has been removed. ' +\n            'Use v-bind or the colon shorthand instead. For example, ' +\n            'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.',\n            list[i]\n          );\n        }\n      }\n      addAttr(el, name, JSON.stringify(value), list[i]);\n      // #6887 firefox doesn't update muted state if set via attribute\n      // even immediately after element creation\n      if (!el.component &&\n          name === 'muted' &&\n          platformMustUseProp(el.tag, el.attrsMap.type, name)) {\n        addProp(el, name, 'true', list[i]);\n      }\n    }\n  }\n}\n\nfunction checkInFor (el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true\n    }\n    parent = parent.parent;\n  }\n  return false\n}\n\nfunction parseModifiers (name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\n    return ret\n  }\n}\n\nfunction makeAttrsMap (attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (\n       true &&\n      map[attrs[i].name] && !isIE && !isEdge\n    ) {\n      warn$2('duplicate attribute: ' + attrs[i].name, attrs[i]);\n    }\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map\n}\n\n// for script (e.g. type=\"x/template\") or style, do not decode content\nfunction isTextTag (el) {\n  return el.tag === 'script' || el.tag === 'style'\n}\n\nfunction isForbiddenTag (el) {\n  return (\n    el.tag === 'style' ||\n    (el.tag === 'script' && (\n      !el.attrsMap.type ||\n      el.attrsMap.type === 'text/javascript'\n    ))\n  )\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug (attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res\n}\n\nfunction checkForAliasModel (el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$2(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"You are binding v-model directly to a v-for iteration alias. \" +\n        \"This will not be able to modify the v-for source array because \" +\n        \"writing to the alias is like modifying a function local variable. \" +\n        \"Consider using an array of objects and use v-model on an object property instead.\",\n        el.rawAttrsMap['v-model']\n      );\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\nfunction preTransformNode (el, options) {\n  if (el.tag === 'input') {\n    var map = el.attrsMap;\n    if (!map['v-model']) {\n      return\n    }\n\n    var typeBinding;\n    if (map[':type'] || map['v-bind:type']) {\n      typeBinding = getBindingAttr(el, 'type');\n    }\n    if (!map.type && !typeBinding && map['v-bind']) {\n      typeBinding = \"(\" + (map['v-bind']) + \").type\";\n    }\n\n    if (typeBinding) {\n      var ifCondition = getAndRemoveAttr(el, 'v-if', true);\n      var ifConditionExtra = ifCondition ? (\"&&(\" + ifCondition + \")\") : \"\";\n      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;\n      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);\n      // 1. checkbox\n      var branch0 = cloneASTElement(el);\n      // process for on the main node\n      processFor(branch0);\n      addRawAttr(branch0, 'type', 'checkbox');\n      processElement(branch0, options);\n      branch0.processed = true; // prevent it from double-processed\n      branch0.if = \"(\" + typeBinding + \")==='checkbox'\" + ifConditionExtra;\n      addIfCondition(branch0, {\n        exp: branch0.if,\n        block: branch0\n      });\n      // 2. add radio else-if condition\n      var branch1 = cloneASTElement(el);\n      getAndRemoveAttr(branch1, 'v-for', true);\n      addRawAttr(branch1, 'type', 'radio');\n      processElement(branch1, options);\n      addIfCondition(branch0, {\n        exp: \"(\" + typeBinding + \")==='radio'\" + ifConditionExtra,\n        block: branch1\n      });\n      // 3. other\n      var branch2 = cloneASTElement(el);\n      getAndRemoveAttr(branch2, 'v-for', true);\n      addRawAttr(branch2, ':type', typeBinding);\n      processElement(branch2, options);\n      addIfCondition(branch0, {\n        exp: ifCondition,\n        block: branch2\n      });\n\n      if (hasElse) {\n        branch0.else = true;\n      } else if (elseIfCondition) {\n        branch0.elseif = elseIfCondition;\n      }\n\n      return branch0\n    }\n  }\n}\n\nfunction cloneASTElement (el) {\n  return createASTElement(el.tag, el.attrsList.slice(), el.parent)\n}\n\nvar model$1 = {\n  preTransformNode: preTransformNode\n};\n\nvar modules$1 = [\n  klass$1,\n  style$1,\n  model$1\n];\n\n/*  */\n\nfunction text (el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"), dir);\n  }\n}\n\n/*  */\n\nfunction html (el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"), dir);\n  }\n}\n\nvar directives$1 = {\n  model: model,\n  text: text,\n  html: html\n};\n\n/*  */\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  directives: directives$1,\n  isPreTag: isPreTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  canBeLeftOpenTag: canBeLeftOpenTag,\n  isReservedTag: isReservedTag,\n  getTagNamespace: getTagNamespace,\n  staticKeys: genStaticKeys(modules$1)\n};\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize (root, options) {\n  if (!root) { return }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic$1(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1 (keys) {\n  return makeMap(\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +\n    (keys ? ',' + keys : '')\n  )\n}\n\nfunction markStatic$1 (node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (\n      !isPlatformReservedTag(node.tag) &&\n      node.tag !== 'slot' &&\n      node.attrsMap['inline-template'] == null\n    ) {\n      return\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic$1(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        var block = node.ifConditions[i$1].block;\n        markStatic$1(block);\n        if (!block.static) {\n          node.static = false;\n        }\n      }\n    }\n  }\n}\n\nfunction markStaticRoots (node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(\n      node.children.length === 1 &&\n      node.children[0].type === 3\n    )) {\n      node.staticRoot = true;\n      return\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        markStaticRoots(node.ifConditions[i$1].block, isInFor);\n      }\n    }\n  }\n}\n\nfunction isStatic (node) {\n  if (node.type === 2) { // expression\n    return false\n  }\n  if (node.type === 3) { // text\n    return true\n  }\n  return !!(node.pre || (\n    !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) &&\n    Object.keys(node).every(isStaticKey)\n  ))\n}\n\nfunction isDirectChildOfTemplateFor (node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false\n    }\n    if (node.for) {\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\nvar fnExpRE = /^([\\w$_]+|\\([^)]*?\\))\\s*=>|^function(?:\\s+[\\w$]+)?\\s*\\(/;\nvar fnInvokeRE = /\\([^)]*?\\);*$/;\nvar simplePathRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['[^']*?']|\\[\"[^\"]*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*$/;\n\n// KeyboardEvent.keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\n// KeyboardEvent.key aliases\nvar keyNames = {\n  // #7880: IE11 and Edge use `Esc` for Escape key name.\n  esc: ['Esc', 'Escape'],\n  tab: 'Tab',\n  enter: 'Enter',\n  // #9112: IE11 uses `Spacebar` for Space key name.\n  space: [' ', 'Spacebar'],\n  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.\n  up: ['Up', 'ArrowUp'],\n  left: ['Left', 'ArrowLeft'],\n  right: ['Right', 'ArrowRight'],\n  down: ['Down', 'ArrowDown'],\n  // #9112: IE11 uses `Del` for Delete key name.\n  'delete': ['Backspace', 'Delete', 'Del']\n};\n\n// #4868: modifiers that prevent the execution of the listener\n// need to explicitly return null so that we can determine whether to remove\n// the listener for .once\nvar genGuard = function (condition) { return (\"if(\" + condition + \")return null;\"); };\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: genGuard(\"$event.target !== $event.currentTarget\"),\n  ctrl: genGuard(\"!$event.ctrlKey\"),\n  shift: genGuard(\"!$event.shiftKey\"),\n  alt: genGuard(\"!$event.altKey\"),\n  meta: genGuard(\"!$event.metaKey\"),\n  left: genGuard(\"'button' in $event && $event.button !== 0\"),\n  middle: genGuard(\"'button' in $event && $event.button !== 1\"),\n  right: genGuard(\"'button' in $event && $event.button !== 2\")\n};\n\nfunction genHandlers (\n  events,\n  isNative\n) {\n  var prefix = isNative ? 'nativeOn:' : 'on:';\n  var staticHandlers = \"\";\n  var dynamicHandlers = \"\";\n  for (var name in events) {\n    var handlerCode = genHandler(events[name]);\n    if (events[name] && events[name].dynamic) {\n      dynamicHandlers += name + \",\" + handlerCode + \",\";\n    } else {\n      staticHandlers += \"\\\"\" + name + \"\\\":\" + handlerCode + \",\";\n    }\n  }\n  staticHandlers = \"{\" + (staticHandlers.slice(0, -1)) + \"}\";\n  if (dynamicHandlers) {\n    return prefix + \"_d(\" + staticHandlers + \",[\" + (dynamicHandlers.slice(0, -1)) + \"])\"\n  } else {\n    return prefix + staticHandlers\n  }\n}\n\nfunction genHandler (handler) {\n  if (!handler) {\n    return 'function(){}'\n  }\n\n  if (Array.isArray(handler)) {\n    return (\"[\" + (handler.map(function (handler) { return genHandler(handler); }).join(',')) + \"]\")\n  }\n\n  var isMethodPath = simplePathRE.test(handler.value);\n  var isFunctionExpression = fnExpRE.test(handler.value);\n  var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));\n\n  if (!handler.modifiers) {\n    if (isMethodPath || isFunctionExpression) {\n      return handler.value\n    }\n    return (\"function($event){\" + (isFunctionInvocation ? (\"return \" + (handler.value)) : handler.value) + \"}\") // inline statement\n  } else {\n    var code = '';\n    var genModifierCode = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        genModifierCode += modifierCode[key];\n        // left/right\n        if (keyCodes[key]) {\n          keys.push(key);\n        }\n      } else if (key === 'exact') {\n        var modifiers = (handler.modifiers);\n        genModifierCode += genGuard(\n          ['ctrl', 'shift', 'alt', 'meta']\n            .filter(function (keyModifier) { return !modifiers[keyModifier]; })\n            .map(function (keyModifier) { return (\"$event.\" + keyModifier + \"Key\"); })\n            .join('||')\n        );\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code += genKeyFilter(keys);\n    }\n    // Make sure modifiers like prevent and stop get executed after key filtering\n    if (genModifierCode) {\n      code += genModifierCode;\n    }\n    var handlerCode = isMethodPath\n      ? (\"return \" + (handler.value) + \"($event)\")\n      : isFunctionExpression\n        ? (\"return (\" + (handler.value) + \")($event)\")\n        : isFunctionInvocation\n          ? (\"return \" + (handler.value))\n          : handler.value;\n    return (\"function($event){\" + code + handlerCode + \"}\")\n  }\n}\n\nfunction genKeyFilter (keys) {\n  return (\n    // make sure the key filters only apply to KeyboardEvents\n    // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake\n    // key events that do not have keyCode property...\n    \"if(!$event.type.indexOf('key')&&\" +\n    (keys.map(genFilterCode).join('&&')) + \")return null;\"\n  )\n}\n\nfunction genFilterCode (key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return (\"$event.keyCode!==\" + keyVal)\n  }\n  var keyCode = keyCodes[key];\n  var keyName = keyNames[key];\n  return (\n    \"_k($event.keyCode,\" +\n    (JSON.stringify(key)) + \",\" +\n    (JSON.stringify(keyCode)) + \",\" +\n    \"$event.key,\" +\n    \"\" + (JSON.stringify(keyName)) +\n    \")\"\n  )\n}\n\n/*  */\n\nfunction on (el, dir) {\n  if ( true && dir.modifiers) {\n    warn(\"v-on without argument does not support modifiers.\");\n  }\n  el.wrapListeners = function (code) { return (\"_g(\" + code + \",\" + (dir.value) + \")\"); };\n}\n\n/*  */\n\nfunction bind$1 (el, dir) {\n  el.wrapData = function (code) {\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + \",\" + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + \")\")\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  on: on,\n  bind: bind$1,\n  cloak: noop\n};\n\n/*  */\n\n\n\n\n\nvar CodegenState = function CodegenState (options) {\n  this.options = options;\n  this.warn = options.warn || baseWarn;\n  this.transforms = pluckModuleFunction(options.modules, 'transformCode');\n  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  this.directives = extend(extend({}, baseDirectives), options.directives);\n  var isReservedTag = options.isReservedTag || no;\n  this.maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };\n  this.onceId = 0;\n  this.staticRenderFns = [];\n  this.pre = false;\n};\n\n\n\nfunction generate (\n  ast,\n  options\n) {\n  var state = new CodegenState(options);\n  var code = ast ? genElement(ast, state) : '_c(\"div\")';\n  return {\n    render: (\"with(this){return \" + code + \"}\"),\n    staticRenderFns: state.staticRenderFns\n  }\n}\n\nfunction genElement (el, state) {\n  if (el.parent) {\n    el.pre = el.pre || el.parent.pre;\n  }\n\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el, state)\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el, state)\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el, state)\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {\n    return genChildren(el, state) || 'void 0'\n  } else if (el.tag === 'slot') {\n    return genSlot(el, state)\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el, state);\n    } else {\n      var data;\n      if (!el.plain || (el.pre && state.maybeComponent(el))) {\n        data = genData$2(el, state);\n      }\n\n      var children = el.inlineTemplate ? null : genChildren(el, state, true);\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < state.transforms.length; i++) {\n      code = state.transforms[i](el, code);\n    }\n    return code\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic (el, state) {\n  el.staticProcessed = true;\n  // Some elements (templates) need to behave differently inside of a v-pre\n  // node.  All pre nodes are static roots, so we can use this as a location to\n  // wrap a state change and reset it upon exiting the pre node.\n  var originalPreState = state.pre;\n  if (el.pre) {\n    state.pre = el.pre;\n  }\n  state.staticRenderFns.push((\"with(this){return \" + (genElement(el, state)) + \"}\"));\n  state.pre = originalPreState;\n  return (\"_m(\" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\n}\n\n// v-once\nfunction genOnce (el, state) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n       true && state.warn(\n        \"v-once can only be used inside v-for that is keyed. \",\n        el.rawAttrsMap['v-once']\n      );\n      return genElement(el, state)\n    }\n    return (\"_o(\" + (genElement(el, state)) + \",\" + (state.onceId++) + \",\" + key + \")\")\n  } else {\n    return genStatic(el, state)\n  }\n}\n\nfunction genIf (\n  el,\n  state,\n  altGen,\n  altEmpty\n) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)\n}\n\nfunction genIfConditions (\n  conditions,\n  state,\n  altGen,\n  altEmpty\n) {\n  if (!conditions.length) {\n    return altEmpty || '_e()'\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions, state, altGen, altEmpty)))\n  } else {\n    return (\"\" + (genTernaryExp(condition.block)))\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp (el) {\n    return altGen\n      ? altGen(el, state)\n      : el.once\n        ? genOnce(el, state)\n        : genElement(el, state)\n  }\n}\n\nfunction genFor (\n  el,\n  state,\n  altGen,\n  altHelper\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n\n  if ( true &&\n    state.maybeComponent(el) &&\n    el.tag !== 'slot' &&\n    el.tag !== 'template' &&\n    !el.key\n  ) {\n    state.warn(\n      \"<\" + (el.tag) + \" v-for=\\\"\" + alias + \" in \" + exp + \"\\\">: component lists rendered with \" +\n      \"v-for should have explicit keys. \" +\n      \"See https://vuejs.org/guide/list.html#key for more info.\",\n      el.rawAttrsMap['v-for'],\n      true /* tip */\n    );\n  }\n\n  el.forProcessed = true; // avoid recursion\n  return (altHelper || '_l') + \"((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + ((altGen || genElement)(el, state)) +\n    '})'\n}\n\nfunction genData$2 (el, state) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el, state);\n  if (dirs) { data += dirs + ','; }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + (el.key) + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + (el.ref) + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < state.dataGenFns.length; i++) {\n    data += state.dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:\" + (genProps(el.attrs)) + \",\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:\" + (genProps(el.props)) + \",\";\n  }\n  // event handlers\n  if (el.events) {\n    data += (genHandlers(el.events, false)) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += (genHandlers(el.nativeEvents, true)) + \",\";\n  }\n  // slot target\n  // only for non-scoped slots\n  if (el.slotTarget && !el.slotScope) {\n    data += \"slot:\" + (el.slotTarget) + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += (genScopedSlots(el, el.scopedSlots, state)) + \",\";\n  }\n  // component v-model\n  if (el.model) {\n    data += \"model:{value:\" + (el.model.value) + \",callback:\" + (el.model.callback) + \",expression:\" + (el.model.expression) + \"},\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el, state);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind dynamic argument wrap\n  // v-bind with dynamic arguments must be applied using the same v-bind object\n  // merge helper so that class/style/mustUseProp attrs are handled correctly.\n  if (el.dynamicAttrs) {\n    data = \"_b(\" + data + \",\\\"\" + (el.tag) + \"\\\",\" + (genProps(el.dynamicAttrs)) + \")\";\n  }\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  // v-on data wrap\n  if (el.wrapListeners) {\n    data = el.wrapListeners(data);\n  }\n  return data\n}\n\nfunction genDirectives (el, state) {\n  var dirs = el.directives;\n  if (!dirs) { return }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = state.directives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, state.warn);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\" + (dir.isDynamicArg ? dir.arg : (\"\\\"\" + (dir.arg) + \"\\\"\"))) : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']'\n  }\n}\n\nfunction genInlineTemplate (el, state) {\n  var ast = el.children[0];\n  if ( true && (\n    el.children.length !== 1 || ast.type !== 1\n  )) {\n    state.warn(\n      'Inline-template components must have exactly one child element.',\n      { start: el.start }\n    );\n  }\n  if (ast && ast.type === 1) {\n    var inlineRenderFns = generate(ast, state.options);\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\n  }\n}\n\nfunction genScopedSlots (\n  el,\n  slots,\n  state\n) {\n  // by default scoped slots are considered \"stable\", this allows child\n  // components with only scoped slots to skip forced updates from parent.\n  // but in some cases we have to bail-out of this optimization\n  // for example if the slot contains dynamic names, has v-if or v-for on them...\n  var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {\n    var slot = slots[key];\n    return (\n      slot.slotTargetDynamic ||\n      slot.if ||\n      slot.for ||\n      containsSlotChild(slot) // is passing down slot from parent which may be dynamic\n    )\n  });\n\n  // #9534: if a component with scoped slots is inside a conditional branch,\n  // it's possible for the same component to be reused but with different\n  // compiled slot content. To avoid that, we generate a unique key based on\n  // the generated code of all the slot contents.\n  var needsKey = !!el.if;\n\n  // OR when it is inside another scoped slot or v-for (the reactivity may be\n  // disconnected due to the intermediate scope variable)\n  // #9438, #9506\n  // TODO: this can be further optimized by properly analyzing in-scope bindings\n  // and skip force updating ones that do not actually use scope variables.\n  if (!needsForceUpdate) {\n    var parent = el.parent;\n    while (parent) {\n      if (\n        (parent.slotScope && parent.slotScope !== emptySlotScopeToken) ||\n        parent.for\n      ) {\n        needsForceUpdate = true;\n        break\n      }\n      if (parent.if) {\n        needsKey = true;\n      }\n      parent = parent.parent;\n    }\n  }\n\n  var generatedSlots = Object.keys(slots)\n    .map(function (key) { return genScopedSlot(slots[key], state); })\n    .join(',');\n\n  return (\"scopedSlots:_u([\" + generatedSlots + \"]\" + (needsForceUpdate ? \",null,true\" : \"\") + (!needsForceUpdate && needsKey ? (\",null,false,\" + (hash(generatedSlots))) : \"\") + \")\")\n}\n\nfunction hash(str) {\n  var hash = 5381;\n  var i = str.length;\n  while(i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n  return hash >>> 0\n}\n\nfunction containsSlotChild (el) {\n  if (el.type === 1) {\n    if (el.tag === 'slot') {\n      return true\n    }\n    return el.children.some(containsSlotChild)\n  }\n  return false\n}\n\nfunction genScopedSlot (\n  el,\n  state\n) {\n  var isLegacySyntax = el.attrsMap['slot-scope'];\n  if (el.if && !el.ifProcessed && !isLegacySyntax) {\n    return genIf(el, state, genScopedSlot, \"null\")\n  }\n  if (el.for && !el.forProcessed) {\n    return genFor(el, state, genScopedSlot)\n  }\n  var slotScope = el.slotScope === emptySlotScopeToken\n    ? \"\"\n    : String(el.slotScope);\n  var fn = \"function(\" + slotScope + \"){\" +\n    \"return \" + (el.tag === 'template'\n      ? el.if && isLegacySyntax\n        ? (\"(\" + (el.if) + \")?\" + (genChildren(el, state) || 'undefined') + \":undefined\")\n        : genChildren(el, state) || 'undefined'\n      : genElement(el, state)) + \"}\";\n  // reverse proxy v-slot without scope on this.$slots\n  var reverseProxy = slotScope ? \"\" : \",proxy:true\";\n  return (\"{key:\" + (el.slotTarget || \"\\\"default\\\"\") + \",fn:\" + fn + reverseProxy + \"}\")\n}\n\nfunction genChildren (\n  el,\n  state,\n  checkSkip,\n  altGenElement,\n  altGenNode\n) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 &&\n      el$1.for &&\n      el$1.tag !== 'template' &&\n      el$1.tag !== 'slot'\n    ) {\n      var normalizationType = checkSkip\n        ? state.maybeComponent(el$1) ? \",1\" : \",0\"\n        : \"\";\n      return (\"\" + ((altGenElement || genElement)(el$1, state)) + normalizationType)\n    }\n    var normalizationType$1 = checkSkip\n      ? getNormalizationType(children, state.maybeComponent)\n      : 0;\n    var gen = altGenNode || genNode;\n    return (\"[\" + (children.map(function (c) { return gen(c, state); }).join(',')) + \"]\" + (normalizationType$1 ? (\",\" + normalizationType$1) : ''))\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType (\n  children,\n  maybeComponent\n) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (el.type !== 1) {\n      continue\n    }\n    if (needsNormalization(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n      res = 2;\n      break\n    }\n    if (maybeComponent(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n      res = 1;\n    }\n  }\n  return res\n}\n\nfunction needsNormalization (el) {\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\n}\n\nfunction genNode (node, state) {\n  if (node.type === 1) {\n    return genElement(node, state)\n  } else if (node.type === 3 && node.isComment) {\n    return genComment(node)\n  } else {\n    return genText(node)\n  }\n}\n\nfunction genText (text) {\n  return (\"_v(\" + (text.type === 2\n    ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\n}\n\nfunction genComment (comment) {\n  return (\"_e(\" + (JSON.stringify(comment.text)) + \")\")\n}\n\nfunction genSlot (el, state) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el, state);\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\n  var attrs = el.attrs || el.dynamicAttrs\n    ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) { return ({\n        // slot props are camelized\n        name: camelize(attr.name),\n        value: attr.value,\n        dynamic: attr.dynamic\n      }); }))\n    : null;\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')'\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent (\n  componentName,\n  el,\n  state\n) {\n  var children = el.inlineTemplate ? null : genChildren(el, state, true);\n  return (\"_c(\" + componentName + \",\" + (genData$2(el, state)) + (children ? (\",\" + children) : '') + \")\")\n}\n\nfunction genProps (props) {\n  var staticProps = \"\";\n  var dynamicProps = \"\";\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    var value = transformSpecialNewlines(prop.value);\n    if (prop.dynamic) {\n      dynamicProps += (prop.name) + \",\" + value + \",\";\n    } else {\n      staticProps += \"\\\"\" + (prop.name) + \"\\\":\" + value + \",\";\n    }\n  }\n  staticProps = \"{\" + (staticProps.slice(0, -1)) + \"}\";\n  if (dynamicProps) {\n    return (\"_d(\" + staticProps + \",[\" + (dynamicProps.slice(0, -1)) + \"])\")\n  } else {\n    return staticProps\n  }\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines (text) {\n  return text\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029')\n}\n\n/*  */\n\n\n\n// these keywords should not appear inside expressions, but operators like\n// typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\n  'extends,finally,continue,debugger,function,arguments'\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\n\n// these unary operators should not be used as property/method names\nvar unaryOperatorsRE = new RegExp('\\\\b' + (\n  'delete,typeof,void'\n).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\n\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors (ast, warn) {\n  if (ast) {\n    checkNode(ast, warn);\n  }\n}\n\nfunction checkNode (node, warn) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          var range = node.rawAttrsMap[name];\n          if (name === 'v-for') {\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), warn, range);\n          } else if (name === 'v-slot' || name[0] === '#') {\n            checkFunctionParameterExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), warn, range);\n          } else if (onRE.test(name)) {\n            checkEvent(value, (name + \"=\\\"\" + value + \"\\\"\"), warn, range);\n          } else {\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), warn, range);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], warn);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, warn, node);\n  }\n}\n\nfunction checkEvent (exp, text, warn, range) {\n  var stripped = exp.replace(stripStringRE, '');\n  var keywordMatch = stripped.match(unaryOperatorsRE);\n  if (keywordMatch && stripped.charAt(keywordMatch.index - 1) !== '$') {\n    warn(\n      \"avoid using JavaScript unary operator as property name: \" +\n      \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim()),\n      range\n    );\n  }\n  checkExpression(exp, text, warn, range);\n}\n\nfunction checkFor (node, text, warn, range) {\n  checkExpression(node.for || '', text, warn, range);\n  checkIdentifier(node.alias, 'v-for alias', text, warn, range);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);\n}\n\nfunction checkIdentifier (\n  ident,\n  type,\n  text,\n  warn,\n  range\n) {\n  if (typeof ident === 'string') {\n    try {\n      new Function((\"var \" + ident + \"=_\"));\n    } catch (e) {\n      warn((\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + (text.trim())), range);\n    }\n  }\n}\n\nfunction checkExpression (exp, text, warn, range) {\n  try {\n    new Function((\"return \" + exp));\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      warn(\n        \"avoid using JavaScript keyword as property name: \" +\n        \"\\\"\" + (keywordMatch[0]) + \"\\\"\\n  Raw expression: \" + (text.trim()),\n        range\n      );\n    } else {\n      warn(\n        \"invalid expression: \" + (e.message) + \" in\\n\\n\" +\n        \"    \" + exp + \"\\n\\n\" +\n        \"  Raw expression: \" + (text.trim()) + \"\\n\",\n        range\n      );\n    }\n  }\n}\n\nfunction checkFunctionParameterExpression (exp, text, warn, range) {\n  try {\n    new Function(exp, '');\n  } catch (e) {\n    warn(\n      \"invalid function parameter expression: \" + (e.message) + \" in\\n\\n\" +\n      \"    \" + exp + \"\\n\\n\" +\n      \"  Raw expression: \" + (text.trim()) + \"\\n\",\n      range\n    );\n  }\n}\n\n/*  */\n\nvar range = 2;\n\nfunction generateCodeFrame (\n  source,\n  start,\n  end\n) {\n  if ( start === void 0 ) start = 0;\n  if ( end === void 0 ) end = source.length;\n\n  var lines = source.split(/\\r?\\n/);\n  var count = 0;\n  var res = [];\n  for (var i = 0; i < lines.length; i++) {\n    count += lines[i].length + 1;\n    if (count >= start) {\n      for (var j = i - range; j <= i + range || end > count; j++) {\n        if (j < 0 || j >= lines.length) { continue }\n        res.push((\"\" + (j + 1) + (repeat$1(\" \", 3 - String(j + 1).length)) + \"|  \" + (lines[j])));\n        var lineLength = lines[j].length;\n        if (j === i) {\n          // push underline\n          var pad = start - (count - lineLength) + 1;\n          var length = end > count ? lineLength - pad : end - start;\n          res.push(\"   |  \" + repeat$1(\" \", pad) + repeat$1(\"^\", length));\n        } else if (j > i) {\n          if (end > count) {\n            var length$1 = Math.min(end - count, lineLength);\n            res.push(\"   |  \" + repeat$1(\"^\", length$1));\n          }\n          count += lineLength + 1;\n        }\n      }\n      break\n    }\n  }\n  return res.join('\\n')\n}\n\nfunction repeat$1 (str, n) {\n  var result = '';\n  if (n > 0) {\n    while (true) { // eslint-disable-line\n      if (n & 1) { result += str; }\n      n >>>= 1;\n      if (n <= 0) { break }\n      str += str;\n    }\n  }\n  return result\n}\n\n/*  */\n\n\n\nfunction createFunction (code, errors) {\n  try {\n    return new Function(code)\n  } catch (err) {\n    errors.push({ err: err, code: code });\n    return noop\n  }\n}\n\nfunction createCompileToFunctionFn (compile) {\n  var cache = Object.create(null);\n\n  return function compileToFunctions (\n    template,\n    options,\n    vm\n  ) {\n    options = extend({}, options);\n    var warn$$1 = options.warn || warn;\n    delete options.warn;\n\n    /* istanbul ignore if */\n    if (true) {\n      // detect possible CSP restriction\n      try {\n        new Function('return 1');\n      } catch (e) {\n        if (e.toString().match(/unsafe-eval|CSP/)) {\n          warn$$1(\n            'It seems you are using the standalone build of Vue.js in an ' +\n            'environment with Content Security Policy that prohibits unsafe-eval. ' +\n            'The template compiler cannot work in this environment. Consider ' +\n            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\n            'templates into render functions.'\n          );\n        }\n      }\n    }\n\n    // check cache\n    var key = options.delimiters\n      ? String(options.delimiters) + template\n      : template;\n    if (cache[key]) {\n      return cache[key]\n    }\n\n    // compile\n    var compiled = compile(template, options);\n\n    // check compilation errors/tips\n    if (true) {\n      if (compiled.errors && compiled.errors.length) {\n        if (options.outputSourceRange) {\n          compiled.errors.forEach(function (e) {\n            warn$$1(\n              \"Error compiling template:\\n\\n\" + (e.msg) + \"\\n\\n\" +\n              generateCodeFrame(template, e.start, e.end),\n              vm\n            );\n          });\n        } else {\n          warn$$1(\n            \"Error compiling template:\\n\\n\" + template + \"\\n\\n\" +\n            compiled.errors.map(function (e) { return (\"- \" + e); }).join('\\n') + '\\n',\n            vm\n          );\n        }\n      }\n      if (compiled.tips && compiled.tips.length) {\n        if (options.outputSourceRange) {\n          compiled.tips.forEach(function (e) { return tip(e.msg, vm); });\n        } else {\n          compiled.tips.forEach(function (msg) { return tip(msg, vm); });\n        }\n      }\n    }\n\n    // turn code into functions\n    var res = {};\n    var fnGenErrors = [];\n    res.render = createFunction(compiled.render, fnGenErrors);\n    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {\n      return createFunction(code, fnGenErrors)\n    });\n\n    // check function generation errors.\n    // this should only happen if there is a bug in the compiler itself.\n    // mostly for codegen development use\n    /* istanbul ignore if */\n    if (true) {\n      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\n        warn$$1(\n          \"Failed to generate render function:\\n\\n\" +\n          fnGenErrors.map(function (ref) {\n            var err = ref.err;\n            var code = ref.code;\n\n            return ((err.toString()) + \" in\\n\\n\" + code + \"\\n\");\n        }).join('\\n'),\n          vm\n        );\n      }\n    }\n\n    return (cache[key] = res)\n  }\n}\n\n/*  */\n\nfunction createCompilerCreator (baseCompile) {\n  return function createCompiler (baseOptions) {\n    function compile (\n      template,\n      options\n    ) {\n      var finalOptions = Object.create(baseOptions);\n      var errors = [];\n      var tips = [];\n\n      var warn = function (msg, range, tip) {\n        (tip ? tips : errors).push(msg);\n      };\n\n      if (options) {\n        if ( true && options.outputSourceRange) {\n          // $flow-disable-line\n          var leadingSpaceLength = template.match(/^\\s*/)[0].length;\n\n          warn = function (msg, range, tip) {\n            var data = { msg: msg };\n            if (range) {\n              if (range.start != null) {\n                data.start = range.start + leadingSpaceLength;\n              }\n              if (range.end != null) {\n                data.end = range.end + leadingSpaceLength;\n              }\n            }\n            (tip ? tips : errors).push(data);\n          };\n        }\n        // merge custom modules\n        if (options.modules) {\n          finalOptions.modules =\n            (baseOptions.modules || []).concat(options.modules);\n        }\n        // merge custom directives\n        if (options.directives) {\n          finalOptions.directives = extend(\n            Object.create(baseOptions.directives || null),\n            options.directives\n          );\n        }\n        // copy other options\n        for (var key in options) {\n          if (key !== 'modules' && key !== 'directives') {\n            finalOptions[key] = options[key];\n          }\n        }\n      }\n\n      finalOptions.warn = warn;\n\n      var compiled = baseCompile(template.trim(), finalOptions);\n      if (true) {\n        detectErrors(compiled.ast, warn);\n      }\n      compiled.errors = errors;\n      compiled.tips = tips;\n      return compiled\n    }\n\n    return {\n      compile: compile,\n      compileToFunctions: createCompileToFunctionFn(compile)\n    }\n  }\n}\n\n/*  */\n\n// `createCompilerCreator` allows creating compilers that use alternative\n// parser/optimizer/codegen, e.g the SSR optimizing compiler.\n// Here we just export a default compiler using the default parts.\nvar createCompiler = createCompilerCreator(function baseCompile (\n  template,\n  options\n) {\n  var ast = parse(template.trim(), options);\n  if (options.optimize !== false) {\n    optimize(ast, options);\n  }\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n});\n\n/*  */\n\nvar ref$1 = createCompiler(baseOptions);\nvar compile = ref$1.compile;\nvar compileToFunctions = ref$1.compileToFunctions;\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nvar div;\nfunction getShouldDecode (href) {\n  div = div || document.createElement('div');\n  div.innerHTML = href ? \"<a href=\\\"\\n\\\"/>\" : \"<div a=\\\"\\n\\\"/>\";\n  return div.innerHTML.indexOf('&#10;') > 0\n}\n\n// #3663: IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;\n// #6828: chrome encodes content in a[href]\nvar shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML\n});\n\nvar mount = Vue.prototype.$mount;\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n     true && warn(\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\n    );\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if ( true && !template) {\n            warn(\n              (\"Template element not found or is empty: \" + (options.template)),\n              this\n            );\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (true) {\n          warn('invalid template option:' + template, this);\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if ( true && config.performance && mark) {\n        mark('compile');\n      }\n\n      var ref = compileToFunctions(template, {\n        outputSourceRange: \"development\" !== 'production',\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,\n        delimiters: options.delimiters,\n        comments: options.comments\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n\n      /* istanbul ignore if */\n      if ( true && config.performance && mark) {\n        mark('compile end');\n        measure((\"vue \" + (this._name) + \" compile\"), 'compile', 'compile end');\n      }\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML (el) {\n  if (el.outerHTML) {\n    return el.outerHTML\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML\n  }\n}\n\nVue.compile = compileToFunctions;\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Vue);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue/dist/vue.esm.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./node_modules/bootstrap-vue/dist/bootstrap-vue.js");
/******/ 	
/******/ })()
;